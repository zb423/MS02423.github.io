<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>红日靶场(一)</title>
      <link href="/2023/07/17/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA-%E4%B8%80/"/>
      <url>/2023/07/17/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>一. 环境搭建</p><ol><li><p>实验环境拓扑如下：</p></li><li><p>下载好镜像文件，下载地址: <a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a> (13G，需要百度网盘会员)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA之SQL注入</title>
      <link href="/2023/06/30/DVWA%E4%B9%8BSQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/06/30/DVWA%E4%B9%8BSQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>一.DVWA介绍<br>1.1 DVWA简介</p><p>DVWA是一款基于PHP和MYSQL开发的web靶场练习平台，集成了常见的web漏洞如sql注入,XSS，密码破解等常见漏洞。旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。<br>1.2 DVWA模块</p><p>DVWA共有十个模块：</p><pre><code>Brute Force（暴力（破解））Command Injection（命令行注入）CSRF（跨站请求伪造）File Inclusion（文件包含）File Upload（文件上传）Insecure CAPTCHA （不安全的验证码）SQL Injection（SQL注入）SQL Injection（Blind）（SQL盲注）XSS（Reflected）（反射型跨站脚本）</code></pre><p>XSS（Stored）（存储型跨站脚本）<br>1.3 DVWA 安全级别</p><p>一般情况下，DVWA一共有四种安全级别，分别为：</p><p>Low、Medium、High、Impossible<br>二.DVWA的搭建<br>2.1 phpstudy的搭建</p><p>phpstudy下载地址小皮面板(phpstudy) - 让天下没有难配的服务器环境！ (xp.cn)</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205245426.png" alt="image-20230629205245426"></p><p>下载完后双击压缩包中的应用程序</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205404031.png" alt="image-20230629205404031"></p><p>选择路径，这里我存储在D盘中</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205415401.png" alt="image-20230629205415401"></p><p>然后就安装成功了</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205437881.png" alt="image-20230629205437881"></p><p>2.2DVWA的搭建</p><p><a href="https://raw.githubusercontent.com/zb423/image/main/image-20230629205445441.png">DVWA的官网DVWA - 该死的易受攻击的Web应用程序</a></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205445441.png" alt="image-20230629205445441"></p><p> 将其解压到PHPstudy路径下的PHPTutorial下的WWW目录下</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205507944.png" alt="image-20230629205507944"></p><p>解压后进入DVWA下的config文件打开config.inc.php文件</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205525004.png" alt="image-20230629205525004"></p><p>将p@ssw0rd 修改为 root </p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205537239.png" alt="image-20230629205537239"></p><p>然后在浏览器中访问<a href="http://127.0.0.1/DVWA-master/setup.php,%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BB%E7%BD%91%E7%AB%99%E4%B8%8B%E6%96%B9%E7%9A%84Create/Reset">http://127.0.0.1/DVWA-master/setup.php,然后点击网站下方的Create/Reset</a> Database按钮</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205548769.png" alt="image-20230629205548769"></p><p> 接着会跳转到DVWA的登录页面默认用户名：admin 默认密码：password 成功登录</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205600337.png" alt="image-20230629205600337"></p><p> 三.SQL注入漏洞<br>3.1 SQL注入原理</p><p>  就是通过把恶意的sql命令插入web表单递交给服务器，或者输入域名或页面请求的查询字符串递交到服务器，达到欺骗服务器，让服务器执行这些恶意的sql命令，从而让攻击者，可以绕过一些机制，达到直接访问数据库的一种攻击手段。<br>3.2 SQL注入分类</p><p>(1)数字型        （2）字符型       （3）报错注入     （4）Boollean注入                （5）时间注入<br>3.3 SQL注入思路</p><p>(1).判断是否存在注入，注入是字符型还是数字型</p><p>(2).猜解SQL查询语句中的字段数</p><p>(3).确定回显位置</p><p>(4).获取当前数据库</p><p>(5).获取数据库中的表</p><p>(6).获取表中的字段名</p><p>(7).得到数据<br>3.4 SQL注入绕过方法</p><p>(1)注释符号绕过         (2)大小写绕过         (3)内联注释绕过</p><p>(4)特殊编码绕过         (5)空格过滤绕过       (6)过滤or and xor not 绕过<br>四.SQL注入漏洞的分析<br>4.1 定义</p><p>SQL注入（SQLi）是一种注入攻击，可以执行恶意SQL语句。它通过将任意SQL代码插入数据库查询，使攻击者能够完全控制Web应用程序后面的数据库服务器。攻击者可以使用SQL注入漏洞绕过应用程序安全措施；可以绕过网页或Web应用程序的身份验证和授权，并检索整个SQL数据库的内容；还可以使用SQL注入来添加，修改和删除数据库中的记录。<br>4.2 原因</p><p>SQL 注入漏洞存在的原因，就是拼接SQL参数。也就是将用于输入的查询参数，直接拼接在SQL语句中，导致了SQL注入漏洞。</p><p>web 开发人员无法保证所有的输入都已经过滤</p><p>攻击者利用发送给服务器的输入参数构造可执行的 SQL 代码（可加入到 get 请求、 post 谓求、 http 头信思、 cookie 中）</p><p>数据库未做相应的安全配置</p><p>五.SQL Injection<br>1.low级别</p><p>(1)判断注入类型，是数字型注入，还是字符型注入</p><p>我们输入1，看到正确返回值</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205620389.png" alt="image-20230629205620389"></p><p> 我们输入1’，看到报错了</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205627463.png" alt="image-20230629205627463"></p><p> 我们可以猜出到是字符型注入，我们继续输入1’ and ‘1’ &#x3D;’1和1’ and ‘1’&#x3D;’2。</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205634464.png" alt="image-20230629205634464"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205654928.png" alt="image-20230629205654928"> </p><p>我们根据id&#x3D;1’报错和id&#x3D;1’ and ‘1’&#x3D;’1正确，我们可以知道是字符型注入，查看源代码知道就是字符型注入。</p><p>(2)判断字段数                                     order by </p><p>我们使用order by 进行判断字段数， 至到order by 进行报错时候就是字段数</p><p>id&#x3D;1’ order by 1#没有报错</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205708287.png" alt="image-20230629205708287"></p><p> id&#x3D;1’ order by 2# 没有报错</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205719159.png" alt="image-20230629205719159"></p><p> id&#x3D;1’ order by 3#时报错了，说明字段只有2列</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205728020.png" alt="image-20230629205728020"></p><p>(3)判断回显位置                       union select 1,2#</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205737176.png" alt="image-20230629205737176"></p><p> 可以知道回显位置 在这二个地方</p><p>(4)判断数据库                                     union select 1,database()#</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205749705.png" alt="image-20230629205749705"></p><p>(5)获取表名          1’  union select 1,group_concat(table_name) from information_schema.tables where 获取字段名 tables_schema&#x3D;database()#</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205758634.png" alt="image-20230629205758634"></p><p> (6)获取字段名                  1’ union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’#</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205805006.png" alt="image-20230629205805006"></p><p>(7)获取数据    1’ union select user,password from users # </p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205811845.png" alt="image-20230629205811845"></p><p> 2.medium级别</p><p>(1)判断注入类型     我们可以看到无法输入数字，所以我们进行抓包在bp中进行SQL注入</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230629205820686.png" alt="image-20230629205820686"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630090846100.png" alt="image-20230630090846100"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630091906777.png" alt="image-20230630091906777"></p><p>我们输入id&#x3D;1’ and ‘1’&#x3D;’1看见报错了，输入id&#x3D;1 and 1&#x3D;1没有报错。</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630091916153.png" alt="image-20230630091916153"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630091922774.png" alt="image-20230630091922774"> </p><p>所以注入类型为数字类型 </p><p>(2)判断列数</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630091932131.png" alt="image-20230630091932131"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630091938170.png" alt="image-20230630091938170"></p><p> 我们知道列数为2列</p><p>（3）判断回显位置   </p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630091954566.png" alt="image-20230630091954566"></p><p>我们可以知道回显位置是2</p><p>(4)判断数据库</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092002267.png" alt="image-20230630092002267"></p><p>（5）判断表名</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092008882.png" alt="image-20230630092008882"></p><p> (6)判断列名</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092016164.png" alt="image-20230630092016164"> </p><p>我们输入users之后，发现没有如何反应</p><p>通过源代码我们可以知道，发现它对单引号进行了转义，我们采用16进制绕过，得知users的十六进制为 0x75736572</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092022406.png" alt="image-20230630092022406"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092029237.png" alt="image-20230630092029237"></p><p> (7)获取数据</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092046389.png" alt="image-20230630092046389"></p><p> 3.high级别</p><p>（1）判断注入类型</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092056445.png" alt="image-20230630092056445"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092117439.png" alt="image-20230630092117439"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092126461.png" alt="image-20230630092126461"></p><p>我们可以知道是字符型注入</p><p>(2)判断列数</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092139528.png" alt="image-20230630092139528"> </p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092146715.png" alt="image-20230630092146715"></p><p>列数为2列，我们可以发现high级别和low级别的步骤是一样的，所以我在这里就不写了，可以参考low级别的步骤就行了<br>六.SQL Injection (Blind)</p><p>我们在讲SQL Injection (Blind)之前，先讲一下什么是sqlmap注入。</p><p>sqlmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL进行SQL注入。目前支持的数据库有MySql、Oracle、Access、PostageSQL、SQL Server、IBM DB2、SQLite、Firebird、Sybase和SAP MaxDB等。</p><p>Sqlmap采用了以下5种独特的SQL注入技术</p><pre><code>基于布尔类型的盲注，即可以根据返回页面判断条件真假的注入基于时间的盲注，即不能根据页面返回的内容判断任何信息，要用条件语句查看时间延迟语句是否已经执行(即页面返回时间是否增加)来判断基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回到页面中联合查询注入，在可以使用Union的情况下注入堆查询注入，可以同时执行多条语句时的注入</code></pre><p>Sqlmap的强大的功能包括 数据库指纹识别、数据库枚举、数据提取、访问目标文件系统，并在获取完全的操作权限时执行任意命令。</p><p>sqlmap是一个跨平台的工具，很好用，是SQL注入方面一个强大的工具！</p><p>我们可以使用 -h 参数查看sqlmap的参数以及用法，sqlmap  -h</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092157700.png" alt="image-20230630092157700"></p><p> sqlmap的使用方法:sqlmap -u  url 是对网站进行注入  </p><pre><code>                            sqlmap -r  是对文件进行注入       </code></pre><p>这里我们对SQL Injection的low级别进行sqlmap，具体过程我写在了图片上面</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092240622.png" alt="image-20230630092240622"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092251918.png" alt="image-20230630092251918"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092317769.png" alt="image-20230630092317769"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092331232.png" alt="image-20230630092331232"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092339570.png" alt="image-20230630092339570"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092352745.png" alt="image-20230630092352745"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092403787.png" alt="image-20230630092403787"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092413572.png" alt="image-20230630092413572"></p><p>1.low级别</p><p>(1)我们先进行抓包</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092422081.png" alt="image-20230630092422081"></p><p> (2)然后使用sqlmap</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092430324.png" alt="image-20230630092430324"> </p><p>(3)爆破数据库              –dbs</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092444925.png" alt="image-20230630092444925"></p><p> (4)爆破表名                             -D ‘dvwa’ –tables</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092504122.png" alt="image-20230630092504122"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092521378.png" alt="image-20230630092521378"></p><p> (5)爆破字段名    -D ‘dvwa’  -T ‘ guestbook’ –columns</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092532169.png" alt="image-20230630092532169"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092538796.png" alt="image-20230630092538796"></p><p> (6)爆破数据</p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092544177.png" alt="image-20230630092544177"></p><p><img src="https://raw.githubusercontent.com/zb423/image/main/image-20230630092550005.png" alt="image-20230630092550005"> </p><p>后面的我们都可以使用sqlmap进行注入,所以后面的就在这里不讲解了。</p><p><img src="https://raw.githubusercontent.com/zb423/img/main/img/OIP.cgzOSsYiK2tlhL3PridOVwHaE_" alt="谢谢阅读图片 的图像结果"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
